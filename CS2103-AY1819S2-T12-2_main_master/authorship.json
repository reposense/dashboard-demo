[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003d Acquizition"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S2-T12-2/main[image:https://travis-ci.org/CS2103-AY1819S2-T12-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "https://ci.appveyor.com/project/sergiovieri/main[image:https://ci.appveyor.com/api/projects/status/ukgcotxvrf021ksr/branch/master?svg\u003dtrue[Build Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S2-T12-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S2-T12-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "https://www.codacy.com/app/sergiovieri/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dcs2103-ay1819s2-t12-2/main\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/caf9760ff67c48b498d39589c74ac45a[Codacy Badge]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* _Acquizition_ is a desktop flashcard application for subject revision and language acquisition."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* Using a scientifically-grounded SRS (Spaced Repetition System), _Acquizition_ maximizes"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "memory retention by testing the terms most likely to be forgotten soon."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* _Acquizition_ has a sleek and intuitive GUI (Graphical User Interface) to streamline the experience"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "for new users, but also sports a CLI (Command Line Interface) to maximize the efficiency of"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "power users. It\u0027s the best of both worlds!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003d\u003d Interested?"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* Get started with _Acquizition_ by immediately heading over to our \u003c\u003cUserGuide#, User Guide\u003e\u003e!"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* _Acquizition_ is an open-source project. If you want to help contribute, please check out our \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e!"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* _Acquizition_ is adapted from the https://github.com/se-edu/addressbook-level4[addressbook-level4] project created by the https://github.com/se-edu[se-edu initiative]."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TestFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "sergiovieri": 18,
      "-": 23
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "      \"githubId\": \"lungsin\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "      \"displayName\": \"KWE...SIN\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "      \"authorNames\": [\"lungsin\", \"Lung Sin\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "      \"githubId\": \"lucatriglia\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "      \"displayName\": \"LUC...LIA\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "      \"authorNames\": [\"lucatriglia\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "      \"githubId\": \"robincyu\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "      \"displayName\": \"ROB... YU\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "      \"authorNames\": [\"robincyu\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "      \"githubId\": \"sergiovieri\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "      \"displayName\": \"SER...ERI\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "      \"authorNames\": [\"sergiovieri\", \"sergio.vieri\", \"Sergio Vieri\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sergiovieri": 25
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.vintage\u0027, name: \u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d files(sourceSets.main.output)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0027testfx.robot\u0027   : \u0027glass\u0027,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0027prism.order\u0027    : \u0027sw\u0027,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0027prism.text\u0027     : \u0027t2k\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            linkcss             : true,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            stylesheet          : \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            icons               : \u0027font\u0027,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            experimental        : true,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            sectlinks           : true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            idprefix            : \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            idseparator         : \u0027-\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027site-root\u0027         : \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            \u0027site-name\u0027         : \u0027Acquizition\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            \u0027site-githuburl\u0027    : \u0027https://github.com/cs2103-ay1819s2-t12-2/main\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    from(\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "lungsin": 1,
      "robincyu": 1,
      "-": 234
    }
  },
  {
    "path": "config/checkstyle/checkstyle.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE module PUBLIC"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "        \"-//Puppy Crawl//DTD Check Configuration 1.3//EN\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \"http://www.puppycrawl.com/dtds/configuration_1_3.dtd\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    This configuration file enforces rules for a modified version of the module\u0027s code standard at"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    https://oss-generic.github.io/process/codingstandards/coding-standards-java.html"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cmodule name\u003d\"Checker\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"FileTabCharacter\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks that there are no tab characters in the file. --\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"NewlineAtEndOfFile\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Accept LF, CR or CRLF to accomodate devs who prefer different line endings --\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cproperty name\u003d\"lineSeparator\" value\u003d\"lf_cr_crlf\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"RegexpSingleline\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks that FIXME is not used in comments.  TODO is preferred. --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cproperty name\u003d\"format\" value\u003d\"((//.*)|(\\*.*))FIXME\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cproperty name\u003d\"message\" value\u003d\u0027TODO is preferred to FIXME.\"\u0027/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"SuppressionFilter\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cproperty name\u003d\"file\" value\u003d\"config/checkstyle/suppressions.xml\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- All Java AST specific tests live under TreeWalker module. --\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"TreeWalker\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Required for SuppressionCommentFilter to work --\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"FileContentsHolder\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Required to allow exceptions in code style --\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"SuppressionCommentFilter\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"offCommentFormat\" value\u003d\"CHECKSTYLE.OFF\\: ([\\w\\|]+)\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"onCommentFormat\" value\u003d\"CHECKSTYLE.ON\\: ([\\w\\|]+)\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"checkFormat\" value\u003d\"$1\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!--"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        IMPORT CHECKS"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks the ordering of import statements follow the rules that the default Eclipse formatter uses."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        The order rule \"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\" consists of:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          1. STATIC: static imports"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "          2. STANDARD_JAVA_PACKAGE: standard java/javax imports"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "          3. SPECIAL_IMPORTS: defined as org imports"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          4. THIRD_PARTY_PACKAGE: defined as com imports"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"CustomImportOrder\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"customImportOrderRules\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                      value\u003d\"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\"/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"specialImportsRegExp\" value\u003d\"^org\\.\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"thirdPartyPackageRegExp\" value\u003d\"^com\\.\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"sortImportsInGroupAlphabetically\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks for redundant import statements."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        An import statement is redundant if:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "          * It is a duplicate of another import. This is, when a class is imported more than once."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "          * The class non-statically imported is from the java.lang package, e.g. importing java.lang.String."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "          * The class non-statically imported is from the same package as the current package."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"RedundantImport\"/\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks for unused import statements."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        An import statement is unused if:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "          It\u0027s not referenced in the file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"UnusedImports\"/\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"AvoidStarImport\"/\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!--"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        NAMING CHECKS"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Validate abbreviations (consecutive capital letters) length in identifier name --\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"AbbreviationAsWordInName\"\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"ignoreFinal\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowedAbbreviationLength\" value\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"PackageName\"\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Validates identifiers for package names against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z]+(\\.[a-z][a-z0-9]{1,})*$\"/\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"TypeName\"\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Validates static, final fields against the expression \"^[A-Z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cmetadata name\u003d\"altname\" value\u003d\"TypeName\"/\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"ConstantName\"\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Validates non-private, static, final fields against the expression \"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\". --\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cmetadata name\u003d\"altname\" value\u003d\"ConstantName\"/\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"applyToPrivate\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cmessage key\u003d\"name.invalidPattern\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                     value\u003d\"Variable \u0027\u0027{0}\u0027\u0027 should be in ALL_CAPS (if it is a constant) or be private (otherwise).\"/\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"StaticVariableName\"\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Validates static, non-final fields against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cmetadata name\u003d\"altname\" value\u003d\"StaticVariableName\"/\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*_?$\"/\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"MemberName\"\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Validates non-static members against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cmetadata name\u003d\"altname\" value\u003d\"MemberName\"/\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*$\"/\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"MethodName\"\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Validates identifiers for method names against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cmetadata name\u003d\"altname\" value\u003d\"MethodName\"/\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*(_[a-z][a-zA-Z0-9]+){0,2}$\"/\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"ParameterName\"\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Validates identifiers for method parameters against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"LocalFinalVariableName\"\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Validates identifiers for local final variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"LocalVariableName\"\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Validates identifiers for local variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!--"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        LENGTH and CODING CHECKS"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks that array type declarations follow Java Style"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "          Java style: public static void main(String[] args) // Allowed"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "          C style:    public static void main(String args[]) // Not allowed"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"ArrayTypeStyle\"/\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks if a catch block is empty and does not contain any comments. --\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"EmptyCatchBlock\"/\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"LineLength\"\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks if a line is too long. --\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"max\" value\u003d\"120\"/\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"LeftCurly\"\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks for placement of the left curly brace (\u0027{\u0027). --\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"RightCurly\"\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            the same line. e.g., the following example is fine:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpre\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "              if {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                ..."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "              } else"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/pre\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- This next example is not fine:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpre\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "              if {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                ..."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "              }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "              else"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/pre\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks for braces around loop blocks --\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"NeedBraces\"\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!--"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            if (true) return 1; // Not allowed"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            if (true) { return 1; } // Not allowed"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            else if {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "              return 1; // else if should always be multi line"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            if (true)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "              return 1; // Not allowed"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowEmptyLoopBody\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks that each variable declaration is in its own statement and on its own line. --\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"MultipleVariableDeclarations\"/\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"OneStatementPerLine\"/\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks that long constants are defined with an upper ell.--\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"UpperEll\"/\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"FallThrough\"\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Warn about falling through to the next case statement.  Similar to"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            javac -Xlint:fallthrough, but the check is suppressed if a single-line comment"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            on the last non-blank line preceding the fallen-into case contains \u0027fall through\u0027 (or"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            some other variants which we don\u0027t publicized to promote consistency)."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"reliefPattern\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                      value\u003d\"fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on\"/\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"MissingSwitchDefault\"/\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks that Class variables should never be declared public. --\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"VisibilityModifier\"\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"protectedAllowed\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowPublicFinalFields\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!--"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        ORDER CHECKS"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks that the order of at-clauses follows the tagOrder default property value order."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "             @author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"AtclauseOrder\"/\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks if the Class and Interface declarations is organized in this order"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "          1. Class (static) variables. Order: public, protected, package level (no access modifier), private."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "          2. Instance variables. Order: public, protected, package level (no access modifier), private."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "          3. Constructors"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "          4. Methods"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"DeclarationOrder\"/\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"ModifierOrder\"\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "                 8.4.3.  The prescribed order is:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                 public, protected, private, abstract, static, final, transient, volatile,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "                 synchronized, native, strictfp"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "              --\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"OverloadMethodsDeclarationOrder\"/\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!--"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        WHITESPACE CHECKS"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks that comments are indented relative to their position in the code --\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"CommentsIndentation\"/\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"WhitespaceAround\"\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks that various tokens are surrounded by whitespace."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "                 This includes most binary operators and keywords followed"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "                 by regular or curly braces."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, BAND, BAND_ASSIGN, BOR,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        RCURLY, SL, SLIST, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN\"/\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Allow empty constructors e.g. MyClass() {} --\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowEmptyConstructors\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Allow empty methods e.g. void func() {} --\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowEmptyMethods\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Allow empty types e.g. class Foo {}, enum Foo {} --\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowEmptyTypes\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Allow empty loops e.g. for (int i \u003d 1; i \u003e 1; i++) {} --\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowEmptyLoops\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Allow empty lambdas e.g. () -\u003e {} --\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowEmptyLambdas\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"WhitespaceAfter\"\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks that commas, semicolons and typecasts are followed by whitespace. --\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, SEMI, TYPECAST\"/\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"NoWhitespaceAfter\"\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks that there is no whitespace after various unary operators. Linebreaks are allowed. --\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        UNARY_PLUS\"/\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- No trailing whitespace --\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"Regexp\"\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"format\" value\u003d\"[ \\t]+$\"/\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"illegalPattern\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"message\" value\u003d\"Trailing whitespace\"/\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"OperatorWrap\"\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks that the non-assignment type operator is at the next line in a line wrap."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "                 This includes \"?\", \":\", \"\u003d\u003d\", \"!\u003d\", \"/\", \"+\", \"-\", \"*\", \"%\", \"\u003e\u003e\", \"\u003e\u003e\u003e\","
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "                 \"\u003e\u003d\", \"\u003e\", \"\u003c\u003c\", \"\u003c\u003d\", \"\u003c\", \"^\", \"|\", \"||\", \"\u0026\", \"\u0026\u0026\", \"instanceof\","
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "                 \"\u0026\" when used in a generic upper or lower bounds constraints,"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "                   e.g. \u003cT extends Foo \u0026 Bar\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "                 \"::\" when used as a reference to a method or constructor without arguments."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "                   e.g. String::compareToIgnoreCase"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"QUESTION, COLON, EQUAL, NOT_EQUAL, DIV, PLUS, MINUS, STAR, MOD, SR, BSR,"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        GE, GT, SL, LE, LT, BXOR, BOR, LOR, BAND, LAND, LITERAL_INSTANCEOF, TYPE_EXTENSION_AND, METHOD_REF\"/\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"OperatorWrap\"\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks that the assignment type operator is at the previous end of line in a line wrap."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "                 This includes \"\u003d\", \"/\u003d\", \"+\u003d\", \"-\u003d\", \"*\u003d\", \"%\u003d\", \"\u003e\u003e\u003d\", \"\u003e\u003e\u003e\u003d\", \"\u003c\u003c\u003d\", \"^\u003d\", \"\u0026\u003d\"."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, DIV_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, STAR_ASSIGN, MOD_ASSIGN,"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        SR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, BXOR_ASSIGN, BOR_ASSIGN, BAND_ASSIGN\"/\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks that the \".\", \"@\" is at the next line in a line wrap. --\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"DOT, AT\"/\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks that the \",\", \"]\", \"[\", \"...\", \";\", \"(\" is at the previous end of line in a line wrap. --\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, RBRACK, ARRAY_DECLARATOR, ELLIPSIS, SEMI, LPAREN\"/\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"Indentation\"\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"caseIndent\" value\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"NoWhitespaceBefore\"\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks that there is no whitespace before various unary operators. Linebreaks are allowed. --\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"SEMI, DOT, POST_DEC, POST_INC\"/\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"ParenPad\"\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks that there is no whitespace before close parenthesis or after open parenthesis. --\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks that non-whitespace characters are separated by no more than one whitespace character."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "             a \u003d 1; // Allowed"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "             a  \u003d 1; // Not allowed (more than one space before \u003d)"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"SingleSpaceSeparator\"\u003e"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Validate whitespace surrounding comments as well."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "                 a \u003d 1; // Allowed (single space before start of comment)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "                 a \u003d 1; /* Allowed (single space before start of comment) */"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "                 /* Allowed (single space after end of comment) */ a \u003d 1;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "                 a \u003d 1;  // Not allowed (more than one space before start of comment)"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "                 a \u003d 1;  /* Not allowed (more than one space before start of comment) */"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "                 /* Not allowed (more than one space after end of comment) */  a \u003d 1;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "                 This doesn\u0027t validate whitespace within comments so a comment /* like  this */ is allowed."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"validateComments\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!--"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        JAVADOC CHECKS"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks that every class, enumeration and interface have a header comment. --\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"JavadocType\"\u003e"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks that every public method (excluding getters, setters and constructors) has a header comment. --\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"JavadocMethod\"\u003e"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks public methods that have more than 1 line of code."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "              Single line of code methods are often due to refactor for readability."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"minLineCount\" value\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            \u003cproperty name\u003d\"allowedAnnotations\""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                      value\u003d\"Override, Test, Before, BeforeClass, After, AfterClass, Subscribe\"/\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"scope\" value\u003d\"public\"/\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowUndeclaredRTE\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowThrowsTagsForSubclasses\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingThrowsTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*)\"/\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c!-- Checks that every non-trivial private method (excluding getters, setters and constructors) has a header comment. --\u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cmodule name\u003d\"JavadocMethod\"\u003e"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Checks private methods that have more than 3 lines of code."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "              We define methods that have more than 3 lines of code as non-trivial."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "            --\u003e"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"minLineCount\" value\u003d\"3\"/\u003e"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            \u003cproperty name\u003d\"allowedAnnotations\""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                      value\u003d\"Override, Test, Before, BeforeClass, After, AfterClass, Subscribe\"/\u003e"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"scope\" value\u003d\"private\"/\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowUndeclaredRTE\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowThrowsTagsForSubclasses\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingThrowsTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*)\"/\u003e"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/module\u003e"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/module\u003e"
      }
    ],
    "authorContributionMap": {
      "robincyu": 4,
      "-": 421
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robincyu"
        },
        "content": "_Acquizition_ is developed by the T12-2 team.  +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "\u003d\u003d\u003d Robin Christopher Cham Yu"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "image::robincyu.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "{empty}[http://github.com/robincyu[github]] [\u003c\u003crobincyu#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "Responsibilities: Scheduling + Tracking"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "\u003d\u003d\u003d Luca Triglia"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "image::lucatriglia.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "{empty}[http://github.com/lucatriglia[github]] [\u003c\u003clucatriglia#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "Responsibilities: Documentation"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "\u003d\u003d\u003d Sergio Vieri"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "image::sergiovieri.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "{empty}[http://github.com/sergiovieri[github]] [\u003c\u003csergiovieri#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "Responsibilities: Integration"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "\u003d\u003d\u003d Kwee Lung Sin"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "image::lungsin.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "{empty}[http://github.com/lungsin[github]] [\u003c\u003clungsin#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "Responsibilities: Testing + Code Quality"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "lucatriglia": 16,
      "robincyu": 1,
      "-": 30
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/cs2103-ay1819s2-t12-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "* *Email us* : You can also reach us at `e0136989 [at] u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "lucatriglia": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lungsin"
        },
        "content": "\u003d Acquizition - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lungsin"
        },
        "content": ":repoURL: https://github.com/cs2103-ay1819s2-t12-2/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lungsin"
        },
        "content": "By: `Team T12-2`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "image::SDforDeleteCard.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "// tag::design-ui[]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `FlashcardListPanel`, `StatusBarFooter`, `CardViewPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* Listens for changes to the quiz mode status, and updates the UI accordingly."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "// end::design-ui[]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ".  `Logic` uses the `CardCollectionParser` class to parse the user command."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a flashcard)."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "image::DeleteFlashcardSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* stores the Card Collection data."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cFlashcard\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Card Collection`, which `Flashcard` can reference. This would allow `Card Collection` to only require one `Tag` object per unique `Tag`, instead of each `Flashcard` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* can save the Card Collection data in json format and read it back."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "Classes used by multiple components are in the `seedu.address.commons` package."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedCardCollection`."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lungsin"
        },
        "content": "It extends `CardCollection` with an undo/redo history, stored internally as a `cardCollectionStateList`, `commandHistory` and `currentStatePointer`."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* VersionedCardCollection#commit(String commandText)` -- Saves the current card collection state in its history, with `commandText` be the command that change the state."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* `VersionedCardCollection#undo()` -- Restores the previous card collection state from its history and return the string represent the command that is undone."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* `VersionedCardCollection#redo()` -- Restores a previously undone card collection state from its history and return the string represent the command that is redid."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitCardCollection()`, `Model#undoCardCollection()` and `Model#redoCardCollection()` respectively."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedCardCollection` will be initialized with the initial card collection state, the initial command history, and the `currentStatePointer` pointing to that single card collection state."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th flashcard in the card collection. The `delete` command calls `Model#commitCardCollection()`, causing the modified state of the card collection after the `delete 5` command executes to be saved in the `cardCollectionStateList`, String `delete` is added to the `commandHistory` and the `currentStatePointer` is shifted to the newly inserted card collection state."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Step 3. The user executes `add f/Hello ...` to add a new flashcard. The `add` command also calls `Model#commitCardCollection()`, causing another modified card collection state to be saved into the `cardCollectionStateList` and string `add` is added to `commandHistory`."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "If a command fails its execution, it will not call `Model#commitCardCollection()`, so the card collection state will not be saved into the `cardCollectionStateList`."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Step 4. The user now decides that adding the flashcard was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoCardCollection()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous card collection state, and restores the card collection to that state. Then, `Model#undoCardCollection()` returns the command that is undone."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial card collection state, then there are no previous card collection states to restore. The `undo` command uses `Model#canUndoCardCollection()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lungsin"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoCardCollection()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, restores the card collection to that state, and returns the redid command from command history."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "If the `currentStatePointer` is at index `cardCollectionStateList.size() - 1`, pointing to the latest card collection state, then there are no undone card collection states to restore. The `redo` command uses `Model#canRedoCardCollection()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the card collection, such as `list`, will usually not call `Model#commitCardCollection()`, `Model#undoCardCollection()` or `Model#redoCardCollection()`. Thus, the `cardCollectionStateList` and `commandHistory` remains unchanged."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitCardCollection()`. Since the `currentStatePointer` is not pointing at the end of the `cardCollectionStateList`, all card collection states and all command histories after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add f/Hello ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire card collection."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the flashcard being deleted)."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of card collection states."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedCardCollection`."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "// tag::quiz[]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003d\u003d\u003d Quiz feature"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Quiz"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "The current quiz mechanism is controlled by the `QuizCommand` class."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "When executed, `QuizCommand` will create a list of flashcards to be quizzed,"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "which is a sorted list of the current filtered flashcards. `QuizCommand` will then pass the sorted flashcards to `Model`,"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "in which they will be stored."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* When quiz first starts, `QuizCommand` will change the quiz state inside `Model`."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* `MainWindow` will detect this change, and replace the card collection panel on the left with a quiz panel."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* To show a card to the user, the quiz mode modifies the selected flashcard on the card collection model, just like how the `SelectCommand` works. The UI will then detect the change in the selected flashcard and will view the selected flashcard on the card view panel."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* The quiz command will quiz flashcards based on the current filtered list."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* The review mode of quiz sorts the cards based on a non-decreasing success rate of the flashcards, utilizing the `Statistics` class."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* If any two flashcards have the same success rate, they will be randomly shuffled."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* Meanwhile, the SRS mode only chooses flashcards that is already time to show to the user."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "The following sequence diagram shows how the quiz operation works:"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "image::QuizSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* As illustrated in the diagram above, `MainWindow` detects the change by listening on the observable quiz state mode inside `Model`."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* The `MainWindow` swaps the card collection list panel with the quiz panel by replacing the left panel placeholder with a new `UiPart` through `MainWindow#setLeftPanel`."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Show"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "The `ShowCommand` is handled similarly with the `QuizCommand`."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* Instead of `MainWindow`, `CardViewPanel` listens to the change in quiz state mode inside `Model`."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* The `CardViewPanel` creates a new `FlashcardCardView` with the correct state (with back face shown)."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* Then, the displayed flashcard will be replaced."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "Below is the sequence diagram of how the show operation works:"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "image::ShowSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Good/Bad"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "The feedback on the quiz from the user is handled by a separate command (`GoodCommand` and `BadCommand`),"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "which then updates the card\u0027s statistics based on how well the user does."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* It does not commit the changes of the flashcards until the quiz mode has ended."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* After storing the changes, the command will then show the next card to be quizzed, if there are any, or execute an `ExitCommand` otherwise."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* After `ExitCommand` is executed, the changes will be committed and saved to storage."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "The following sequence diagram shows how the `GoodCommand` works. The `BadCommand` is identical."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "image::GoodSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Exit"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "When exiting inside quiz mode, the `ExitCommand` will try to exit the quiz mode."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "Otherwise it will just exit the app normally."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* `ExitCommand` will set the quiz mode to `QuizState#NOT_QUIZ_MODE`."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* `MainWindow` will listen to this and update the left panel back to card collection list panel."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* Since the `GoodCommand` and `BadCommand` does not directly update the flashcards, `ExitCommand` needs to commit the changes."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* It will call `Model#commit()`, and this will set `cardCollectionModified` to true."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* After the command execution is finished, the `LogicManager` will call `Storage#saveCardCollection` to store the changes to file."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "Below is the sequence diagram when exiting from a quiz mode:"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "image::ExitQuizSequenceDiagram.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: The quiz GUI"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* **Alternative 1 (current choice):** Use the same window as the `MainWindow`."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "*** Easy to implement and can use the original command box for quiz feedback."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "*** Can reuse the card view panel from the main window to use for quiz mode."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "*** Need to be able to swap the `MainWindow` \u0027s components when the quiz starts in order to replace the card collection list view with the quiz panel."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* **Alternative 2:** Use a separate window for quiz mode."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "*** Quiz logic separate from `MainWindow`."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "*** Easily customizable and more flexible."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "*** Much easier to handle GUI, since we only need to spawn a new window and close it afterwards."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "*** Requires a separate command box for the quiz mode window."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "*** May need to be able to hide the main window so that users cannot see the card collection list."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "// end::quiz[]"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "lungsin"
        },
        "content": "//tag::srs[]"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "lungsin"
        },
        "content": "\u003d\u003d\u003d Spaced Repetition System (SRS) Feature"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "lungsin"
        },
        "content": "SRS is an extension for quiz mode. The idea of SRS is for the app to keep track of when each flashcard can be tested. It allows the user to learn the flashcards effectively by showing more \"hard to remember\" flashcards more often."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "lungsin"
        },
        "content": "SRS is facilitated by `Proficiency` class. In this section, you will read the API from `Proficiency` class and the current implementation of SRS feature."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "lungsin"
        },
        "content": "\u003d\u003d\u003d\u003d Proficiency Class API"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "lungsin"
        },
        "content": "`Proficiency` is an immutable attribute of `Flashcard` class. It keeps track the time a particular flashcard can be reviewed and the proficiency level to indicate how well user remember the flashcard. It stores two main data:"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* `timeUntilReview` -- a `Calendar` object to indicate the time a flashcard can be reviewed."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* `proficiencyLevel`-- a non-negative integer to indicate the proficiency level of the user. Higher proficiency level means the user is more proficient."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Additionally, `Proficiency` implements the following APIs:"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* `Proficiency#isIncludedInCurrentQuiz()` -- a method to check whether the current flashcard can be included in the current Quiz with SRS mode."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* `Proficiency#quizAttempt(boolean isSuccess)` -- Returns a new `Proficiency` object that has the updated proficiency level and the next time a flashcard can be reviewed."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* `Proficiency#getQuizSrsStatus()` -- Returns a string indicating when the flashcard can be reviewed."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "lungsin"
        },
        "content": "These operations are exposed in the higher level `Flashcard` API:"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "lungsin"
        },
        "content": " * `Flashcard#isIncludedInCurrentQuiz()`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "lungsin"
        },
        "content": " * `Flashcard#quizAttempt(boolean isSuccess, boolean isQuizSrs)`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "lungsin"
        },
        "content": " * `Flashcard#getQuizSrsStatus()`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "lungsin"
        },
        "content": "The way `Proficiency` updates is inspired by the Leitner System. Whenever a user successfully guesses a flashcard, the `proficiencyLevel` of that card is incremented by one and the current flashcard can only be reviewed after `proficiencyLevel` days in the future. For example, if the current flashcard\u0027s proficiency level is 3, and the user is successfully guessing this flashcard, the proficiency level will be updated to 4 and the card can only be reviewed after 4 days from now. If a user fails to guess the flashcard, the proficiency level will be dropped to zero and the card can be reviewed immediately."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "lungsin"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "lungsin"
        },
        "content": "The notable difference between SRS and the vanilla quiz is how the app chooses the flashcards for the quiz and how the app updates the data of each flashcards."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* when SRS mode is started, `QuizCommand` creates a list of flashcards to be quizzed; it consists of the current filtered flashcards that is filtered based on the card that can be included in the current quiz."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* Next, `QuizCommand` will then pass the filtered list to `Model`, in which they will be stored. It also change the quiz state in the model and tells the model that the current quiz mode is SRS mode."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* After the quiz session is done, `ExitCommand` is executed and it will check whether the quiz mode is SRS mode via `Model#getIsQuizSrs()`. If the mode is SRS, both proficiency and statistics of the flashcards will be updated, otherwise only the statistics of the flashcards are updated."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "lungsin"
        },
        "content": "The following is the sequence diagram illustrating when the quiz srs starts and ends."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "lungsin"
        },
        "content": "image::QuizStartSRSSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "lungsin"
        },
        "content": "// end::srs[]"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "robincyu"
        },
        "content": "// tag::imagesupport[]"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d\u003d\u003d Image Support"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "robincyu"
        },
        "content": "All images must first be _imported_ into _Acquizition_ through the use of the `image` command. This command"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "robincyu"
        },
        "content": "makes a copy of an image into _Acquizition_\u0027s local `image/` directory, and works as the following sequence"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "robincyu"
        },
        "content": "diagram shows:"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "robincyu"
        },
        "content": "image::ImageSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Note that `image` does not go through VersionedCardCollection, as it does not affect any of the flashcards."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "robincyu"
        },
        "content": "It affects only a different file directory made specifically for the purpose of storing images. As a consequence,"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "robincyu"
        },
        "content": "`image` is not an undoable command."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Once an image has been imported, it can then be directly referenced in the `add` or `edit` commands by using the"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "robincyu"
        },
        "content": "original file name. (For example, if one imported the image `C:\\Users\\Robin\\Desktop\\everest.jpg`, then it should be"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "robincyu"
        },
        "content": "referred to in the future as `everest.jpg`.) _Acquizition_ will simply check to see whether that image really exists in the `images/`"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "robincyu"
        },
        "content": "folder."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Each flashcard has an ImagePath, which is essentially a wrapper for an `Optional\u003cString\u003e`, but for convenience\u0027 sake also contains"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "robincyu"
        },
        "content": "many file-related functions. This allows us to abstract away details of file handling and properly use SLAP."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Altogether, the following shows the activity diagram for an end-user who wants to add a flashcard, considering all possible"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "robincyu"
        },
        "content": "fields that could be added:"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "robincyu"
        },
        "content": "image::AddFlashcardActivityDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Image Storage"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* **Alternative 1 (current choice):** Make a copy of the image from the user\u0027s directory to _Acquizition_\u0027s working"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "robincyu"
        },
        "content": "directory when adding images."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "robincyu"
        },
        "content": "** Pros: Works even when the images in the user\u0027s directory are later deleted or moved."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "robincyu"
        },
        "content": "** Cons: Requires more memory and can result in a lot of redundant images, and requires manually ensuring that no naming"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "robincyu"
        },
        "content": "conflicts occurs on the working directory."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* **Alternative 2:** Link to the absolute path in the user\u0027s directory when adding images."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "robincyu"
        },
        "content": "** Pros: Simpler to implement."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "robincyu"
        },
        "content": "** Cons: Breaks when the images in the user\u0027s directory are later deleted or moved."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Image Storage Version Control"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* **Alternative 1 (current choice):** Simply do not allow undo and redo of inserted images."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "robincyu"
        },
        "content": "** Pros: Simpler to implement."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "robincyu"
        },
        "content": "** Cons: May be slightly unintuitive."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* **Alternative 2:** Make a version-controlled version of the images, similar to VersionedCardCollection,"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "robincyu"
        },
        "content": "in order to make undo and redo possible."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "robincyu"
        },
        "content": "** Pros: More intuitive behavior."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "robincyu"
        },
        "content": "** Cons: Very complicated to implement, and may not be worth the effort. In the end, users can always"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "robincyu"
        },
        "content": "remove flashcards directly by deleting images from the `images/` folder."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "robincyu"
        },
        "content": "// end::imagesupport[]"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "// tag::findfeature[]"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "\u003d\u003d\u003d Find Feature"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "The find command allows users to find and list a specific set of flashcards. It is"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "implemented under the Logic component which in turn calls upon the Model component to retrieve"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "the flashcards a user wishes to find."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "Users can filter the results based on several attributes of a flashcard including front face text, back face text,"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "lungsin"
        },
        "content": "tags and success rate. Similar to the Add command, the input is expected to have predefined prefixes (`f/`, `b/`, `t/`, `s/`)"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "to specify the filter categories; followed by keywords on which a match is expected."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "The implementation as well as class interactions can be further explained with the"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "following sequence diagram:"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "image::FindCommandSequenceDiagram1.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "The `FindCommandParser` class takes the input string specified by the user and tokenizes it based on the prefixes to create"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "lungsin"
        },
        "content": "a list of keywords associated with each of prefix. Unlike other prefixes, the `s/` prefix (which specifies the success rate range"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "which cards should be within), will not take a keyword as input. Instead, the range takes two doubles: lower bound and upper bound."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "After being parsed, these keyword lists, as well as the success rate range, are passed to construct a new `FlashcardPredicate` object which is"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "then used to define the `FindCommand`. The execution of the `FindCommand` calls upon the `Model` object to update the"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "filtered flashcard list based on the predicate defined. This is done through the use of the test method in the predicate classes"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "which evaluate matches between the keywords and a specific attribute of the flashcard. A flashcard will be selected if it is within"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "the success rate range and has matching keyword(s) in at least one of the three categories: front face text, back face text and tags."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "The logic of evaluation can be seen from the following code snippet:"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "----"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "return ((frontFacePredicate.test(flashcard)"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        || backFacePredicate.test(flashcard)"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        || tagPredicate.test(flashcard))"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        \u0026\u0026 (flashcard.getStatistics().getSuccessRate() * 100 \u003e\u003d lowerBound"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        \u0026\u0026 flashcard.getStatistics().getSuccessRate() * 100 \u003c\u003d upperBound));"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "----"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: The evaluation of keyword matches"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "* **Alternative 1 (current choice):** has matching keyword(s) in at least one of the three categories: front face text,"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "back face text and tags."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "** Pros: Able to show cards in multiple categories when the input has multiple tags. Users will get the set of cards as long as"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "they correctly remember a keyword in either the front face text, back face text or the tags of flashcards."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "** Cons: Cannot narrow down to choose the intersection of all filters."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "* **Alternative 2:** has matching keyword(s) in all specified categories."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "** Pros: Able to show a very specific set of flashcards"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "** Cons: May not be able to find the wanted set of flashcards when some keywords are remembered wrongly."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "// end::findfeature[]"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "lungsin"
        },
        "content": "// tag::statistics[]"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "lungsin"
        },
        "content": "\u003d\u003d\u003d Statistics feature"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "lungsin"
        },
        "content": "The statistics command allows the user to filter his / her flashcards and calculate the success rate of the filtered flashcards based on the past attempts in quiz mode. In this section, you will read about `Statistics` class API followed by the current implementation of the `StatsCommand`."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "lungsin"
        },
        "content": "\u003d\u003d\u003d\u003d Statistics Class"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "lungsin"
        },
        "content": "`Statistics` acts as an immutable container to store the data for calculating the success percentages from quiz mode. Each Flashcard object has exactly one `Statistics` attribute. `Statistics` stores two main data:"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* `successAttempt` -- the number of success attempt in quiz mode."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* `attemptNumber`  -- the total number of attempt in quiz mode."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Additionally, `Statistics` implements the following APIs:"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* `Statistics#getSuccessRate()` -- Return the success rate which is `successAttempt` divided by `attemptNumber`."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* `Statistics#quizAttempt(bool isSuccess)` -- Returns a new statistics object that has the updated statistics based on the attempt from the quiz mode."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* `Statistics#merge(Statistics other)` -- Return merged statistics of two given statistics, generally to be used to calculate the success rate from a bunch of flashcards."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "lungsin"
        },
        "content": "These operations (except the merge operation) are exposed in the higher level `Flashcard` API:"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "lungsin"
        },
        "content": " * `Flashcard#isIncludedInCurrentQuiz()`"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "lungsin"
        },
        "content": " * `Flashcard#quizAttempt(boolean isSuccess, boolean isQuizSrs)`"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "lungsin"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Stats command is implemented under the `Logic` component which will calls the `Model` component to retrieve the flashcards the user wishes, followed by the calculation of the statistics by aggregating the statistics from the retrieved flashcards."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Users can filter the results based on several attributes of a flashcard including front face text, back face text, tags and success rate. Similar to the Add command, the input is expected to have predefined prefixes (`f/`, `b/`, `t/`, `s/`) to specify the filter categories; followed by keywords on which a match is expected."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "lungsin"
        },
        "content": "The implementation can be further explained with the aid of the following sequence diagram:"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "lungsin"
        },
        "content": "image::StatsCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "lungsin"
        },
        "content": "The `StatsCommandParser` parses the input arguments in the same manner as `FindCommandParser`. `StatsCommandParser` passes the input string to `ParserUtil#filterByKeyword`, tokenize it and returns `FlashcardPredicate` for constructing `StatsCommand` object."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "lungsin"
        },
        "content": "During the execution, `StatsCommand` updates the filtered flashcard list based on the predicate defined earlier. Then, all statistics from the filtered flashcards are fetched and aggregated by using the `Statistics#merge` API. Lastly, the success rate of the cumulative statistics is returned and is printed for the user."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "lungsin"
        },
        "content": "When a user queries for statistics by using command `stats`, `StatsCommand` is the one to calculate the statistics. +"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Currently, `StatsCommand` only supports an overall success rate from all user\u0027s flashcards. It will ask `Model` to +"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "robincyu"
        },
        "content": "return all of the flashcards and then merge each `Statistics` from each flashcard to return an overall cumulative +"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "lungsin"
        },
        "content": "`Statistics`."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "lungsin"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "lungsin"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How statistics executes"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* **Alternative 1 (current choice):** Each individual `Flashcard` has exactly one `Statistics` attribute."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "lungsin"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "lungsin"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* **Alternative 2:** Flashcards are grouped by Tag, each of these groups store one overall `Statistics` attribute."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "lungsin"
        },
        "content": "** Pros: Will use less memory."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "lungsin"
        },
        "content": "** Cons: User has less flexibility in term of querying the statistics (User cannot know the statistics of a certain flashcard)"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "lungsin"
        },
        "content": "// end::statistics[]"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "// tag::share_import[]"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "\u003d\u003d\u003d  Share \u0026 Import feature"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation: Share"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "the share command is implemented under the Logic component and allows users to share the collection of flashcards currently being displayed."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "This is done by saving information of the cards to a text file; thereafter allowing users to manually distribute the"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "file to others."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "The information which is saved by this command includes: front face text, back face text and"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "tags of each flashcard."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "The share command takes `DIRECTORY_PATH` as the only argument, which specifies where the file should be saved."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "The user\u0027s input is parsed by the `ShareCommandParser` class to make sure that the path specified exists and that it is"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "indeed a directory. The current implementation of the share command does not allow users to specify what"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "the file should be named. Instead, all files created by the command will be saved as _flashcards.txt_."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "Since the share command only shares flashcards currently being displayed, it will often be used in"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "conjunction with the find command to update the model component before the share command is invoked by the user."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "For example, if a user wants to share only chinese cards, the user will first enter `find t/chinese` followed by"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "`share DIRECTORY_PATH`."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "The structure of the text file created by the command can be explained with the aid of the following screenshot:"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "image::ShareCommandTextFile.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "As shown form the screenshot, each line holds information for a single flashcard. The information is stored in the form"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "of add command arguments to ultimately simplify the import process _(see import feature)_."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "It is important to note that the current implementation of the share command does not support the sharing of images."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "This means that a flashcard containing an image will lose its image once shared as only the front face text, back face text"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "and tags are saved to the text file. However, sharing a card containing an image will not result in any error"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "or exception being thrown. Furthermore, the statistics of each flashcard are not shared as this would not make practical sense."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation: Import"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "The import command is implemented under the logic component and allows users to add a collection of flashcards"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "from a text file to their existing collection."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "The command takes `FILE_PATH` as the only argument which specifies the location of the file containing the cards to be imported."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "The user\u0027s input is parsed by the `ImportCommandParser` class to make sure that the file specified exists and that it is"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "a text file."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "The file used by the import command should be strictly limited to the file generated by the share command"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "and should not be altered. Altering the file in any way may effect the ability of the import command to read"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "in the cards correctly."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "The implementation of the import command can be better visualised with the aid of the following sequence diagram:"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "image::ImportCommandSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "As shown from the sequence diagram, the `ImportCommand` class will read each line of the text file and call the `AddCommandParser` class to verify"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "the validity of the flashcard to be added. Once verified, the `execute` method of the `AddCommand` class will be"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "invoked to add the flashcard to the existing collection."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "The import command will also keep track"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "of how many flashcards were successfully added in order to provide feedback to the user once the execution of"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "the command terminates."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to validate flashcards"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "* **Alternative 1 (current choice):** Validate flashcards at the Logic level using the `addCommandParser` class."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "** Pros: Keeps the command contained at the Logic level of the project and is easier to implement."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "** Cons: Increases dependency between the import command classes and the add command classes."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "* **Alternative 2:** Validate flashcards at file level and append new flashcard data directly to the storage file"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "** Pros: Reduce dependency between classes, meaning that the import command is able to function without the add command."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "robincyu"
        },
        "content": "** Cons: Harder to implement and bypasses several project components to directly interact with the storage component. This does not follow the overall"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "         architectural design of the project."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "// end::share_import[]"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "A project often depends on third-party libraries. For example, Card Collection depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all flashcards in the list."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/CardCollectionParser.java[`CardCollectionParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/CardCollectionParser.java[`CardCollectionParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "** See this https://github.com/se-edu/cardcollection-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the card collection, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the card collection."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/CardCollection.java[`CardCollection`] API need to be updated."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/CardCollection.java[`CardCollection`] and link:{repoURL}/src/main/java/seedu/address/model/flashcard/Flashcard.java[`Flashcard`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/CardCollection.java[`CardCollection`] allows you to update a flashcard, and link:{repoURL}/src/main/java/seedu/address/model/flashcard/Flashcard.java[`Flashcard`] allows you to update the tags."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/CardCollection.java[`CardCollection`]. Loop through each flashcard, and remove the `tag` from each flashcard."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `CardCollection#removeTag(Tag)`."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "** See this https://github.com/se-edu/cardcollection-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your card collection application. You realize that one of the users occasionally tries to delete non-existent tags from a flashcard, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last flashcard in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ". Use different colors for different tags inside flashcard cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/FlashcardCard.java[the `FlashcardCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "** You can modify the existing test methods for `FlashcardCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "** See this https://github.com/se-edu/cardcollection-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/CardCollectionSystemTest.java[`CardCollectionSystemTest#assertCommandBoxShowsDefaultStyle() and CardCollectionSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "** See this https://github.com/se-edu/cardcollection-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of flashcards in the card collection."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the card collection is updated."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of flashcards when the application just started."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleCardCollectionChangedEvent(CardCollectionChangedEvent)`] to update the number of flashcards whenever there are new changes to the cardcollection."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of flashcards status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/CardCollectionSystemTest.java[`CardCollectionSystemTest`] to also verify the new total number of flashcards status bar."
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "** See this https://github.com/se-edu/cardcollection-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the card collection to the cloud. However, the current implementation of the application constantly saves the card collection after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the card collection storage."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ". Add a new method `backupCardCollection(ReadOnlyCardCollection)`, so that the card collection can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/CardCollectionStorage.java[`CardCollectionStorage`] interface."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/JsonCardCollectionStorage.java[`JsonCardCollectionStorage`] class."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "** See this https://github.com/se-edu/cardcollection-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "*Scenario:* You are a software maintainer for `cardcollection`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular flashcard, by providing a flexible `remark` field for each flashcard, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "Edits the remark for a flashcard specified in the `INDEX`. +"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "Edits the remark for the first flashcard to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "Removes the remark for the first flashcard."
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/CardCollectionParser.java[`CardCollectionParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/CardCollectionParserTest.java[`CardCollectionParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/CardCollectionParser.java[`CardCollectionParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/CardCollectionParserTest.java[`CardCollectionParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `FlashcardCard`"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/FlashcardCard.java[`FlashcardCard`] s to display a remark for each flashcard later."
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/FlashcardListCard.fxml[`FlashcardListCard.fxml`]."
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/FlashcardCard.java[`FlashcardCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/FlashcardCardHandle.java[`FlashcardCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/flashcard/Flashcard.java[`Flashcard`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/flashcard/Face.java[`Face`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Flashcard` to support a `Remark` field"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/flashcard/Flashcard.java[`Flashcard`]."
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/flashcard/Flashcard.java[`Flashcard`]."
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the flashcard will be created without a remark)."
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `data/cardcollection.json` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `JsonAdaptedFlashcard` class"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "We now have `Remark` s for `Flashcard` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/JsonAdaptedFlashcard.java[`JsonAdaptedFlashcard`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new JSON field for `Remark`."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ". Fix `invalidAndValidFlashcardCardCollection.json`, `typicalFlashcardsCardCollection.json`, `validCardCollection.json` etc., such that the JSON tests will not fail due to a missing `remark` field."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `FlashcardBuilder`"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "Since `Flashcard` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/FlashcardBuilder.java[`FlashcardBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/flashcard/Flashcard.java[`Flashcard`]."
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/FlashcardBuilder.java[`FlashcardBuilder`]. This method will create a new `Remark` for the flashcard that it is currently building."
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ". Try and use the method on any sample `Flashcard` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalFlashcards.java[`TypicalFlashcards`]."
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `FlashcardCard`"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/FlashcardCard.java[`FlashcardCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/FlashcardCard.java[`FlashcardCard`]\u0027s constructor to bind the `Remark` field to the `Flashcard` \u0027s remark."
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysFlashcard(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a flashcard."
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "See this https://github.com/se-edu/cardcollection-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* has a need to manage a significant number of flashcards"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "*Value proposition*: manage flashcards faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "|`* * *` |user |add a new flashcard |"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "robincyu"
        },
        "content": "|`* * *` |user |add an image to a flashcard | remember concepts better"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "|`* * *` |user |delete a flashcard |remove cards that I no longer need"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "|`* * *` |user |edit a flashcard |update the information of a card without needing to delete and add a new one"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "|`* * *` |user |find a flashcard by keyword |locate flashcards without having to go through the entire list"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "|`* * *` |user |enter quiz mode |test my knowledge on a collection of flashcards"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "|`* * *` |user |view my statistics |analyse my understanding of specific flashcards"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "|`* * *` |sociable user |share a collection of flashcards |help other users"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "|`* * *` |sociable user |upload flashcards shared with me |view, edit and be quizzed on these cards locally"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "lungsin"
        },
        "content": "(For all use cases below, the *System* is the `Acquizition` and the *Actor* is"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "lungsin"
        },
        "content": "the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "lungsin"
        },
        "content": "\u003d\u003d\u003d Use case: Delete card"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "lungsin"
        },
        "content": "1.  User requests to list cards"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "lungsin"
        },
        "content": "2.  Acquizition shows a list of cards"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "lungsin"
        },
        "content": "3.  User requests to delete a specific card in the list"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "lungsin"
        },
        "content": "4.  Acquizition deletes the card"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "lungsin"
        },
        "content": "** 3a1. Acquizition shows an error message."
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "lungsin"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "lungsin"
        },
        "content": "\u003d\u003d\u003d Use case: Add card"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "lungsin"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "robincyu"
        },
        "content": "1.  User requests to add a card."
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "robincyu"
        },
        "content": "2.  User specifies the content the front side of the card."
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "robincyu"
        },
        "content": "3.  User specifies the content the back side of the card."
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "robincyu"
        },
        "content": "4.  User specifies the tag of the card."
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "robincyu"
        },
        "content": "5.  _Acquizition_ add the card to the list."
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "lungsin"
        },
        "content": "+"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "robincyu"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "robincyu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* 4a. User requests to add an image to a card."
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "robincyu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "robincyu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "robincyu"
        },
        "content": "** 4a1. User specifies the path to an image through the import command."
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "robincyu"
        },
        "content": "** 4a2. _Acquizition_ makes a copy of the image to its working directory."
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "robincyu"
        },
        "content": "** 4a3. User edits the flashcard and uses the name of the imported image."
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "robincyu"
        },
        "content": "** 4a4. The image is added to the flashcard."
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* 4a1a. The given path is invalid."
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "robincyu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "robincyu"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "robincyu"
        },
        "content": "** 4a1a1. _Acquizition_ shows an error message."
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "robincyu"
        },
        "content": "+"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Use case returns to step 4a1."
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "lungsin"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "lungsin"
        },
        "content": "\u003d\u003d\u003d Use case: Edit card"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "lungsin"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "lungsin"
        },
        "content": "1.  User requests to list cards"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "lungsin"
        },
        "content": "2.  Acquizition shows a list of cards"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "lungsin"
        },
        "content": "3.  User requests to edit a specific card in the list"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "robincyu"
        },
        "content": "4.  Acquizition edits the card"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "lungsin"
        },
        "content": "+"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "lungsin"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "lungsin"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "lungsin"
        },
        "content": "+"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "lungsin"
        },
        "content": "+"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "lungsin"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "lungsin"
        },
        "content": "** 3a1. Acquizition shows an error message."
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "lungsin"
        },
        "content": "+"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "lungsin"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "lungsin"
        },
        "content": "\u003d\u003d\u003d Use case: Enter quiz mode"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "lungsin"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "lungsin"
        },
        "content": "1.  User requests to enter quiz mode with some tags specified"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "lungsin"
        },
        "content": "2.  Acquizition shows a random card based on user\u0027s past performance"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "lungsin"
        },
        "content": "3.  User try to guess the content of the other side of the card"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "lungsin"
        },
        "content": "4.  User provide a feedback to Acquizition"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "lungsin"
        },
        "content": "5.  Acquizition updates the user\u0027s performance"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "lungsin"
        },
        "content": "+"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "lungsin"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "lungsin"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* 2a. There is no card with the tags specified"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "lungsin"
        },
        "content": "+"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "lungsin"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "lungsin"
        },
        "content": "** 2a1. Acquizition shows an error message."
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "lungsin"
        },
        "content": "+"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "lungsin"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "\u003d\u003d\u003d Use case: Find cards"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "// tag::findfeatureMSS[]"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "lungsin"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "1.  User requests to find a set of cards containing some keywords and within a specified success rate range"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "2.  _Acquizition_ shows a list of cards that contain any of the keywords and which also have a success rate within"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "the specified range"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "lungsin"
        },
        "content": "+"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "lungsin"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "// end::findfeatureMSS[]"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "\u003d\u003d\u003d Use case: Share a collection of cards"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "// tag::sharefeatureMSS[]"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "lungsin"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "1.  User requests to find a set of cards"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "2.  _Acquizition_ lists the cards"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "3.  User requests to share the currently listed cards"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "4.  User specifies the directory to save the cards"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "5.  _Acquizition_ creates a text file containing the information about the cards"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "lungsin"
        },
        "content": "+"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "lungsin"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "lungsin"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "* 3a. There are no cards currently listed"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "lungsin"
        },
        "content": "+"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "lungsin"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "** 3a1. _Acquizition_ shows an error message."
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "+"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "* 4a. The directory does not exist"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "+"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "** 4a1. _Acquizition_ shows an error message."
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "lungsin"
        },
        "content": "+"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "lungsin"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "* 5a. _Acquizition_ has no permission to add the file"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "lungsin"
        },
        "content": "+"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "lungsin"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "** 5a1. _Acquizition_ shows an error message."
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "lungsin"
        },
        "content": "+"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "lungsin"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "// end::sharefeatureMSS[]"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "\u003d\u003d\u003d Use case: Import a collection of cards"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "// tag::importfeatureMSS[]"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "lungsin"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "1.  User requests to import a set of flashcards"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "2.  User specifies the path of the text file"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "3.  _Acquizition_ adds the cards from the given file"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "lungsin"
        },
        "content": "+"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "lungsin"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "lungsin"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* 3a. Acquizition cannot read the file"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "lungsin"
        },
        "content": "+"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "lungsin"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "lungsin"
        },
        "content": "** 3a1. Acquizition shows an error message."
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "lungsin"
        },
        "content": "+"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* 3b. Acquizition doesn\u0027t recognize the file format"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "lungsin"
        },
        "content": "+"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "lungsin"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "lungsin"
        },
        "content": "** 3b1. Acquizition shows an error message."
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "lungsin"
        },
        "content": "+"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "* 3c. Some of the cards are corrupted or already exist locally"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "+"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "** 3c1. _Acquizition_ adds cards which do not already exist and which are not corrupted."
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "** 3c2. _Acquizition_ shows how many cards were successfully imported"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "+"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "// end::importfeatureMSS[]"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ".  Should be able to hold up to 1000 flashcards without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "[[private-flashcard-detail]] Private flashcard detail::"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "A flashcard detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "   Expected: Shows the GUI with a set of sample flashcards. The window size may not be optimum."
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003d\u003d\u003d Deleting a flashcard"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ". Deleting a flashcard while all flashcards are listed"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ".. Prerequisites: List all flashcards using the `list` command. Multiple flashcards in the list."
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "   Expected: First flashcard is deleted from the list. Details of the deleted flashcard shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "   Expected: No flashcard is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "lungsin": 229,
      "lucatriglia": 173,
      "robincyu": 80,
      "sergiovieri": 190,
      "-": 804
    }
  },
  {
    "path": "docs/LearningOutcomes.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Learning Outcomes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: LearningOutcomes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnumlevels: 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "After studying this code and completing the corresponding exercises, you should be able to,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use High-Level Designs `[LO-HighLevelDesign]`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the \u003c\u003cDeveloperGuide#architecture, Developer Guide\u003e\u003e describes the high-level design using an _Architecture Diagrams_ and high-level sequence diagrams."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/architecture/[se-edu/se-book: Design: Architecture]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/design/introduction/multilevelDesign/[se-edu/se-book: Design: Introduction: Multi-Level Design]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Event-Driven Programming `[LO-EventDriven]`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The JavaFX framework, which this code base uses for its UI, uses _events_ to communicate user input (such as mouse movement and button presses) to interested _event consumers_."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "The JavaFX event loop acts as an _event dispatcher_ to transmit events to event consumers."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* https://docs.oracle.com/javase/8/javafx/events-tutorial/events.htm[JavaFX: Handling Events]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/architecture/architecturalStyles/eventDriven/[se-edu/se-book: Design: Architecture: Architecture Styles: Event-Driven Architectural Style]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use API Design `[LO-ApiDesign]`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Note how components of AddressBook have well-defined APIs. For example, the API of the `Logic` component is given in the link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "image:LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/reuse/apis/[se-edu/se-book: Implementation: Reuse: APIs]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Assertions `[LO-Assertions]`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the AddressBook app uses Java ``assert``s to verify assumptions."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/assertions/[se-edu/se-book: Implementation: Error Handling: Assertions]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more assertions"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* Make sure assertions are enabled in your IDE by forcing an assertion failure (e.g. add `assert false;` somewhere in the code and run the code to ensure the runtime reports an assertion failure)."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Add more assertions to AddressBook as you see fit."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Logging `[LO-Logging]`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cDeveloperGuide#logging, how the AddressBook app uses Java\u0027s `java.util.log` package to do logging\u003e\u003e."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/logging/[se-edu/se-book: Implementation: Error Handling: Logging]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more logging"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Add more logging to AddressBook as you see fit."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Defensive Coding `[LO-DefensiveCoding]`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Note how AddressBook uses the `ReadOnly*` interfaces to prevent objects being modified by clients who are not supposed to modify them."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/defensiveProgramming/[se-edu/se-book: Implementation: Error Handling: Defensive Programming]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: identify more places for defensive coding"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "Analyze the AddressBook code/design to identify,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* where defensive coding is used"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "* where the code can be more defensive"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Build Automation `[LO-BuildAutomation]`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cUsingGradle#, how the AddressBook app uses Gradle to automate build tasks\u003e\u003e."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/integration/buildAutomation/what/[se-edu/se-book: Implementation: Integration: Build Automation: What]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use gradle to run tasks"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* Use gradle to do these tasks: Run all tests in headless mode, build the jar file."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use gradle to manage dependencies"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how the build script `build.gradle` file manages third party dependencies such as Jackson. Update that file to manage a third-party library dependency."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Continuous Integration `[LO-ContinuousIntegration]`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cUsingTravis#, how the AddressBook app uses Travis to perform Continuous Integration\u003e\u003e. (https://travis-ci.org/se-edu/addressbook-level4[image:https://travis-ci.org/se-edu/addressbook-level4.svg?branch\u003dmaster[Build Status]])"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/integration/buildAutomation/continuousIntegrationDeployment/[se-edu/se-book: Implementation: Integration: Build Automation: CI \u0026 CD]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use Travis in your own project"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* Set up Travis to perform CI on your own fork."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Code Coverage `[LO-CodeCoverage]`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Note how our CI server \u003c\u003cUsingTravis#, Travis uses Coveralls to report code coverage\u003e\u003e. (https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level4/badge.svg?branch\u003dmaster[Coverage Status]]) After \u003c\u003cUsingCoveralls#, setting up Coveralls\u003e\u003e for your project, you can visit Coveralls website to find details about the coverage of code pushed to your repo. https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[Here] is an example."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testCoverage/[se-edu/se-book: QA: Testing: Test Coverage]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use the IDE to measure coverage locally"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* Use the IDE to measure code coverage of your tests."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Test Case Design Heuristics `[LO-TestCaseDesignHeuristics]`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/src/test/java/seedu/address/commons/util/StringUtilTest.java[`StringUtilTest.java`]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "class gives some examples of how to use _Equivalence Partitions_, _Boundary Value Analysis_, and _Test Input Combination Heuristics_ to improve the efficiency and effectiveness of test cases testing the link:../src/main/java/seedu/address/commons/util/StringUtil.java[`StringUtil.java`] class."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testCaseDesign/[se-edu/se-book: QA: Test Case Design]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Apply Test Case Design Heuristics to other places"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "* Use the test case design heuristics mentioned above to improve test cases in other places."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Write Integration Tests `[LO-IntegrationTests]`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "Consider the link:{repoURL}/src/test/java/seedu/address/storage/StorageManagerTest.java[`StorageManagerTest.java`] class."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "* Test methods `prefsReadSave()` and `addressBookReadSave()` are integration tests. Note how they simply test if The `StorageManager` class is correctly wired to its dependencies."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "* Test method `handleAddressBookChangedEvent_exceptionThrown_eventRaised()` is a unit test because it uses _dependency injection_ to isolate the SUT `StorageManager#handleAddressBookChangedEvent(...)` from its dependencies."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Compare the above with link:{repoURL}/src/test/java/seedu/address/logic/LogicManagerTest.java[`LogicManagerTest`]. Some of the tests in that class (e.g. `execute_*` methods) are neither integration nor unit tests. They are _integration + unit_ tests because they not only check if the LogicManager is correctly wired to its dependencies, but also checks the working of its dependencies. For example, the following two lines test the `LogicManager` but also the `Parser`."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "@Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testingTypes/[se-edu/se-book: QA: Testing: Testing Types]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write unit and integration tests for the same method."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "* Write a unit test for a high-level method somewhere in the code base (or a new method you wrote)."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "* Write an integration test for the same method."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Write System Tests `[LO-SystemTesting]`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Note how tests below `src/test/java/systemtests` package (e.g link:{repoURL}/src/test/java/systemtests/AddCommandSystemTest.java[`AddCommandSystemTest.java`]) are system tests because they test the entire system end-to-end."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testingTypes/[se-edu/se-book: QA: Testing: Testing Types]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write more system tests"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* Write system tests for the new features you add."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Automate GUI Testing `[LO-AutomateGuiTesting]`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Note how this project uses TextFX library to automate GUI testing, including \u003c\u003cDeveloperGuide#headless-gui-testing, _headless_ GUI testing\u003e\u003e."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write more automated GUI tests"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* Covered by `[LO-SystemTesting]`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Design Patterns `[LO-DesignPatterns]`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some example design patterns used in the code base."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* *Singleton Pattern* : link:{repoURL}/src/main/java/seedu/address/commons/core/EventsCenter.java[`EventsCenter.java`] is Singleton class. Its single instance can be accessed using the `EventsCenter.getInstance()` method."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* *Facade Pattern* : link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager.java`] is not only shielding the internals of the Storage component from outsiders, it is mostly redirecting method calls to its internal components (i.e. minimal logic in the class itself). Therefore, `StorageManager` can be considered a Facade class."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "* *Command Pattern* : The link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command.java`] and its sub classes implement the Command Pattern."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* *Observer Pattern*: The code base uses JavaFX\u0027s https://docs.oracle.com/javase/8/javafx/api/javafx/beans/value/ObservableValue.html[`ObservableValue`] interface to allow objects to watch for changes in data."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "This interface is an implementation of the Observer pattern."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Objects that are interested in changes to an `ObservableValue` can register a listener via `ObservableValue#addListener(...)`."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "When the value represented by the `ObservableValue` changes, it will notify all registered listeners."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* *MVC Pattern* :"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "** The \u0027View\u0027 part of the application is mostly in the `.fxml` files in the `src/main/resources/view` folder."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "** `Model` component contains the \u0027Model\u0027. However, note that it is possible to view the `Logic` as the model because it hides the `Model` behind it and the view has to go through the `Logic` to access the `Model`."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "robincyu"
        },
        "content": "** Sub classes of link:{repoURL}/src/main/java/seedu/address/ui/UiPart.java[`UiPart`] (e.g. `FlashcardListPanel` ) act as \u0027Controllers\u0027, each controlling some part of the UI and communicating with the \u0027Model\u0027 (via the `Logic` component which sits between the \u0027Controller\u0027 and the \u0027Model\u0027)."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "* *Abstraction Occurrence Pattern* : Not currently used in the app."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designPatterns/[se-edu/se-book: Design: Design Patterns]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Discover other possible applications of the patterns"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* Find other possible applications of the patterns to improve the current design. e.g. where else in the design can you apply the Singleton pattern?"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "* Discuss pros and cons of applying the pattern in each of the situations you found in the previous step."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Find more applicable patterns"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* Learn other _Gang of Four_ Design patterns to see if they are applicable to the app."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Static Analysis `[LO-StaticAnalysis]`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "Note how this project uses the http://checkstyle.sourceforge.net/[CheckStyle] static analysis tool to confirm compliance with the coding standard."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/qualityAssurance/staticAnalysis/[se-edu/se-book: QA: Static Analysis]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use CheckStyle locally to check style compliance"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "* Install the CheckStyle plugin for your IDE and use it to check compliance of your code with our style rules (given in `/config/checkstyle/checkstyle.xml`)."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Do Code Reviews `[LO-CodeReview]`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how some PRs in this project have been reviewed by other developers. Here is an https://github.com/se-edu/addressbook-level4/pull/147[example]."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "* Also note how we have used https://www.codacy.com[Codacy] to do automate some part of the code review workload (https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]])"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Review a PR"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "* Review PRs created by team members."
      }
    ],
    "authorContributionMap": {
      "robincyu": 1,
      "-": 270
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lungsin"
        },
        "content": "\u003d Acquizition - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lungsin"
        },
        "content": ":repoURL: https://github.com/cs2103-ay1819s2-t12-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lungsin"
        },
        "content": "By: `Team T12-2`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Hey there! image:mascot.png[width\u003d\"120\"]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lungsin"
        },
        "content": "_Acquizition_ is a *desktop app* for easy language acquisition"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robincyu"
        },
        "content": "using flashcards. It analyzes your performance on recalling words"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robincyu"
        },
        "content": "or phrases, and, based on how well you do, decides which word or"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robincyu"
        },
        "content": "phrase to show you next to maximize learning."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Additionally, _Acquizition_ provides you with a user-friendly"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Graphical User Interface (GUI) to view your flashcards. It even"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": "supports images on the flashcards to make them more memorable. If"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robincyu"
        },
        "content": "you can type quickly, you will surely also enjoy the Command-Line"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Interface (CLI), streamlined for users like you."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robincyu"
        },
        "content": "This user guide begins with an in-depth documentation on the"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robincyu"
        },
        "content": "_Acquizition_ installation process. We structured the user guide"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robincyu"
        },
        "content": "to cater to your needs by explaining common use cases, rather than"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robincyu"
        },
        "content": "simply giving a list of commands and command formats."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Of course, you can still access the concise command summary at the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robincyu"
        },
        "content": "end of this document if you need it for reference."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Time is money, so jump to \u003c\u003cQuick Start\u003e\u003e to get started immediately."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robincyu"
        },
        "content": "We hope you enjoy _Acquizition_, and we wish you the best in your"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robincyu"
        },
        "content": "language studies!"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robincyu"
        },
        "content": ".  Make sure that you have **Java 9** or later installed on your computer."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    * On **Windows 10**, you can check your Java version by searching for _Apps \u0026 features_"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    and looking for Java. +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    image:java_version_windows.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    * On **Mac OS X 10.7 (Lion)** and above, you can check your Java version by searching"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    for _System Preferences_ and looking for the Java icon, then clicking on it. +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    image:java_version_mac.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    * This process may be different on other operating systems. Please search online for the relevant process."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robincyu"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robincyu"
        },
        "content": "**Note:** If you do not have Java installed, or your version is outdated, you can"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robincyu"
        },
        "content": "download the latest version by following the instructions https://www.java.com/en/download/[here]."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robincyu"
        },
        "content": ".  Download the latest `acquizition.zip` file link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robincyu"
        },
        "content": ".  Copy the downloaded `acquizition.zip` file to the directory of your choice, and extract the `acquizition.zip` file there."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robincyu"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robincyu"
        },
        "content": "**Tip:** Most operating systems should have built-in support for extracting `.zip` files. The process may differ between"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robincyu"
        },
        "content": "operating systems. Please search online for the relevant process."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robincyu"
        },
        "content": ".  Locate the `acquizition.jar` file and double-click it to start _Acquizition_. The app should appear on your"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robincyu"
        },
        "content": "screen in a few seconds."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robincyu"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "robincyu"
        },
        "content": "**Tip:** If you do not see anything after a few seconds, you may need to open _Acquizition_ through"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robincyu"
        },
        "content": "the command line. To do this, open the Command Prompt, Terminal or Linux Shell. Then, type `cd`,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robincyu"
        },
        "content": "followed by a space, followed by the directory of the folder containing `acquizition.jar`, and press kbd:[Enter]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Then, type `java -jar acquizition.jar`, and press kbd:[Enter]. The app should appear on your screen in a few seconds."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robincyu"
        },
        "content": ".  Try typing the following commands. Press kbd:[Enter] after typing a command to tell _Acquizition_"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "robincyu"
        },
        "content": "to execute it."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "robincyu"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "robincyu"
        },
        "content": "**Note:** Commands are _case-sensitive_: please type the commands _exactly_ as shown!"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* `add f/Kamusta b/Hello t/Tagalog` : Creates a flashcard with _Kamusta_ on the"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "robincyu"
        },
        "content": "front and _Hello_ on the back, with the tag _Tagalog_."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* `add f/Terima kasih b/Thank you t/BahasaIndonesia` : Creates a flashcard with"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "robincyu"
        },
        "content": "_Terima kasih_ on the front and _Thank you_ on the back, with the tag _Bahasa"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Indonesia_."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* `find b/Thank you` : lists all flashcards whose back face shows _Thank you_."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* `delete 2` : deletes the second flashcard in the collection."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* `exit` : exits the app."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "robincyu"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e and \u003c\u003cFeaturesQuiz\u003e\u003e for the detailed descriptions of"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "robincyu"
        },
        "content": "each command."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d\u003d Features (Collection)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* Words in `UPPER_CASE` should be substituted by you!"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    ** Example: In `add f/FRONT_TEXT b/BACK TEXT`, `FRONT_TEXT` and `BACK_TEXT`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    should be replaced to, say, `Kamusta` and `Hello`. So, you could write"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    `add f/Kamusta b/Hello`."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* Words in `[square brackets]` are optional."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    ** Example: In `add f/FRONT_TEXT b/BACK_TEXT [i/IMAGE_PATH]`, `IMAGE_PATH`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    is optional. You can replace it with, say, `add f/Babae b/Woman i/images/woman.png`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* Words with `...` after them can be specified multiple times."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    ** Example: In `add f/FRONT_TEXT b/BACK_TEXT [t/TAG]...`, `TAG` is optional"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    and you can specify multiple tags. You can replace it with, say, `add f/Lalaki b/Man"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    t/Tagalog t/Noun`."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* You can specify the parameters in any order; if the command specifies `f/FRONT_TEXT"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "robincyu"
        },
        "content": "b/BACK_TEXT`, you can also type them in the order `b/BACK_TEXT f/FRONT_TEXT`."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d\u003d\u003d How do I add a flashcard?"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "robincyu"
        },
        "content": "You can add a flashcard by using the `add` command."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Type `​add f/FRONT_TEXT b/BACK_TEXT [i/IMAGE_NAME] [t/TAG]​...​` into the command box and"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "robincyu"
        },
        "content": "press kbd:[Enter]."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "robincyu"
        },
        "content": "The `FRONT_TEXT` is the prompt you see, and the `BACK_TEXT` is what you need to recall."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "robincyu"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "robincyu"
        },
        "content": "**Tip:** A flashcard can optionally have a single image on its front face. You should specify this"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "robincyu"
        },
        "content": "image through the use of the `IMAGE_NAME`, which is the name of your image (with the extension)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "robincyu"
        },
        "content": "after importing it through the `image` command. +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "robincyu"
        },
        "content": "See \u003c\u003cAddCardImage\u003e\u003e for more details."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "robincyu"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "robincyu"
        },
        "content": "**Tip:** Although tags are not strictly required, we highly recommend using them, especially if you intend"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "robincyu"
        },
        "content": "to study multiple languages. Most of the other features in _Acquizition_ are compatible with"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "robincyu"
        },
        "content": "working with specific tags. For example, if you are learning both Chinese and Japanese and want to"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "robincyu"
        },
        "content": "study only the Chinese flashcards, you can do that if you have tagged all the Chinese flashcards with, for"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "robincyu"
        },
        "content": "example, `t/Chinese`."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "robincyu"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "robincyu"
        },
        "content": "**Note:** Tags must be alphanumeric; in particular, they cannot contain spaces. For example,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "robincyu"
        },
        "content": "`t/Bahasa Indonesia` is forbidden; use `t/BahasaIndonesia` instead."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "robincyu"
        },
        "content": "**Examples:**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* `add f/Kamusta b/Hello t/Tagalog` +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "robincyu"
        },
        "content": "This adds a flashcard whose front face is _Kamusta_, whose back face is _Hello_, and has the"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "robincyu"
        },
        "content": "tag _Tagalog_."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* `add f/さようなら b/Goodbye i/goodbye.jpg t/Japanese t/Greetings` +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "robincyu"
        },
        "content": "This adds a flashcard whose front face is _さようなら_, whose back face is _Goodbye_, has the image"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "robincyu"
        },
        "content": "`goodbye.jpg` on its front face, and has the tags _Japanese_ and _Greetings_."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "robincyu"
        },
        "content": "[[AddCardImage]]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d\u003d\u003d How do I add a flashcard with an image?"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "robincyu"
        },
        "content": "_Acquizition_ uses a local storage system to store your images. This means that to add an"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "robincyu"
        },
        "content": "image, you first need to _import_ it into _Acquizition_. This benefits you, because that means"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "robincyu"
        },
        "content": "once you add an image to _Acquizition_, you can move or even delete the original image and"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Acquizition will still have a copy of your image!"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "robincyu"
        },
        "content": "To import an image, you can use the `image` command."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Type `image IMAGE_PATH​` into the command box and press kbd:[Enter]."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "robincyu"
        },
        "content": "**Tip:** What is an `IMAGE_PATH`? It is the _absolute path_ to your image. For example, if you"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "robincyu"
        },
        "content": "have an image called `everest.jpg` on your Desktop, the `IMAGE_PATH` might be `C:\\Users\\Robin\\Desktop\\everest.jpg`. +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "robincyu"
        },
        "content": "On Windows, you can get the absolute path by right-clicking on the image, selecting _Properties_, and copying the"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "robincyu"
        },
        "content": "path under _Location:_. Then, append a backslash and the image filename (with the extension) to the end. +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "robincyu"
        },
        "content": "image:image_filepath.png[width\u003d\"790\"] +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "robincyu"
        },
        "content": "In the image above, we see that the path under _Location:_ is `C:\\Users\\Robin\\Desktop`. We append a backslash `\\`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "robincyu"
        },
        "content": "and the image filename `everest` with the extension `.jpg` to get the `IMAGE_PATH` which is"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "robincyu"
        },
        "content": "`C:\\Users\\Robin\\Desktop\\everest.jpg`. +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "robincyu"
        },
        "content": "This process may be different on other operating systems. Please search online for the relevant process."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "robincyu"
        },
        "content": "After importing an image into _Acquizition_, you can now directly refer to the imported image by the filename"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "robincyu"
        },
        "content": "(with the extension)."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Type `​add f/FRONT_TEXT b/BACK_TEXT i/IMAGE_NAME [t/TAG]​...​` into the command box and"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "robincyu"
        },
        "content": "press kbd:[Enter]. `IMAGE_NAME` is the filename of the image you just imported."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "robincyu"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* {blank}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "robincyu"
        },
        "content": ". `image C:\\Users\\Robin\\Desktop\\everest.jpg` +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "robincyu"
        },
        "content": "This imports the image located at `C:\\Users\\Robin\\Desktop` into _Acquizition_,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "robincyu"
        },
        "content": "as previously described."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "robincyu"
        },
        "content": ". `add f/珠峰 b/Mount Everest i/everest.jpg t/Chinese` +"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "robincyu"
        },
        "content": "This adds a flashcard whose front face is _珠峰_, whose back face is _Mount Everest_, has the"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "robincyu"
        },
        "content": "image `everest.jpg` (which we just imported) on its front face, and has the tag _Chinese_."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "robincyu"
        },
        "content": "[[DeleteCard]]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d\u003d\u003d How do I delete a flashcard?"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "robincyu"
        },
        "content": "You can delete a flashcard by using the `delete` command."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Type `delete INDEX` and press kbd:[Enter]."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Note that `INDEX` refers to the number of the card on the _currently-visible_ list. This is the list"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "robincyu"
        },
        "content": "you see on the left-side panel."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "robincyu"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* `delete 3` +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "robincyu"
        },
        "content": "This deletes the third flashcard."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d\u003d\u003d How do I delete all flashcards at once?"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "robincyu"
        },
        "content": "If, for whatever reason, you want to delete all the flashcards at once, you can do so using the `clear` command."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Type `clear` and press kbd:[Enter]."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "robincyu"
        },
        "content": "[[EditCard]]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d\u003d\u003d How do I edit a flashcard?"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "robincyu"
        },
        "content": "You can edit a flashcard by using the `edit` command."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Type `edit INDEX [f/FRONT_TEXT] [b/BACK_TEXT] [i/IMAGE_NAME] [t/TAG]​...​` into the command box and"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "robincyu"
        },
        "content": "press kbd:[Enter]."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Note that `INDEX` refers to the number of the card on the _currently-visible_ list. This is the list"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "robincyu"
        },
        "content": "you see on the left-side panel."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "robincyu"
        },
        "content": "You must specify at least one of `[f/FRONT_TEXT]`, `[b/BACK_TEXT]`, `[i/IMAGE_NAME]`, and `[t/TAG]​`,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "robincyu"
        },
        "content": "and you can specify more than one. The edit command will change _only_ the specified items, and leave"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "robincyu"
        },
        "content": "all the others unchanged."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "robincyu"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "robincyu"
        },
        "content": "**Note:** When specifying one or more `TAG`(s), _all existing tags_ will be removed. If you want to add a new tag,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "robincyu"
        },
        "content": "you must restate all the previous tags and add the new one."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "robincyu"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "robincyu"
        },
        "content": "**Note:** For more information about the `IMAGE_NAME`, see \u003c\u003cAddCardImage\u003e\u003e."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "robincyu"
        },
        "content": "**Examples:**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* `edit 3 b/Hello` +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "robincyu"
        },
        "content": "This changes the third card to have a back face _Hello_."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* `edit 2 t/Navajo` +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "robincyu"
        },
        "content": "This removes all the tags from the second card and adds the tag _Navajo_."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* `edit 1 f/麒麟 b/きりん i/kirin.png t/Japanese t/Kanji` +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "robincyu"
        },
        "content": "This changes the first card to have a front face _麒麟_, a back face _きりん_, the image `kirin.png`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "robincyu"
        },
        "content": "on its front face (we assume this has been previously imported), and the tags _Japanese_ and _Kanji_. +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Effectively, this changes the first card into a completely different card. +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Note that the back face need not be English."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d\u003d\u003d How do I import an image?"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "robincyu"
        },
        "content": "See \u003c\u003cAddCardImage\u003e\u003e."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d\u003d\u003d How do I insert an image to a flashcard?"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "robincyu"
        },
        "content": "To insert an image to an existing flashcard, use the `edit` command"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "robincyu"
        },
        "content": "and specify the `IMAGE_NAME`."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "robincyu"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "robincyu"
        },
        "content": "**Note:** You will need to _import_ the image into _Acquizition_ first. See \u003c\u003cAddCardImage\u003e\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "robincyu"
        },
        "content": "for an explanation of how this can be done."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d\u003d\u003d How do I remove an image from a flashcard?"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "robincyu"
        },
        "content": "To remove an image from a flashcard, use the `edit` command and specify an empty `IMAGE_NAME`."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Specifically, type `edit INDEX b/` into the command box and press kbd:[Enter]."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d\u003d\u003d How do I insert tags to a flashcard?"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "robincyu"
        },
        "content": "To insert tags into a flashcard, use the `edit` command and specify _all_ the"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "robincyu"
        },
        "content": "existing tags, followed by the tags you want to insert."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "robincyu"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "robincyu"
        },
        "content": "**Note:** For more information about the `edit` command, see \u003c\u003cEditCard\u003e\u003e."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d\u003d\u003d How do I remove tags from a flashcard?"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "robincyu"
        },
        "content": "To remove _all_ the tags from a flashcard, use the `edit` command and"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "robincyu"
        },
        "content": "specify an empty `TAG`."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Specifically, type `edit INDEX t/` into the command box and press kbd:[Enter]."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "robincyu"
        },
        "content": "To remove _only some_ of the tags from a flashcard, use the `edit` command and"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "robincyu"
        },
        "content": "specify the tags you want _to remain_."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "robincyu"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "robincyu"
        },
        "content": "**Note:** For more information about the `edit` command, see \u003c\u003cEditCard\u003e\u003e."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d\u003d\u003d How do I restore all the flashcards to the currently-visible list?"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "robincyu"
        },
        "content": "When using the `find` command, the currently-visible list of flashcards will"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "robincyu"
        },
        "content": "change to show you the results. This will also affect the indices you should use"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "robincyu"
        },
        "content": "when referring to the flashcards using the `edit` and `delete` commands."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "robincyu"
        },
        "content": "To restore the list of all flashcards, simply use the `list` command."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Type `list` and press kbd:[Enter]."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "robincyu"
        },
        "content": "[[UndoCommand]]"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d\u003d\u003d How do I undo the most recent command?"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "robincyu"
        },
        "content": "You can undo a command by using the `undo` command."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Type `undo` and press kbd:[Enter]."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "robincyu"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "robincyu"
        },
        "content": "**Note:** Not all commands can be undone. Only the following commands can be"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "robincyu"
        },
        "content": "undone: `add`, `clear`, `delete`, `edit`, `import`, `quiz`. +"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Undo will cause the most recent _undoable_ command to be undone."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* {blank}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "robincyu"
        },
        "content": ". `delete 1` +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "robincyu"
        },
        "content": "This deletes the first flashcard."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "robincyu"
        },
        "content": ". `list` +"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "robincyu"
        },
        "content": "This lists all the flashcards."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "robincyu"
        },
        "content": ". `undo` +"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "robincyu"
        },
        "content": "This will undo the most recent undoable command, which is `delete 1`. So, this will"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "robincyu"
        },
        "content": "restore the deleted flashcard back as the first flashcard."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* {blank}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "robincyu"
        },
        "content": ". `delete 2` +"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "robincyu"
        },
        "content": "This deletes the second flashcard."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "robincyu"
        },
        "content": ". `delete 1` +"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "robincyu"
        },
        "content": "This deletes the first flashcard."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "robincyu"
        },
        "content": ". `undo` +"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "robincyu"
        },
        "content": "This will undo the most recent undoable command, which is `delete 1`. So, this will"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "robincyu"
        },
        "content": "restore the deleted flashcard back as the first flashcard."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "robincyu"
        },
        "content": ". `undo` +"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "robincyu"
        },
        "content": "This will undo the most recent undoable command, which is `delete 2`. So, this will"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "robincyu"
        },
        "content": "restore the deleted flashcard back as the second flashcard."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d\u003d\u003d How do I redo the most recent undone command?"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "robincyu"
        },
        "content": "You can redo an undone command by using the `redo` command. +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Type `redo` and press kbd:[Enter]."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "robincyu"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "robincyu"
        },
        "content": "**Note:** The `redo` command only works if no new undoable command was made in between"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "robincyu"
        },
        "content": "the time the the last `undo` command was made and the `redo` command is called."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* {blank}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "robincyu"
        },
        "content": ". `delete 1` +"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "robincyu"
        },
        "content": "This deletes the first flashcard."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "robincyu"
        },
        "content": ". `undo` +"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "robincyu"
        },
        "content": "This will undo the most recent undoable command, which is `delete 1`. So, this will"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "robincyu"
        },
        "content": "restore the deleted flashcard back as the first flashcard."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "robincyu"
        },
        "content": ". `redo` +"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "robincyu"
        },
        "content": "This will redo the command the undo undid, which is `delete 1`. So, this will"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "robincyu"
        },
        "content": "delete the first flashcard again."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* {blank}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "robincyu"
        },
        "content": ". `delete 2` +"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "robincyu"
        },
        "content": "This deletes the second flashcard."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "robincyu"
        },
        "content": ". `delete 1` +"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "robincyu"
        },
        "content": "This deletes the first flashcard."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "robincyu"
        },
        "content": ". `undo` +"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "robincyu"
        },
        "content": "This will undo the most recent undoable command, which is `delete 1`. So, this will"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "robincyu"
        },
        "content": "restore the deleted flashcard back as the first flashcard."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "robincyu"
        },
        "content": ". `undo` +"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "robincyu"
        },
        "content": "This will undo the most recent undoable command, which is `delete 2`. So, this will"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "robincyu"
        },
        "content": "restore the deleted flashcard back as the second flashcard."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "robincyu"
        },
        "content": ". `redo` +"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "robincyu"
        },
        "content": "This will redo the command the undo undid, which is `delete 2`. So, this will"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "robincyu"
        },
        "content": "delete the second flashcard again."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "robincyu"
        },
        "content": ". `redo` +"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "robincyu"
        },
        "content": "This will redo the command the undo undid, which is `delete 1`. So, this will"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "robincyu"
        },
        "content": "delete the first flashcard again."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d\u003d\u003d How do I discard the results of the most recent quiz session?"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "robincyu"
        },
        "content": "The quiz command updates the statistics of the flashcards, and you may want to"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "robincyu"
        },
        "content": "void the results of the most recent quiz session and undo the updates to the cards\u0027"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "robincyu"
        },
        "content": "statistics."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "robincyu"
        },
        "content": "You can discard the results of the most recent quiz session by using the `undo`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "robincyu"
        },
        "content": "command right after a quiz session."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "robincyu"
        },
        "content": "**Note:** For more information about the `undo` command, see \u003c\u003cUndoCommand\u003e\u003e."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d\u003d\u003d How do I see the list of commands I have made?"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "robincyu"
        },
        "content": "You can see the list of previous commands by using the `history` command. +"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Type `history` and press kbd:[Enter]."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "robincyu"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "robincyu"
        },
        "content": "**Tip:** Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d\u003d\u003d How do I exit _Acquizition_?"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "robincyu"
        },
        "content": "All good things must come to an end!"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "robincyu"
        },
        "content": "To exit _Acquizition_, use the `exit` command."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Type `exit` and press kbd:[Enter]."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "robincyu"
        },
        "content": "**Note:** If you are in quiz mode, `exit` will exit quiz mode instead. +"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "robincyu"
        },
        "content": "To exit _Acquizition_, use the `exit` command twice: once to exit quiz mode,"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "robincyu"
        },
        "content": "then once to exit _Acquizition_."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "lungsin"
        },
        "content": "// tag::find[]"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "lungsin"
        },
        "content": "\u003d\u003d\u003d Finding flashcards by keyword(s): `find`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* `find t/Chinese t/Japanese` +"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "lungsin"
        },
        "content": "This will find and list all the flashcards that have the _Chinese_ or _Japanese_ tag."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* `find f/Hello b/Hello` +"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "lungsin"
        },
        "content": "This will find and list all the flashcards whose front or back text contains the word _Hello_."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "lungsin"
        },
        "content": "// end::find[]"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "lungsin"
        },
        "content": "// tag::stats[]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "lungsin"
        },
        "content": "\u003d\u003d\u003d What if I want to know how good I am in the quiz mode?"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "lungsin"
        },
        "content": "You can know your success rate in quiz mode by using `stats` command."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Type `stats [f/FRONT_TEXT]... [b/BACK_TEXT]... [t/TAG]​...​` into the command box and"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "lungsin"
        },
        "content": "press kbd:[Enter]."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "lungsin"
        },
        "content": "This command will display your success rate on a filtered list based on the front text, back text and tags."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "lungsin"
        },
        "content": "If you don\u0027t specify anything, your success rate over the flashcards in your current filtered flashcards list is displayed instead."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "lungsin"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "lungsin"
        },
        "content": "**Note:** You can use `find` followed by `stats` to show aggregate statistics for all the flashcards found"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "lungsin"
        },
        "content": "          and listed by the find command."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* `stats t/Chinese t/Japanese` +"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "lungsin"
        },
        "content": "This will show aggregate statistics for all flashcards that have the _Chinese_ or _Japanese_ tag."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* `find f/Kamusta` +"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "lungsin"
        },
        "content": "`stats` +"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "lungsin"
        },
        "content": "This will find and list all flashcards with _Kamusta_ in their front face then show aggregate"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "lungsin"
        },
        "content": "statistics for all those flashcards."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "lungsin"
        },
        "content": "// end::stats[]"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "lungsin"
        },
        "content": "// tag::select[]"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "lungsin"
        },
        "content": "\u003d\u003d\u003d What if I want to know how good I am for a particular card?"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "lungsin"
        },
        "content": "You can know your success rate for a particular card by using `select` command."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Type `select INDEX` into the command box and"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "lungsin"
        },
        "content": "press kbd:[Enter]."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "lungsin"
        },
        "content": "This command will select a flashcard and display it on the flashcard view on the right pane."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "lungsin"
        },
        "content": "You can see the statistics of the selected flashcard on the command result box."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Alternatively, you can select a flashcard by clicking it on the flashcard list panel."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "lungsin"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "lungsin"
        },
        "content": "**Note:** The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "lungsin"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "lungsin"
        },
        "content": "**Note:** The index must be a positive integer `1, 2, 3, …`"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "lungsin"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Selects the second flashcard in the list."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* `find t/chinese` +"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "lungsin"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Selects the first flashcard in the filtered list with chinese tag."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "lungsin"
        },
        "content": "The figure below illustrates the select functionality."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "lungsin"
        },
        "content": "image::Select-Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "lungsin"
        },
        "content": "\u003d\u003d\u003d What if I want to when can I review a particular card in the SRS mode?"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "lungsin"
        },
        "content": "You can know when to review by using `select` command."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Type `select INDEX` into the command box and"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "lungsin"
        },
        "content": "press kbd:[Enter]."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "lungsin"
        },
        "content": "This command will select a flashcard and display it on the flashcard view on the right pane."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "lungsin"
        },
        "content": "You can see the time left of the selected flashcard on the command result box."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Alternatively, you can select a flashcard by clicking it on the flashcard list panel."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "lungsin"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "lungsin"
        },
        "content": "**Note:** The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "lungsin"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "lungsin"
        },
        "content": "**Note:** The index must be a positive integer `1, 2, 3, …`"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "robincyu"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Selects the second flashcard in the list."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* `find t/chinese` +"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "robincyu"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Selects the first flashcard in the filtered list with chinese tag."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "lungsin"
        },
        "content": "The figure below illustrates the select functionality."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "lungsin"
        },
        "content": "image::Select-Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "lungsin"
        },
        "content": "// end::select[]"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "lungsin"
        },
        "content": "// tag::srs[]"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "lungsin"
        },
        "content": "\u003d\u003d\u003d I memorized some flashcards better than the other, how can I address this?"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "lungsin"
        },
        "content": "You can use our learning recommendation system. The system is called Spaced Repetition System or in short SRS. This system will schedule each flashcard a particular time to review. Additionally, based on your performance, SRS will adjust the frequency of the flashcards so that the \"more hard to memorize\" card will be shown more often."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Type `quiz srs` into the command box and"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "lungsin"
        },
        "content": "press kbd:[Enter]."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "lungsin"
        },
        "content": "This command will trigger the SRS mode in the quiz instead of the normal quiz mode. You can refer to the \u003c\u003cFeatures (Quiz)\u003e\u003e for more info about vanilla quiz mode."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "lungsin"
        },
        "content": "After you finished a quiz session, our app will update your proficiency in each flashcard and schedule the next time you can review the card in SRS."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "lungsin"
        },
        "content": "// end::srs[]"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "lungsin"
        },
        "content": "\u003d\u003d\u003d What if I want to bring up this document again?"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "lungsin"
        },
        "content": "You can bring up this document again using the `help` command."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Type `help` and press kbd:[Enter]."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "lungsin"
        },
        "content": "\u003d\u003d\u003d Finding flashcards by keyword(s): `find`"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Finds and lists all the flashcards whose front text, back text or collection tags"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "lungsin"
        },
        "content": "contain _any_ of the given keywords. +"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Format: ​`find [f/FRONT_FACE]... [b/BACK_FACE]... [t/TAG]...`"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* You must specify at least _one_ keyword."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* Multiple keywords can be specified for the front text, back text and tags by"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "lungsin"
        },
        "content": "specifying multiple prefixes. For example, `find f/Kamusta f/Terima kasih` finds"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "lungsin"
        },
        "content": "and lists _all_ the flashcards whose front face contains the word _Kamusta_ or _Terima_ or _kasih_. +"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Keywords are not case sensitive: `f/Kamusta` will match `kamusta`, `kAmUsTa` or `KAMUSTA`."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "lungsin"
        },
        "content": "** Multiple tags must specifically be specified with multiple prefixes. `t/Tagalog Japanese` is forbidden;"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "lungsin"
        },
        "content": "use `t/Tagalog t/Japanese` instead."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* `find t/Chinese t/Japanese` +"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "lungsin"
        },
        "content": "This will find and list all the flashcards that have the _Chinese_ or _Japanese_ tag."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* `find f/Hello b/Hello` +"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "lungsin"
        },
        "content": "This will find and list all the flashcards whose front or back text contains the word _Hello_."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "robincyu"
        },
        "content": "// tag::share[]"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d\u003d\u003d Exporting flashcards to a text file : `share`"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Creates a text file containing a collection of flashcards to be shared."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "Format: `share DIRECTORY_PATH`"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* This creates a text file called _flashcards.txt_ at the specified location."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* The text file created by the share command will be saved locally in the main application directory; you should share"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "robincyu"
        },
        "content": " this text file with your friends."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* Once your friend has a copy of the text file, he can import the flashcards using the `import` command"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* **Images will not be shared.**"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* `find t/Chinese` +"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "`share C:\\Users\\Alice\\Desktop` +"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "This will create a text file called _flashcards.txt_ at the specified location containing all the flashcards that"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "have the _Chinese_ tag."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* In the illustrated example below, one of the cards in the text file already existed locally. So only 6 out of"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "the 7 flashcards in the file successfully imported."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "image::Ui-preImport.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "image::Ui-postImport.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "robincyu"
        },
        "content": "// end::share[]"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "robincyu"
        },
        "content": "// tag::import[]"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d\u003d\u003d Importing flashcards from a text file : `import`"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Adds flashcards to your collection from a text file."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "Format: `import FILE_PATH`"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* This imports all the flashcards from a text file (produced by `share`) to your collection."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "robincyu"
        },
        "content": "** This does not replace your flashcard collection; it simply adds all the flashcards from the text file"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "robincyu"
        },
        "content": "one-by-one."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "robincyu"
        },
        "content": "** This command will also report the number of flashcards successfully imported."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* `import C:\\Users\\Luca\\Desktop\\cards.txt` +"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "robincyu"
        },
        "content": "This will import the flashcards from `cards.txt` to your collection."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "robincyu"
        },
        "content": "// end::import[]"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "// tag::quiz[]"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "robincyu"
        },
        "content": "[[FeaturesQuiz]]"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d\u003d Features (Quiz)"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d\u003d\u003d Entering quiz mode : `quiz`"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "image::Ui-quiz.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "Enters quiz mode. +"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "robincyu"
        },
        "content": "The quiz mode will use the cards from the filtered card collection list +"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "robincyu"
        },
        "content": "A flashcard will be shown to you one by one randomly based on accuracy of each flashcard. +"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "robincyu"
        },
        "content": "You can then self-verify using `good` and `bad` commands whether you accurately recall the back side of the flashcard."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "Format: `quiz`"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "****"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* Enters quiz mode with the flashcards on the filtered flashcard list panel."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* This will start a quiz session. The flashcard list panel on the left will change to a quiz panel."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* The quiz panel contains the number of flashcards remaining on the quiz, as well as the number of good and bad feedback received."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* The flashcard view panel on the right will display the quizzed flashcards one by one, with the back face of the flashcard hidden."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "****"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* `find t/chinese` +"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "robincyu"
        },
        "content": "`quiz` +"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "robincyu"
        },
        "content": "This will start a quiz mode with all flashcards with the chinese tag."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003d\u003d\u003d Showing back face of flashcard : `show`"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "Shows the back face of the flashcard being quizzed."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "Format: `show`"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "****"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* If the back face of the flashcard is already shown, this command will do nothing."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* Note that you can only use this command inside quiz mode."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "****"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d\u003d\u003d Giving feedback : `good` or `bad`"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "Gives user feedback on quiz mode."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "Format: `good` or `bad`"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* In order to give feedback of how well you do in the quiz mode, you can type in either `good` or `bad` for each flashcard in the quiz."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* After you type `good` or `bad`, Acquizition will record the feedback on the flashcard shown, as well as incrementing the number of good and bad feedback."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* Acquizition will then proceed to show the next flashcard to be quizzed. If there are no flashcards left, it will exit quiz mode."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* This command is usually, but not necessarily, used after the `show` command. That is, after you look at the back face of the flashcard, you can dictate how well you recall the back face of the flashcard."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* Note that you can only use this command inside quiz mode."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* `quiz` +"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "`good` +"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "robincyu"
        },
        "content": "This will increment the number of good feedback of the flashcard shown, thus, the success rate of this flashcard will increase. +"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Then, the next flashcard in the quiz queue will be shown."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* `quiz` +"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "`show` +"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "`bad` +"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "robincyu"
        },
        "content": "This will increment the number of bad feedback of the flashcard shown, thus, the success rate of this flashcard will decrease. +"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Then, the next flashcard in the quiz queue will be shown."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* `quiz` +"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "`good` +"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "`...` +"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "`good` +"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Suppose this is the last flashcard to show inside quiz mode. Acquizition will record the statistics of the quiz mode and exit the quiz mode."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003d\u003d\u003d Smart command : kbd:[Enter]"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "robincyu"
        },
        "content": "It can be troublesome to always have to type `show` and `good`. +"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "robincyu"
        },
        "content": "You can use a _smart command_ that cleverly chooses the appropriate command to run."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "Format: kbd:[Enter]"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "****"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* To initiate a smart command, you just need to press enter."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* If you are in quiz mode, and the back face of the quizzed flashcard is not yet shown, smart command will execute a `show` command."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* If you are in quiz mode, and the back face of the quizzed flashcard has been shown, smart command will execute a `good` command."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* This dramatically reduces your time to navigate through the quiz!"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "****"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* `quiz` +"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "kbd:[Enter] +"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "kbd:[Enter] +"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "robincyu"
        },
        "content": "This will first show the back face of the flashcard, then will mark the flashcard as good."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* `quiz` +"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "kbd:[Enter] +"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "`bad` +"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "robincyu"
        },
        "content": "This will show the back face of the flashcard, then will mark the flashcard as bad."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* `quiz` +"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "kbd:[Enter] +"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "`...` +"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "kbd:[Enter] +"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "robincyu"
        },
        "content": "This will go through all the flashcards in the quiz mode and mark them all as good."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "robincyu"
        },
        "content": "[[QuizExit]]"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d\u003d\u003d Exiting quiz mode : `exit`"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "robincyu"
        },
        "content": "Exits quiz mode prematurely if you are in quiz mode. +"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "// end::quiz[]"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "robincyu"
        },
        "content": "*Q*: How do I save my data? +"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "robincyu"
        },
        "content": "*A*: Your data is saved automatically after each command; there is no need to"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "robincyu"
        },
        "content": "explicitly save."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "robincyu"
        },
        "content": "*Q*: How do I transfer my data to another computer? +"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "lungsin"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "robincyu"
        },
        "content": "it creates with the file that contains the data of your previous Acquizition"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "lungsin"
        },
        "content": "folder."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "// tag::command-summary[]"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d\u003d\u003d Commands (Collection)"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* *Add* `add f/FRONT_TEXT b/BACK_TEXT [i/IMAGE_NAME] [t/TAG]...` +"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* *Edit* : `edit INDEX [f/FRONT_TEXT] [b/BACK_TEXT] [i/IMAGE_NAME] [t/TAG]...` +"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* *Exit* : `exit`"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* *Find* : `find [f/FRONT_FACE]... [b/BACK_FACE]... [t/TAG]...` +"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* *Image* : `image FILE_PATH`"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* *Import* : `import [FILE_PATH]`"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* *Share* : `share [f/FRONT_FACE]... [b/BACK_FACE]... [t/TAG]...`"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* *Stats* : `stats [f/FRONT_FACE]... [b/BACK_FACE]... [t/TAG]...`"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* *Select* : `select INDEX`"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d\u003d\u003d Commands (Quiz)"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* *Quiz* : `quiz`"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* *Quiz SRS mode* : `quiz srs`"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* *Good feedback* : `good`"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* *Bad feedback* : `bad`"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* *Show* : `show`"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* *Smart command* : kbd:[Enter]"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* *Exit quiz mode* : `exit`"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "// end::command-summary[]"
      }
    ],
    "authorContributionMap": {
      "lungsin": 118,
      "lucatriglia": 1,
      "robincyu": 393,
      "sergiovieri": 95,
      "-": 129
    }
  },
  {
    "path": "docs/stylesheets/asciidoctor.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/* Asciidoctor default stylesheet | MIT License | http://asciidoctor.org */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "/* Remove comment around @import statement below when using as a custom stylesheet */"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/*@import \"https://fonts.googleapis.com/css?family\u003dOpen+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700\";*/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "audio,canvas,video{display:inline-block}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "audio:not([controls]){display:none;height:0}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "[hidden],template{display:none}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "script{display:none!important}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "body{margin:0}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "a{background:transparent}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "a:focus{outline:thin dotted}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "a:active,a:hover{outline:0}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2em;margin:.67em 0}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "abbr[title]{border-bottom:1px dotted}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "b,strong{font-weight:bold}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "dfn{font-style:italic}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "mark{background:#ff0;color:#000}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "code,kbd,pre,samp{font-family:monospace;font-size:1em}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "pre{white-space:pre-wrap}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "q{quotes:\"\\201C\" \"\\201D\" \"\\2018\" \"\\2019\"}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "small{font-size:80%}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "sup{top:-.5em}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "sub{bottom:-.25em}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "img{border:0}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "svg:not(:root){overflow:hidden}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "figure{margin:0}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "legend{border:0;padding:0}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "button,input{line-height:normal}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "button,select{text-transform:none}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "button,html input[type\u003d\"button\"],input[type\u003d\"reset\"],input[type\u003d\"submit\"]{-webkit-appearance:button;cursor:pointer}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "button[disabled],html input[disabled]{cursor:default}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"checkbox\"],input[type\u003d\"radio\"]{box-sizing:border-box;padding:0}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"search\"]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"search\"]::-webkit-search-cancel-button,input[type\u003d\"search\"]::-webkit-search-decoration{-webkit-appearance:none}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "textarea{overflow:auto;vertical-align:top}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "table{border-collapse:collapse;border-spacing:0}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "*,*:before,*:after{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "html,body{font-size:100%}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robincyu"
        },
        "content": "body{background:#fff;color:rgba(0,0,0,.8);padding:0;margin:0;font-family:\"Heebo\",\"Noto Serif\",\"DejaVu Serif\",serif;font-weight:400;font-style:normal;line-height:1;position:relative;cursor:auto}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "a:hover{cursor:pointer}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "img,object,embed{max-width:100%;height:auto}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "object,embed{height:100%}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "img{-ms-interpolation-mode:bicubic}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".left{float:left!important}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".right{float:right!important}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".text-left{text-align:left!important}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".text-right{text-align:right!important}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".text-center{text-align:center!important}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".text-justify{text-align:justify!important}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".hide{display:none}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "body{-webkit-font-smoothing:antialiased}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "img,object,svg{display:inline-block;vertical-align:middle}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "textarea{height:auto;min-height:50px}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "select{width:100%}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".center{margin-left:auto;margin-right:auto}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".spread{width:100%}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "p.lead,.paragraph.lead\u003ep,#preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{font-size:1.21875em;line-height:1.6}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".subheader,.admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0;direction:ltr}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "a{color:#2156a5;text-decoration:underline;line-height:inherit}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "a:hover,a:focus{color:#1d4b8f}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "a img{border:none}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robincyu"
        },
        "content": "p{font-family:\"Heebo\";font-weight:400;font-size:1em;line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "p aside{font-size:.875em;line-height:1.35;font-style:italic}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "robincyu"
        },
        "content": "h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{font-family:\"Bitter\",\"Open Sans\",\"DejaVu Sans\",sans-serif;font-weight:300;font-style:normal;color:#0d47a1;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1.0125em}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "h1 small,h2 small,h3 small,#toctitle small,.sidebarblock\u003e.content\u003e.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2.125em}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "h2{font-size:1.6875em}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.375em}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "h4,h5{font-size:1.125em}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "h6{font-size:1em}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "hr{border:solid #ddddd8;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em;height:0}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "em,i{font-style:italic;line-height:inherit}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "strong,b{font-weight:bold;line-height:inherit}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "small{font-size:60%;line-height:inherit}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "code{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;font-weight:400;color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "ul,ol,dl{font-size:1em;line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "ul,ol,ul.no-bullet,ol.no-bullet{margin-left:1.5em}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0;font-size:1em}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "ul.square li ul,ul.circle li ul,ul.disc li ul{list-style:inherit}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "ul.square{list-style-type:square}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "ul.circle{list-style-type:circle}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "ul.disc{list-style-type:disc}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "ul.no-bullet{list-style:none}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "dl dt{margin-bottom:.3125em;font-weight:bold}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "abbr,acronym{text-transform:uppercase;font-size:90%;color:rgba(0,0,0,.8);border-bottom:1px dotted #ddd;cursor:help}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "abbr{text-transform:none}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 1.1875em;border-left:1px solid #ddd}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite{display:block;font-size:.9375em;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite:before{content:\"\\2014 \\0020\"}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite a,blockquote cite a:visited{color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote,blockquote p{line-height:1.6;color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2.75em}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "h2{font-size:2.3125em}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.6875em}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "h4{font-size:1.4375em}}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "table{background:#fff;margin-bottom:1.25em;border:solid 1px #dedede}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "table thead,table tfoot{background:#f7f8f7;font-weight:bold}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;color:rgba(0,0,0,.8);text-align:left}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "table tr th,table tr td{padding:.5625em .625em;font-size:inherit;color:rgba(0,0,0,.8)}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "table tr.even,table tr.alt,table tr:nth-of-type(even){background:#f8f8f7}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{display:table-cell;line-height:1.6}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "body{tab-size:4}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2;word-spacing:-.05em}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "h1 strong,h2 strong,h3 strong,#toctitle strong,.sidebarblock\u003e.content\u003e.title strong,h4 strong,h5 strong,h6 strong{font-weight:400}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".clearfix:before,.clearfix:after,.float-group:before,.float-group:after{content:\" \";display:table}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".clearfix:after,.float-group:after{clear:both}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "*:not(pre)\u003ecode{font-size:.9375em;font-style:normal!important;letter-spacing:0;padding:.1em .5ex;word-spacing:-.15em;background-color:#f7f7f8;-webkit-border-radius:4px;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "pre,pre\u003ecode{line-height:1.45;color:rgba(0,0,0,.9);font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;font-weight:400;text-rendering:optimizeSpeed}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq{color:rgba(51,51,51,.8)}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "kbd{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;display:inline-block;color:rgba(0,0,0,.8);font-size:.65em;line-height:1.45;background-color:#f7f7f7;border:1px solid #ccc;-webkit-border-radius:3px;border-radius:3px;-webkit-box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em white inset;box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em #fff inset;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq kbd:first-child{margin-left:0}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq kbd:last-child{margin-right:0}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".menuseq,.menu{color:rgba(0,0,0,.8)}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:before,b.button:after{position:relative;top:-1px;font-weight:400}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:before{content:\"[\";padding:0 3px 0 2px}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:after{content:\"]\";padding:0 2px 0 3px}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "p a\u003ecode:hover{color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "#header,#content,#footnotes,#footer{width:100%;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;max-width:62.5em;*zoom:1;position:relative;padding-left:.9375em;padding-right:.9375em}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "#header:before,#header:after,#content:before,#content:after,#footnotes:before,#footnotes:after,#footer:before,#footer:after{content:\" \";display:table}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "#header:after,#content:after,#footnotes:after,#footer:after{clear:both}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "#content{margin-top:1.25em}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "#content:before{content:none}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:first-child{color:rgba(0,0,0,.85);margin-top:2.25rem;margin-bottom:0}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:first-child+#toc{margin-top:8px;border-top:1px solid #ddddd8}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:only-child,body.toc2 #header\u003eh1:nth-last-child(2){border-bottom:1px solid #ddddd8;padding-bottom:8px}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details{border-bottom:1px solid #ddddd8;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-left:.25em;color:rgba(0,0,0,.6);display:-ms-flexbox;display:-webkit-flex;display:flex;-ms-flex-flow:row wrap;-webkit-flex-flow:row wrap;flex-flow:row wrap}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details span:first-child{margin-left:-.125em}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details span.email a{color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br{display:none}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span:before{content:\"\\00a0\\2013\\00a0\"}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span.author:before{content:\"\\00a0\\22c5\\00a0\";color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span#revremark:before{content:\"\\00a0|\\00a0\"}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "#header #revnumber{text-transform:capitalize}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "#header #revnumber:after{content:\"\\00a0\"}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "#content\u003eh1:first-child:not([class]){color:rgba(0,0,0,.85);border-bottom:1px solid #ddddd8;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.25rem}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "#toc{border-bottom:1px solid #efefed;padding-bottom:.5em}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "#toc\u003eul{margin-left:.125em}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul.sectlevel0\u003eli\u003ea{font-style:italic}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul{font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;list-style-type:none}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "#toc li{line-height:1.3334;margin-top:.3334em}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "#toc a{text-decoration:none}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "#toc a:active{text-decoration:underline}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "#toctitle{color:#7a2518;font-size:1.2em}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){#toctitle{font-size:1.375em}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2{padding-left:15em;padding-right:0}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2{margin-top:0!important;background-color:#f8f8f7;position:fixed;width:15em;left:0;top:0;border-right:1px solid #efefed;border-top-width:0!important;border-bottom-width:0!important;z-index:1000;padding:1.25em 1em;height:100%;overflow:auto}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 #toctitle{margin-top:0;margin-bottom:.8rem;font-size:1.2em}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2\u003eul{font-size:.9em;margin-bottom:0}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul ul{margin-left:0;padding-left:1em}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right{padding-left:0;padding-right:15em}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid #efefed;left:auto;right:0}}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:1280px){body.toc2{padding-left:20em;padding-right:0}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2{width:20em}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 #toctitle{font-size:1.375em}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2\u003eul{font-size:.95em}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul ul{padding-left:1.25em}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right{padding-left:0;padding-right:20em}}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "#footer{max-width:100%;background-color:rgba(0,0,0,.8);padding:1.25em}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "#footer-text{color:rgba(255,255,255,.8);line-height:1.44}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1{padding-bottom:.625em}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){.sect1{padding-bottom:1.25em}}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1+.sect1{border-top:1px solid #efefed}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.anchor,h2\u003ea.anchor,h3\u003ea.anchor,#toctitle\u003ea.anchor,.sidebarblock\u003e.content\u003e.title\u003ea.anchor,h4\u003ea.anchor,h5\u003ea.anchor,h6\u003ea.anchor{position:absolute;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decoration:none!important;visibility:hidden;text-align:center;font-weight:400}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.anchor:before,h2\u003ea.anchor:before,h3\u003ea.anchor:before,#toctitle\u003ea.anchor:before,.sidebarblock\u003e.content\u003e.title\u003ea.anchor:before,h4\u003ea.anchor:before,h5\u003ea.anchor:before,h6\u003ea.anchor:before{content:\"\\00A7\";font-size:.85em;display:block;padding-top:.1em}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1:hover\u003ea.anchor,#content h1\u003ea.anchor:hover,h2:hover\u003ea.anchor,h2\u003ea.anchor:hover,h3:hover\u003ea.anchor,#toctitle:hover\u003ea.anchor,.sidebarblock\u003e.content\u003e.title:hover\u003ea.anchor,h3\u003ea.anchor:hover,#toctitle\u003ea.anchor:hover,.sidebarblock\u003e.content\u003e.title\u003ea.anchor:hover,h4:hover\u003ea.anchor,h4\u003ea.anchor:hover,h5:hover\u003ea.anchor,h5\u003ea.anchor:hover,h6:hover\u003ea.anchor,h6\u003ea.anchor:hover{visibility:visible}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "robincyu"
        },
        "content": "#content h1\u003ea.link,h2\u003ea.link,h3\u003ea.link,#toctitle\u003ea.link,.sidebarblock\u003e.content\u003e.title\u003ea.link,h4\u003ea.link,h5\u003ea.link,h6\u003ea.link{color:#0d47a1;text-decoration:none}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "robincyu"
        },
        "content": "#content h1\u003ea.link:hover,h2\u003ea.link:hover,h3\u003ea.link:hover,#toctitle\u003ea.link:hover,.sidebarblock\u003e.content\u003e.title\u003ea.link:hover,h4\u003ea.link:hover,h5\u003ea.link:hover,h6\u003ea.link:hover{color:#0d47a1}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videoblock{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{text-rendering:optimizeLegibility;text-align:left;font-family:\"Noto Serif\",\"DejaVu Serif\",serif;font-size:1rem;font-style:italic}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock\u003ecaption.title{white-space:nowrap;overflow:visible;max-width:0}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".paragraph.lead\u003ep,#preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock #preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{font-size:inherit}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable{border-collapse:separate;border:0;background:none;width:100%}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.icon{text-align:center;width:80px}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.icon img{max-width:none}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.icon .title{font-weight:bold;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;text-transform:uppercase}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #ddddd8;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.content\u003e:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content{border-style:solid;border-width:1px;border-color:#e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e.content\u003e.title{color:#7a2518;margin-top:0;text-align:center}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:last-child\u003e:last-child,.exampleblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content\u003e:last-child\u003e:last-child,.sidebarblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre,.listingblock pre:not(.highlight),.listingblock pre[class\u003d\"highlight\"],.listingblock pre[class^\u003d\"highlight \"],.listingblock pre.CodeRay,.listingblock pre.prettyprint{background:#f7f7f8}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock .literalblock pre,.sidebarblock .listingblock pre:not(.highlight),.sidebarblock .listingblock pre[class\u003d\"highlight\"],.sidebarblock .listingblock pre[class^\u003d\"highlight \"],.sidebarblock .listingblock pre.CodeRay,.sidebarblock .listingblock pre.prettyprint{background:#f2f1f1}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{-webkit-border-radius:4px;border-radius:4px;word-wrap:break-word;padding:1em;font-size:.8125em}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre.nowrap,.literalblock pre[class].nowrap,.listingblock pre.nowrap,.listingblock pre[class].nowrap{overflow-x:auto;white-space:pre;word-wrap:normal}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:.90625em}}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:1280px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:1em}}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock.output pre{color:#f7f7f8;background-color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.highlightjs{padding:0}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.highlightjs\u003ecode{padding:1em;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.prettyprint{border-width:0}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock\u003e.content{position:relative}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock code[data-lang]:before{display:none;content:attr(data-lang);position:absolute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform:uppercase;color:#999}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock:hover code[data-lang]:before{display:block}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock.terminal pre .command:before{content:attr(data-prompt);padding-right:.5em;color:#999}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock.terminal pre .command:not([data-prompt]):before{content:\"$\"}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable{border-collapse:separate;border:0;margin-bottom:0;background:none}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable td{vertical-align:top;padding-top:0;padding-bottom:0;line-height:1.45}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable td.code{padding-left:.75em;padding-right:0}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "pre.pygments .lineno,table.pyhltable td:not(.code){color:#999;padding-left:0;padding-right:.5em;border-right:1px solid #ddddd8}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "pre.pygments .lineno{display:inline-block;margin-right:.25em}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable .linenodiv{background:none!important;padding-right:0!important}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock{margin:0 1em 1.25em 1.5em;display:table}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock\u003e.title{margin-left:-1.5em;margin-bottom:.75em}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote,.quoteblock blockquote p{color:rgba(0,0,0,.85);font-size:1.15rem;line-height:1.75;word-spacing:.1em;letter-spacing:0;font-style:italic;text-align:justify}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote{margin:0;padding:0;border:0}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote:before{content:\"\\201c\";float:left;font-size:2.75em;font-weight:bold;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px 2px rgba(0,0,0,.1)}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote\u003e.paragraph:last-child p{margin-bottom:0}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution{margin-top:.5em;margin-right:.5ex;text-align:right}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock{margin-left:0;margin-right:0;padding:.5em 0;border-left:3px solid rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock blockquote{padding:0 0 0 .75em}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock blockquote:before{display:none}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock{margin:0 1em 1.25em 1em}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock pre{font-family:\"Open Sans\",\"DejaVu Sans\",sans;font-size:1.15rem;color:rgba(0,0,0,.85);font-weight:300;text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock pre strong{font-weight:400}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution,.verseblock .attribution{font-size:.9375em;line-height:1.45;font-style:italic}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution br,.verseblock .attribution br{display:none}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution cite,.verseblock .attribution cite{display:block;letter-spacing:-.025em;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract{margin:0 0 1.25em 0;display:block}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract blockquote,.quoteblock.abstract blockquote p{text-align:left;word-spacing:0}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract blockquote:before,.quoteblock.abstract blockquote p:first-of-type:before{display:none}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock{max-width:100%;border-collapse:separate}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock td\u003e.paragraph:last-child p\u003ep:last-child,table.tableblock th\u003ep:last-child,table.tableblock td\u003ep:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all th.tableblock,table.grid-all td.tableblock{border-width:0 1px 1px 0}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all tfoot\u003etr\u003eth.tableblock,table.grid-all tfoot\u003etr\u003etd.tableblock{border-width:1px 1px 0 0}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-cols th.tableblock,table.grid-cols td.tableblock{border-width:0 1px 0 0}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all *\u003etr\u003e.tableblock:last-child,table.grid-cols *\u003etr\u003e.tableblock:last-child{border-right-width:0}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-rows th.tableblock,table.grid-rows td.tableblock{border-width:0 0 1px 0}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all tbody\u003etr:last-child\u003eth.tableblock,table.grid-all tbody\u003etr:last-child\u003etd.tableblock,table.grid-all thead:last-child\u003etr\u003eth.tableblock,table.grid-rows tbody\u003etr:last-child\u003eth.tableblock,table.grid-rows tbody\u003etr:last-child\u003etd.tableblock,table.grid-rows thead:last-child\u003etr\u003eth.tableblock{border-bottom-width:0}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-rows tfoot\u003etr\u003eth.tableblock,table.grid-rows tfoot\u003etr\u003etd.tableblock{border-width:1px 0 0 0}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-all{border-width:1px}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-sides{border-width:0 1px}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-topbot{border-width:1px 0}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-left,td.halign-left{text-align:left}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-right,td.halign-right{text-align:right}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-center,td.halign-center{text-align:center}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-top,td.valign-top{vertical-align:top}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-bottom,td.valign-bottom{vertical-align:bottom}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-middle,td.valign-middle{vertical-align:middle}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "table thead th,table tfoot th{font-weight:bold}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "tbody tr th{display:table-cell;line-height:1.6;background:#f7f8f7}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "tbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{color:rgba(0,0,0,.8);font-weight:bold}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "p.tableblock\u003ecode:only-child{background:none;padding:0}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "p.tableblock{font-size:1em}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "td\u003ediv.verse{white-space:pre}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "ol{margin-left:1.75em}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "ul li ol{margin-left:1.5em}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd{margin-left:1.125em}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd:last-child,dl dd:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "ol\u003eli p,ul\u003eli p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:.625em}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "ul.unstyled,ol.unnumbered,ul.checklist,ul.none{list-style-type:none}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "ul.unstyled,ol.unnumbered,ul.checklist{margin-left:.625em}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "ul.checklist li\u003ep:first-child\u003e.fa-square-o:first-child,ul.checklist li\u003ep:first-child\u003e.fa-check-square-o:first-child{width:1em;font-size:.85em}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "ul.checklist li\u003ep:first-child\u003einput[type\u003d\"checkbox\"]:first-child{width:1em;position:relative;top:1px}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline{margin:0 auto .625em auto;margin-left:-1.375em;margin-right:0;padding:0;list-style:none;overflow:hidden}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline\u003eli{list-style:none;float:left;margin-left:1.375em;display:block}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline\u003eli\u003e*{display:block}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ".unstyled dl dt{font-weight:400;font-style:normal}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "ol.arabic{list-style-type:decimal}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "ol.decimal{list-style-type:decimal-leading-zero}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "ol.loweralpha{list-style-type:lower-alpha}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "ol.upperalpha{list-style-type:upper-alpha}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "ol.lowerroman{list-style-type:lower-roman}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "ol.upperroman{list-style-type:upper-roman}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "ol.lowergreek{list-style-type:lower-greek}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".hdlist\u003etable,.colist\u003etable{border:0;background:none}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".hdlist\u003etable\u003etbody\u003etr,.colist\u003etable\u003etbody\u003etr{background:none}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "td.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "td.hdlist1{font-weight:bold;padding-bottom:1.25em}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock+.colist,.listingblock+.colist{margin-top:-.5em}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".colist\u003etable tr\u003etd:first-of-type{padding:0 .75em;line-height:1}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ".colist\u003etable tr\u003etd:last-of-type{padding:.25em 0}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".thumb,.th{line-height:0;display:inline-block;border:solid 4px #fff;-webkit-box-shadow:0 0 0 1px #ddd;box-shadow:0 0 0 1px #ddd}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.left,.imageblock[style*\u003d\"float: left\"]{margin:.25em .625em 1.25em 0}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.right,.imageblock[style*\u003d\"float: right\"]{margin:.25em 0 1.25em .625em}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock\u003e.title{margin-bottom:0}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.thumb,.imageblock.th{border-width:6px}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.thumb\u003e.title,.imageblock.th\u003e.title{padding:0 .125em}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inline-block;line-height:0}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".image.left{margin-right:.625em}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".image.right{margin-left:.625em}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "a.image{text-decoration:none;display:inline-block}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "a.image object{pointer-events:none}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote,sup.footnoteref{font-size:.875em;position:static;vertical-align:super}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote a,sup.footnoteref a{text-decoration:none}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote a:active,sup.footnoteref a:active{text-decoration:underline}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em 0;border-width:1px 0 0 0}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote{padding:0 .375em 0 .225em;line-height:1.3334;font-size:.875em;margin-left:1.2em;text-indent:-1.05em;margin-bottom:.2em}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote a:first-of-type{font-weight:bold;text-decoration:none}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote:last-of-type{margin-bottom:0}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "#content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ".gist .file-data\u003etable{border:0;background:#fff;width:100%;margin-bottom:0}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ".gist .file-data\u003etable td.line-data{width:99%}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "div.unbreakable{page-break-inside:avoid}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ".big{font-size:larger}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ".small{font-size:smaller}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ".underline{text-decoration:underline}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ".overline{text-decoration:overline}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ".line-through{text-decoration:line-through}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ".aqua{color:#00bfbf}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ".aqua-background{background-color:#00fafa}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ".black{color:#000}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ".black-background{background-color:#000}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".blue{color:#0000bf}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ".blue-background{background-color:#0000fa}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ".fuchsia{color:#bf00bf}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ".fuchsia-background{background-color:#fa00fa}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ".gray{color:#606060}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ".gray-background{background-color:#7d7d7d}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ".green{color:#006000}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ".green-background{background-color:#007d00}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ".lime{color:#00bf00}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ".lime-background{background-color:#00fa00}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ".maroon{color:#600000}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ".maroon-background{background-color:#7d0000}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ".navy{color:#000060}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ".navy-background{background-color:#00007d}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ".olive{color:#606000}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ".olive-background{background-color:#7d7d00}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ".purple{color:#600060}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ".purple-background{background-color:#7d007d}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ".red{color:#bf0000}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ".red-background{background-color:#fa0000}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ".silver{color:#909090}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ".silver-background{background-color:#bcbcbc}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".teal{color:#006060}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ".teal-background{background-color:#007d7d}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ".white{color:#bfbfbf}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ".white-background{background-color:#fafafa}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ".yellow{color:#bfbf00}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ".yellow-background{background-color:#fafa00}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "span.icon\u003e.fa{cursor:default}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon [class^\u003d\"fa icon-\"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-note:before{content:\"\\f05a\";color:#19407c}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-tip:before{content:\"\\f0eb\";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-warning:before{content:\"\\f071\";color:#bf6900}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-caution:before{content:\"\\f06d\";color:#bf3400}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-important:before{content:\"\\f06a\";color:#bf0000}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]{display:inline-block;color:#fff!important;background-color:rgba(0,0,0,.8);-webkit-border-radius:100px;border-radius:100px;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-style:normal;font-weight:bold}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value] *{color:#fff!important}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]+b{display:none}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]:after{content:attr(data-value)}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "pre .conum[data-value]{position:relative;top:-.125em}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "b.conum *{color:inherit!important}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ".conum:not([data-value]):empty{display:none}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "dt,th.tableblock,td.content,div.footnote{text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "h1,h2,p,td.content,span.alt{letter-spacing:-.01em}"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "p strong,td.content strong,div.footnote strong{letter-spacing:-.005em}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "p,blockquote,dt,td.content,span.alt{font-size:1.0625rem}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "p{margin-bottom:1.25rem}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock p,.sidebarblock dt,.sidebarblock td.content,p.tableblock{font-size:1em}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content{background-color:#fffef7;border-color:#e0e0dc;-webkit-box-shadow:0 1px 4px #e0e0dc;box-shadow:0 1px 4px #e0e0dc}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ".print-only{display:none!important}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "@media print{@page{margin:1.25cm .75cm}"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "*{-webkit-box-shadow:none!important;box-shadow:none!important;text-shadow:none!important}"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "a{color:inherit!important;text-decoration:underline!important}"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "a.bare,a[href^\u003d\"#\"],a[href^\u003d\"mailto:\"]{text-decoration:none!important}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "a[href^\u003d\"http:\"]:not(.bare):after,a[href^\u003d\"https:\"]:not(.bare):after{content:\"(\" attr(href) \")\";display:inline-block;font-size:.875em;padding-left:.25em}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "abbr[title]:after{content:\" (\" attr(title) \")\"}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "pre,blockquote,tr,img,object,svg{page-break-inside:avoid}"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "thead{display:table-header-group}"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "svg{max-width:100%}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "p,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title{page-break-after:avoid}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "#toc,.sidebarblock,.exampleblock\u003e.content{background:none!important}"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "#toc{border-bottom:1px solid #ddddd8!important;padding-bottom:0!important}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1{padding-bottom:0!important}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1+.sect1{border:0!important}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:first-child{margin-top:1.25rem}"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header{text-align:center}"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header\u003eh1:first-child{border:0!important;margin:2.5em 0 1em 0}"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details{border:0!important;display:block;padding:0!important}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details span:first-child{margin-left:0!important}"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details br{display:block}"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details br+span:before{content:none!important}"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #toc{border:0!important;text-align:left!important;padding:0!important;margin:0!important}"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1\u003eh2{page-break-before:always}"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock code[data-lang]:before{display:block}"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "#footer{background:none!important;padding:0 .9375em}"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "#footer-text{color:rgba(0,0,0,.6)!important;font-size:.9em}"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ".hide-on-print{display:none!important}"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ".print-only{display:block!important}"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ".hide-for-print{display:none!important}"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ".show-for-print{display:inherit!important}}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 5,
      "-": 402
    }
  },
  {
    "path": "docs/stylesheets/gh-pages.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robincyu"
        },
        "content": "@import url(https://fonts.googleapis.com/css?family\u003dHeebo|Bitter|Montserrat|Open+Sans);"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "@import \"asciidoctor.css\"; /* Default asciidoc style framework - important */"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/* Custom block: details */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock.details \u003e .content {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    border-left: .25rem solid rgba(0, 0, 0, 0.1);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock.details \u003e .content {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-left: .5rem"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock.details {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: transparent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    border: none;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-bottom: 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-top: 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/* Overrides for asciidoctor.css */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "a {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #0074c7;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "h1,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1 \u003e a.link,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "h2,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "h2 \u003e a.link,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "h3,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "h3 \u003e a.link,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "#toctitle,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "#toctitle \u003e a.link,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock \u003e .content \u003e .title,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock \u003e .content \u003e .title \u003e a.link,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "h4,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "h4 \u003e a.link,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "h5,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "h5 \u003e a.link,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "h6,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "h6 \u003e a.link {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    color: #1565c0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".subheader,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.content \u003e .title,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".audioblock \u003e .title,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock \u003e .title,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock \u003e .title,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock \u003e .title,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock \u003e .title,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".stemblock \u003e .title,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".openblock \u003e .title,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".paragraph \u003e.title,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock \u003e .title,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock \u003e .title,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock \u003e .title,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ".videoblock \u003e .title,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".dlist \u003e .title,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".olist \u003e .title,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".ulist \u003e .title,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".qlist \u003e .title,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".hdlist \u003e .title {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    color: rgb(13, 71, 161);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "@media screen {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    #footer {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        background-color: #f6f6f6;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        border-top: 1px #d2d2d2 solid;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        border-bottom: 1px #d2d2d2 solid;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        font-family: \"Open Sans\", \"DejaVu Sans\", sans-serif;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    #footer-text {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        color: #595959;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        line-height: 1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "/* Utilities */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".container {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    width: 100%;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    max-width: 62.5rem;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-left: auto;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-right: auto;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "/* Colors */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ".bg-light {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #f8f9fa;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ".bg-lighter {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #fbfbfb;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "/* Navbar */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    display: flex;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    flex-wrap: nowrap;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    justify-content: center;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    font-family: \"Open Sans\", \"DejaVu Sans\", sans-serif;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1rem;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0px 1rem;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-lg {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1.3rem;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    border-bottom: 1px #d2d2d2 solid;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar a {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    text-decoration: none;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #595959;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a:hover,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a:focus {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #000000;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar a.active,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar a.active:hover,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar a.active:focus {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    font-weight: bold;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a.active,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a.active:hover,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a.active:focus {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #000000;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light .nav-link {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    border-bottom: 2px transparent solid;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light .nav-link.active {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    border-bottom: 2px #e46c0a solid;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-lg .nav-link.active {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    border-bottom: 0;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar \u003e .container {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    display: flex;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    flex-wrap: wrap;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    justify-content: center;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-brand {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    display: inline-block;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-right: 1rem;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0.8125rem 0rem;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-left: 0.9375rem;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1.25rem;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-brand img {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    height: 1.4rem;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 0rem 0.4rem;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    vertical-align: middle;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-lg .navbar-brand {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1.7rem;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-lg .navbar-brand img {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    height: 2.3rem;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-nav {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    display: flex;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    flex-wrap: wrap;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    flex-grow: 1;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    align-items: center;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 0px;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0px;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    list-style: none;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: inherit;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".nav-link {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    display: block;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 0px;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    border: 0px;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 1rem 1rem;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "robincyu"
        },
        "content": "ol {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    font-family: \"Heebo\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "robincyu"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "/* Do not display site header on print mediums */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "@media print {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    #seedu-header {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        display: none;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    #site-header {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        display: none;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 7,
      "-": 211
    }
  },
  {
    "path": "docs/team/lucatriglia.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "\u003d Luca Triglia - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "\u003d\u003d PROJECT: ACQUIZITION"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "_Acquizition_ is a desktop flashcard application used for language acquisition and training."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "Through the use of a Spaced Repetition System, _Acquizition_ maximises user retention"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "by testing vocabulary most likely to be forgotten by a user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "The application has an intuitive and simplistic interface, making it great for both inexperienced and more proficient computer users."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "Developed at the National University of Singapore, _Acquizition_ was created as part of a software engineering team project (module code: CS2103T)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "As such, this application was not entirely developed by me. This portfolio serves to"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "outline my own contributions towards the project."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "* *Major enhancement*: added *the ability find specific flashcards*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "** What it does: allows the user to find and list flashcards based on specific properties such as front face text,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "back face text, tags and success rate."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "** Justification: This feature represents the core of the application, as many other commands like the quiz command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "depend on the find feature. For instance, if a user wants to be quizzed on chinese, the user must first find the corresponding chinese cards."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "** Highlights: This enhancement touches upon multiple components of the project architecture and as a result, was challenging"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "to implement. Since many other features of the application depend on this functionality, I had to consider many design"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "implementations to make it as user centric as possible."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "** Credits: This feature was enhanced from the existing codebase of the CS2103T project."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "** Related code: https://github.com/CS2103-AY1819S2-T12-2/main/pull/29[Enhance Find Command], https://github.com/CS2103-AY1819S2-T12-2/main/pull/85[Find Command - Filter by Success Rate]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "* *Major enhancement*: added *the ability share and import flashcards*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "** What it does: allows the user to save locally created flashcards to a text file so that they can be distributed and used by other _Acquizition_ users."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "** Justification: This application is targeted at language students. As such, this feature would prove beneficial to"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "users who wish to make use of another persons card collection without needing to manually re-create the flashcards."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "** Related code: https://github.com/CS2103-AY1819S2-T12-2/main/pull/12[Add Import Functionality], https://github.com/CS2103-AY1819S2-T12-2/main/pull/43[Add Share Functionality],"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "https://github.com/CS2103-AY1819S2-T12-2/main/pull/85[Tweak Import and Share Functionality]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "*** Updated AboutUs and ContactUs project pages (Pull request https://github.com/CS2103-AY1819S2-T12-2/main/pull/1[#1])"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "*** Created Project Portfolio Pages for each team member"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "*** Verified the quality of project documentation (User Guide and Developer Guide)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/nus-cs2103-AY1819S2/pe-dry-run/issues/719[1],"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "https://github.com/nus-cs2103-AY1819S2/pe-dry-run/issues/875[2], https://github.com/nus-cs2103-AY1819S2/pe-dry-run/issues/400[3])"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "A comprehensive summary of all the code contributed can be found https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dlucatriglia[here]."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "|_Maintaining a comprehensive and coherent User Guide is essential for any Software Engineering project."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "Given below are sections I contributed to the User Guide of Acquizition. They showcase my ability to write user-centric documentation._"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfind]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "include::../UserGuide.adoc[tag\u003dshare]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "include::../UserGuide.adoc[tag\u003dimport]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide of Acquizition. They showcase my ability to write technical documentation"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "targeted at developers and project managers. They also serve to show the technical depth of my contributions._"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dfindfeature]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dshare_import]"
      }
    ],
    "authorContributionMap": {
      "lucatriglia": 49,
      "-": 36
    }
  },
  {
    "path": "docs/team/lungsin.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "\u003d Kwee Lung Sin - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lungsin"
        },
        "content": ":toc: right"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lungsin"
        },
        "content": "\u003d\u003d PROJECT: Acquizition"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Acquizition is a desktop flashcard application for subject revision and language acquisition."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Using a scientifically-grounded SRS (Spaced Repetition System), Acquizition maximizes memory retention by testing the terms most likely to be forgotten soon."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lungsin"
        },
        "content": "Created with JavaFX, Acquizition has a sleek and intuitive GUI (Graphical User Interface) to streamline the experience for new users, but also sports a CLI (Command Line Interface) to maximize the efficiency of power users. It is written in Java and has around 14k LoC."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lungsin"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* *Major enhancement*: added statistics mechanism*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lungsin"
        },
        "content": "** What it does: allows each flashcard to have a success rate based on the quiz mode. The statistics can be seen by both the user and the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lungsin"
        },
        "content": "** Justification: This feature improves the product significantly because it makes the user knows which card they are weak at. By storing statistics, the app becomes smarter in choosing cards to be quizzed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lungsin"
        },
        "content": "** Highlights: This enhancement affects the quiz command and can be used as a backbone of a recommendation system feature."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lungsin"
        },
        "content": "** Related code: https://github.com/CS2103-AY1819S2-T12-2/main/pull/13[Statistics Command], https://github.com/CS2103-AY1819S2-T12-2/main/pull/40[Filter on Stats]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* *Major enhancement*: added Spaced Repetition System (SRS) mechanism*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lungsin"
        },
        "content": "** What it does: This system is an adaptive recommendation learning system. Here the SRS is designed as follow, each flashcard stores the proficiency level of the user and the time which it can\u0027t be reviewed before that time. Each time a user successfully guess a flashcard, the proficiency level of that card is increased by one and the time interval is increased proportionally with proficiency level. If a user fail to guess the flashcard, the proficiency level is decreased to 0. Thus, this system creates an adaptive behaviour, where more hard to remember cards are more often reviewed than the easier one."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lungsin"
        },
        "content": "** Justification: This enhancement improves the product significantly because by using Spaced Repetition System, the learning  is more focused on the \"more hard to remember\" flashcards. Thus the user learns more effectively."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lungsin"
        },
        "content": "** Highlights: This system uses a learning technique called Spaced Repetition that incorporates increasing intervals of time between subsequent review of previously learned material in order to exploits the psychological spacing effect."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lungsin"
        },
        "content": "** Credits: This feature is inspired by https://en.wikipedia.org/wiki/Leitner_system[Leitner System]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lungsin"
        },
        "content": "** Related code: https://github.com/CS2103-AY1819S2-T12-2/main/pull/86[SRS Mode], https://github.com/CS2103-AY1819S2-T12-2/main/pull/91[Time until Review is Displayed in Select]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lungsin"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lungsin"
        },
        "content": "** Added a functionality in find command to use substring match instead of word match. This functionality is particularly useful for finding a tedious chinese / japanese sentence."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lungsin"
        },
        "content": "*** Related code: https://github.com/CS2103-AY1819S2-T12-2/main/pull/81[Find]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lungsin"
        },
        "content": "** added functionality in undo / redo to display the command that it undone / redone. This functionality is particularly useful for if the user wants to keep track what he / she undo or redo."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lungsin"
        },
        "content": "*** Related code: https://github.com/CS2103-AY1819S2-T12-2/main/pull/86[Undo/Redo]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lungsin"
        },
        "content": "*** Setup github https://github.com/cs2103-ay1819s2-t12-2/main/issues?utf8\u003d%E2%9C%93\u0026q\u003dis%3Aissue+author%3Alungsin[issues]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lungsin"
        },
        "content": "*** https://github.com/CS2103-AY1819S2-T12-2/main/pulls?utf8\u003d%E2%9C%93\u0026q\u003dis%3Apr+reviewed-by%3Alungsin+is%3Aclosed+[Reviewed and approved several PRs]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lungsin"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lungsin"
        },
        "content": "*** Integrated a third party library (Reposense) to the project (https://github.com/CS2103-AY1819S2-T12-2/main/pull/42[#42])"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lungsin"
        },
        "content": "** Code contributed: [https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#search\u003dKWE[Reposense]]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lungsin"
        },
        "content": "include::../UserGuide.adoc[tag\u003dstats]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lungsin"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsrs]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lungsin"
        },
        "content": "include::../UserGuide.adoc[tag\u003dselect]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lungsin"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dsrs]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lungsin"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dstatistics]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lungsin": 35,
      "lucatriglia": 1,
      "-": 38
    }
  },
  {
    "path": "docs/team/robincyu.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d Robin Christopher Yu - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robincyu"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": ":toc-title: Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robincyu"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robincyu"
        },
        "content": "image::robincyu.png[width\u003d\"200\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d\u003d Project Portfolio: Introduction"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robincyu"
        },
        "content": "As an undergraduate student at the National University of Singapore (NUS) taking the communication and software engineering modules CS2101 and CS2103T, I"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": "worked on _Acquizition_, an application borne out of _AddressBook Level 4_, for the better half of a semester."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": "_Acquizition_ is a desktop flashcard application for language acquisition. It sports the following major features:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* A fully-fledged **quiz** functionality, equipped with a scientifically-grounded spaced repetition system (SRS) to maximize"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robincyu"
        },
        "content": "retention rates."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* Comprehensive **statistics**, both by card individually and by tag in aggregate."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* Support for adding **images** onto flashcards in order to further strengthen connections between concepts in a way words"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robincyu"
        },
        "content": "alone cannot do."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* Convenient **sharing** of flashcards amongst friends studying the same language."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robincyu"
        },
        "content": "These features were, of course, not all developed by me. You may be more interested in what I have"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robincyu"
        },
        "content": "contributed as an individual."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robincyu"
        },
        "content": "In this case, I hope to use this project portfolio to make it clear to you exactly what my contributions to this project"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": "were."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robincyu"
        },
        "content": "I hope to demonstrate to you my contributions to the following aspects of _Acquizition_:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robincyu"
        },
        "content": "1. Code Contributions"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robincyu"
        },
        "content": "2. User Guide Contributions"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robincyu"
        },
        "content": "3. Developer Guide Contributions"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d\u003d\u003d Code Contributions"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* *Major contribution*: I developed in its entirety the ability to insert images into flashcards."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robincyu"
        },
        "content": "** This feature improves the product quite significantly, as the ability to add images allows one"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robincyu"
        },
        "content": "to more directly relate concepts to vocabularies."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robincyu"
        },
        "content": "** Implementing this feature required a focus on user-centric design, as I thought about how to"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robincyu"
        },
        "content": "implement it such that it would be most intuitive to an end-user."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robincyu"
        },
        "content": "*** In the process, many alternatives were considered and scrapped. For example, adding images to"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robincyu"
        },
        "content": "_Acquizition_ required importing the images first. This seemed more intuitive than making the flashcard"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robincyu"
        },
        "content": "depend on files on the user\u0027s computer, and images suddenly not working when these image files were"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robincyu"
        },
        "content": "moved."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robincyu"
        },
        "content": "** The implementation was also not straightforward; full image support required modifying both"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": "the Graphical User Interface (GUI) aspect, to show the image, and the file storage aspect, to store"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robincyu"
        },
        "content": "the images. These two tend to be particularly hard to work with, as they tend to have lots of dependencies"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robincyu"
        },
        "content": "that need to be carefully considered. +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robincyu"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robincyu"
        },
        "content": "**Code:** https://github.com/CS2103-AY1819S2-T12-2/main/pull/50[[PR\\] Image support] +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robincyu"
        },
        "content": "**Code:** https://github.com/CS2103-AY1819S2-T12-2/main/pull/92[[PR\\] Image support fixes] +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* *Minor contribution*: I kick-started development by refactoring the majority of the code, removing a vast majority of the"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robincyu"
        },
        "content": "references to AddressBook Level 4. +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robincyu"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robincyu"
        },
        "content": "**Code:** https://github.com/CS2103-AY1819S2-T12-2/main/pull/14[[PR\\] Refactor AddressBook to CardCollection, Person to Flashcard]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d\u003d\u003d User Guide Contributions"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* **Major contribution**: I overhauled the User Guide in order to make it more user-friendly."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robincyu"
        },
        "content": "** I restructured the way in which commands were introduced (directly addressing end-user\u0027s issues rather than listing each command individually)."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robincyu"
        },
        "content": "** I rewrote the \"Introduction\" and \"Quick Start\" sections to be more inviting, including illustrations and screenshots to further emphasize"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "robincyu"
        },
        "content": "user-friendliness."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robincyu"
        },
        "content": "** I used _tips_ and _notes_ to attract the reader\u0027s attention to important points."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robincyu"
        },
        "content": "** I added the user guide sections for issues related to image support."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d\u003d\u003d Developer Guide Contributions"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* *Major contribution*:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robincyu"
        },
        "content": "** I added the developer guide sections for developing code related to image support."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d\u003d Excerpts from the User Guide"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "robincyu"
        },
        "content": "|These are the excerpts of the User Guide that I have contributed. They reflect what I have learned in writing documentation that targets end-users."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "robincyu"
        },
        "content": "include::../UserGuide.adoc[tag\u003dintroduction]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "robincyu"
        },
        "content": "include::../UserGuide.adoc[tag\u003dqs]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d\u003d Excerpts from the Developer Guide"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "robincyu"
        },
        "content": "|These are the excerpts of the Developer Guide that I have contributed. They reflect what I have learned in writing technical documentation and the technical depth of my contributions to the project."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "robincyu"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dimagesupport]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003d\u003d Learning Outcomes"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* Able to work in a team with responsibilities of different part of code"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "robincyu"
        },
        "content": "* Learned how to implement features based on user stories"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "robincyu": 72,
      "-": 26
    }
  },
  {
    "path": "docs/team/sergiovieri.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "\u003d Sergio Vieri - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ":toc-title: Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "image::sergiovieri.png[width\u003d\"200\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003d\u003d PROJECT: Acquizition"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "This project portfolio documents my contributions towards Acquizition, a team project under a software engineering module in NUS, known as CS2103T."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "The purpose of this portfolio is to summarize the features that I have implemented, as well as some excerpts of the User and Developer Guide that I have written."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "Acquizition is a desktop flashcard application for subject revision and language acquisition."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "Using a scientifically-grounded SRS (Spaced Repetition System), Acquizition maximizes memory retention by testing the terms most likely to be forgotten soon."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "Created with JavaFX, Acquizition has a sleek and intuitive GUI (Graphical User Interface) to streamline the experience for new users, but also sports a CLI (Command Line Interface) to maximize the efficiency of power users. It is written in Java and has around 14k lines of code."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* *Major enhancement*: added *the complete quiz mode*, including the full GUI and quiz backend commands. +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "The quiz GUI includes the flashcard card view pane on the right, and the quiz panel on the left. +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "The quiz commands includes `quiz`, `good` feedback, `bad` feedback, and smart command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "** What it does: allows the user to conveniently test and keep track their understanding of the flashcards inside the card collection"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "** Justification:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "*** This feature improves the product significantly as it is the main feature that Acquizition offers."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "*** It can do seamless swapping between the quiz UI and the card collection UI"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "*** It also contains a smart command feature where the user can quickly navigate through the cards without having to type redundant commands."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "*** This enhancement required an in-depth analysis of design alternatives, since the quiz mode needs seamless swapping of the card collection GUI and the quiz mode GUI."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "*** The implementation too was challenging as separation of different modes and interaction of logic and dynamic UI parts is needed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "** Credits: I learned and applied concepts from CS2103T and the existing codebase."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "** Related code: https://github.com/CS2103-AY1819S2-T12-2/main/pull/46[Advanced Quiz Mode], https://github.com/CS2103-AY1819S2-T12-2/main/pull/27[Flashcard Card View]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "** Replaces the menu bar with a much more intuitive toolbar. Since menu bar only supports exit and help, moving it to the toolbar with just those two buttons is more reasonable."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "*** Related code: https://github.com/CS2103-AY1819S2-T12-2/main/pull/49[Toolbar]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "** Modifies the existing person model to flashcard model, including all of its components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "*** Related code: https://github.com/CS2103-AY1819S2-T12-2/main/pull/22[Refactor Flashcard Fields]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "*** Set up Github repository and https://github.com/cs2103-ay1819s2-t12-2/main/issues?utf8\u003d%E2%9C%93\u0026q\u003dis%3Aissue+author%3Asergiovieri[issues]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "*** https://github.com/CS2103-AY1819S2-T12-2/main/pulls?q\u003dis%3Apr+reviewed-by%3Asergiovieri+is%3Aclosed[Reviewed and approved several PRs]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "*** Updated the GUI color scheme"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "** Code contributed: https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#search\u003dSer[Reposense]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "*** Set Up Travis, AppVeyor, Coveralls, and Codacy"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "*** Set Up GithubPages"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "*** Set the minimum requirements for code to be merged to master."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "|These are the excerpts of the User Guide that I have contributed. They reflect what I have learned in writing documentation that targets end-users."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "include::../UserGuide.adoc[tag\u003dquiz]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcommand-summary]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "|These are the excerpts of the Developer Guide that I have contributed. They reflect what I have learned in writing technical documentation and the technical depth of my contributions to the project."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dquiz]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddesign-ui]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003d\u003d Learning Outcomes"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* Able to work in a team with responsibilities of different part of code"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "* Learned how to implement features based on user stories"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lucatriglia": 1,
      "sergiovieri": 51,
      "-": 36
    }
  },
  {
    "path": "flashcards.txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " f/鉅細靡遺 b/Meticulous in both small and large matters t/Idioms t/Chinese"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " f/不懂装懂 b/To pretend to understand t/Idioms t/Chinese"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " f/肆无忌惮 b/Act recklessly without regard for others t/Idioms t/Chinese"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " f/若隱若現 b/Partly hidden and partly visible t/Idioms t/Chinese"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " f/莫名其妙 b/Without rhyme or reason t/Idioms t/Chinese"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " f/滔滔不絕 b/Spout endlessly (of talking) t/Idioms t/Chinese"
      }
    ],
    "authorContributionMap": {
      "lucatriglia": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.CardCollection;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.ReadOnlyCardCollection;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.storage.CardCollectionStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.storage.JsonCardCollectionStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing CardCollection ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        CardCollectionStorage cardCollectionStorage \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            new JsonCardCollectionStorage(userPrefs.getCardCollectionFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        storage \u003d new StorageManager(cardCollectionStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s card collection and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * The data from the sample card collection will be used instead if {@code storage}\u0027s card collection is not found,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * or an empty card collection will be used instead if errors occur when reading {@code storage}\u0027s card collection."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Optional\u003cReadOnlyCardCollection\u003e cardCollectionOptional;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        ReadOnlyCardCollection initialData;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            cardCollectionOptional \u003d storage.readCardCollection();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            if (!cardCollectionOptional.isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample CardCollection\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            initialData \u003d cardCollectionOptional.orElseGet(SampleDataUtil::getSampleCardCollection);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty CardCollection\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            initialData \u003d new CardCollection();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty CardCollection\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            initialData \u003d new CardCollection();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default config properties\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default user prefs\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty CardCollection\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        logger.info(\"Starting CardCollection \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Acquizition ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 23,
      "sergiovieri": 2,
      "-": 163
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final String IMAGE_DIRECTORY \u003d \"images\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    // Config values customizable through config file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 1,
      "sergiovieri": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private static final String LOG_FILE \u003d \"cardcollection.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 2,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format!\\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static final String MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX \u003d \"The flashcard index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public static final String MESSAGE_INVALID_PATH \u003d \"Invalid path!\\n%1$s\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public static final String MESSAGE_FLASHCARDS_LISTED_OVERVIEW \u003d \"%1$d flashcard(s) listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static final String MESSAGE_IMAGE_NOT_FOUND \u003d \"This image is not found in the database.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        + \" Did you forget to import the image?\\n%1$s\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 1,
      "lucatriglia": 1,
      "robincyu": 3,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/QuizState.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " * Contains constants that represents the quiz states."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "public class QuizState {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final int QUIZ_MODE_FRONT \u003d -1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final int QUIZ_MODE_BOTH \u003d 1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final int NOT_QUIZ_MODE \u003d 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sergiovieri": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            versionMatcher.group(4) !\u003d null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 2,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CollectionUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @see #requireAllNonNull(Collection)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 3,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 2,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath                   cannot be null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e      The generic type to create an instance of"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 4,
      "-": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 2,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/CommandHistory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores the history of commands executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cString\u003e userInputHistory \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cString\u003e unmodifiableUserInputHistory \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        FXCollections.unmodifiableObservableList(userInputHistory);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public CommandHistory() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory(CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.addAll(commandHistory.userInputHistory);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code userInput} to the list of user input entered."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String userInput) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.add(userInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of {@code userInputHistory}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return unmodifiableUserInputHistory;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof CommandHistory)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory other \u003d (CommandHistory) obj;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.equals(other.userInputHistory);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 2,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.ReadOnlyCardCollection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns the CardCollection."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @see seedu.address.model.Model#getCardCollection()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    ReadOnlyCardCollection getCardCollection();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of flashcards"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    ObservableList\u003cFlashcard\u003e getFilteredFlashcardList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns the user prefs\u0027 card collection file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    Path getCardCollectionFilePath();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Selected flashcard in the filtered flashcard list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * null if no flashcard is selected."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @see seedu.address.model.Model#selectedFlashcardProperty()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    ReadOnlyProperty\u003cFlashcard\u003e selectedFlashcardProperty();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Current quiz mode. -1 for front face, 1 for back face, 0 for non-quiz mode."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * @see seedu.address.model.Model#quizModeProperty()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    ReadOnlyProperty\u003cInteger\u003e quizModeProperty();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Sets the selected flashcard in the filtered flashcard list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedFlashcard(Flashcard)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    void setSelectedFlashcard(Flashcard flashcard);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Sets the quiz mode"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * @see seedu.address.model.Model#setQuizMode(Integer)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    void setQuizMode(Integer quizMode);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * Sets the Spaced Repetition System Model. mode"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * @see seedu.address.model.Model#setIsQuizSrs(Boolean)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    void setIsQuizSrs(Boolean isQuizSrs);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    ObservableList\u003cFlashcard\u003e getQuizFlashcards();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * @return the number of good feedback in the current quiz"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * @see seedu.address.model.Model#getQuizGood()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    ReadOnlyProperty\u003cInteger\u003e quizGoodProperty();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * @return the number of bad feedback in the current quiz"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * @see seedu.address.model.Model#getQuizBad()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    ReadOnlyProperty\u003cInteger\u003e quizBadProperty();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * @return true if SRS mode activated, else review mode."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * @see seedu.address.model.Model#getIsQuizSrs()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    ReadOnlyProperty\u003cBoolean\u003e isQuizSrsProperty();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 12,
      "robincyu": 19,
      "sergiovieri": 25,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.logic.parser.CardCollectionParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.ReadOnlyCardCollection;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private final CardCollectionParser cardCollectionParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private boolean cardCollectionModified;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        cardCollectionParser \u003d new CardCollectionParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // Set cardCollectionModified to true whenever the models\u0027 card collection is modified."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        model.getCardCollection().addListener(observable -\u003e cardCollectionModified \u003d true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        cardCollectionModified \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            Command command \u003d cardCollectionParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            if (!commandText.trim().isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                history.add(commandText);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (cardCollectionModified) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            logger.info(\"Card collection modified, saving to file.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                storage.saveCardCollection(model.getCardCollection());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public ReadOnlyCardCollection getCardCollection() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return model.getCardCollection();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e getFilteredFlashcardList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e getQuizFlashcards() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return model.getQuizFlashcards();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public Path getCardCollectionFilePath() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return model.getCardCollectionFilePath();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public ReadOnlyProperty\u003cFlashcard\u003e selectedFlashcardProperty() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return model.selectedFlashcardProperty();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public ReadOnlyProperty\u003cInteger\u003e quizModeProperty() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return model.quizModeProperty();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void setSelectedFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        model.setSelectedFlashcard(flashcard);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void setQuizMode(Integer quizMode) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        model.setQuizMode(quizMode);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public void setIsQuizSrs(Boolean isQuizSrs) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        model.setIsQuizSrs(isQuizSrs);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public ReadOnlyProperty\u003cInteger\u003e quizGoodProperty() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return model.getQuizGood();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public ReadOnlyProperty\u003cInteger\u003e quizBadProperty() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return model.getQuizBad();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public ReadOnlyProperty\u003cBoolean\u003e isQuizSrsProperty() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return model.getIsQuizSrs();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 8,
      "robincyu": 23,
      "sergiovieri": 21,
      "-": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BACK_FACE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FRONT_FACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IMAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.commons.core.QuizState;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * Adds a flashcard to the card collection."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a flashcard to the card collection. \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        + PREFIX_FRONT_FACE + \"FRONT_FACE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        + PREFIX_BACK_FACE + \"BACK_FACE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        + \"[\" + PREFIX_IMAGE + \"IMAGE_NAME] \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        + PREFIX_FRONT_FACE + \"Hello \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        + PREFIX_BACK_FACE + \"你好 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        + PREFIX_TAG + \"Chinese \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        + PREFIX_TAG + \"Greetings\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New flashcard added: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARD \u003d \"This flashcard already exists in the card collection\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private static final String MESSAGE_IN_QUIZ \u003d \"Cannot add in quiz mode.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private final Flashcard toAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Flashcard}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public AddCommand(Flashcard flashcard) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        requireNonNull(flashcard);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        toAdd \u003d flashcard;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (model.getQuizMode() !\u003d QuizState.NOT_QUIZ_MODE) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            throw new CommandException(MESSAGE_IN_QUIZ);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (model.hasFlashcard(toAdd)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        model.addFlashcard(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        model.commitCardCollection(AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 1,
      "lucatriglia": 1,
      "robincyu": 20,
      "sergiovieri": 6,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/BadCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " * Bad user feedback"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "public class BadCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bad\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static final String MESSAGE_BAD \u003d \"Too bad. :(\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static final String MESSAGE_FAILURE_NOT_QUIZ_MODE \u003d \"Cannot give feedback outside quiz mode.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (model.getQuizMode() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE_NOT_QUIZ_MODE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        model.addBadFeedback();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (model.getQuizFlashcards().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            return new ExitCommand().execute(model, history);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        model.showNextQuizCard();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return new CommandResult(MESSAGE_BAD);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 2,
      "sergiovieri": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.commons.core.QuizState;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.CardCollection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * Clears the card collection."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Card collection has been cleared!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private static final String MESSAGE_IN_QUIZ \u003d \"Cannot clear in quiz mode.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (model.getQuizMode() !\u003d QuizState.NOT_QUIZ_MODE) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            throw new CommandException(MESSAGE_IN_QUIZ);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        model.setCardCollection(new CardCollection());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        model.commitCardCollection(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 1,
      "robincyu": 4,
      "sergiovieri": 8,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 6,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.commons.core.QuizState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * Deletes a flashcard identified using it\u0027s displayed index from the card collection."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        + \": Deletes the flashcard identified by the index number used in the displayed flashcard list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static final String MESSAGE_DELETE_FLASHCARD_SUCCESS \u003d \"Deleted Flashcard: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private static final String MESSAGE_IN_QUIZ \u003d \"Cannot delete in quiz mode.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (model.getQuizMode() !\u003d QuizState.NOT_QUIZ_MODE) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            throw new CommandException(MESSAGE_IN_QUIZ);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        List\u003cFlashcard\u003e lastShownList \u003d model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Flashcard flashcardToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        model.deleteFlashcard(flashcardToDelete);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        model.commitCardCollection(DeleteCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_FLASHCARD_SUCCESS, flashcardToDelete));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 1,
      "robincyu": 10,
      "sergiovieri": 4,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BACK_FACE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FRONT_FACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IMAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.commons.core.QuizState;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.flashcard.Face;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.ImagePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.model.flashcard.Proficiency;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.model.flashcard.Statistics;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * Edits the details of an existing flashcard in the card collection."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the flashcard identified \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        + \"by the index number used in the displayed flashcard list. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        + \"[\" + PREFIX_FRONT_FACE + \"FRONT_FACE] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        + \"[\" + PREFIX_BACK_FACE + \"BACK_FACE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        + \"[\" + PREFIX_IMAGE + \"IMAGE_NAME] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        + PREFIX_FRONT_FACE + \"你好 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        + PREFIX_BACK_FACE + \"Hello\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static final String MESSAGE_EDIT_FLASHCARD_SUCCESS \u003d \"Edited Flashcard: %1$s\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARD \u003d \"This flashcard already exists in the card collection.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private static final String MESSAGE_IN_QUIZ \u003d \"Cannot edit in quiz mode.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private final EditFlashcardDescriptor editFlashcardDescriptor;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @param index                   of the flashcard in the filtered flashcard list to edit"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @param editFlashcardDescriptor details to edit the flashcard with"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public EditCommand(Index index, EditFlashcardDescriptor editFlashcardDescriptor) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        requireNonNull(editFlashcardDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        this.editFlashcardDescriptor \u003d new EditFlashcardDescriptor(editFlashcardDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Creates and returns a {@code Flashcard} with the details of {@code flashcardToEdit}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * edited with {@code editFlashcardDescriptor}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private static Flashcard createEditedFlashcard(Flashcard flashcardToEdit,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                                   EditFlashcardDescriptor editFlashcardDescriptor) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assert flashcardToEdit !\u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Face updatedFrontFace \u003d editFlashcardDescriptor.getFrontFace().orElse(flashcardToEdit.getFrontFace());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Face updatedBackFace \u003d editFlashcardDescriptor.getBackFace().orElse(flashcardToEdit.getBackFace());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        ImagePath updatedImagePath \u003d editFlashcardDescriptor.getImagePath().orElse(flashcardToEdit.getImagePath());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editFlashcardDescriptor.getTags().orElse(flashcardToEdit.getTags());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Statistics statistics \u003d flashcardToEdit.getStatistics(); // statistics cannot be edited"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Proficiency proficiency \u003d flashcardToEdit.getProficiency(); // proficiency cannot be edited"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return new Flashcard(updatedFrontFace, updatedBackFace, updatedImagePath, statistics, proficiency, updatedTags);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (model.getQuizMode() !\u003d QuizState.NOT_QUIZ_MODE) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            throw new CommandException(MESSAGE_IN_QUIZ);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        List\u003cFlashcard\u003e lastShownList \u003d model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Flashcard flashcardToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Flashcard editedFlashcard \u003d createEditedFlashcard(flashcardToEdit, editFlashcardDescriptor);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (!flashcardToEdit.isSameFlashcard(editedFlashcard) \u0026\u0026 model.hasFlashcard(editedFlashcard)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        model.updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        model.setFlashcard(flashcardToEdit, editedFlashcard);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        model.commitCardCollection(EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_FLASHCARD_SUCCESS, editedFlashcard));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            \u0026\u0026 editFlashcardDescriptor.equals(e.editFlashcardDescriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Stores the details to edit the flashcard with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * corresponding field value of the flashcard."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static class EditFlashcardDescriptor {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        private Face frontFace;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        private Face backFace;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        private ImagePath imagePath;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        public EditFlashcardDescriptor() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        public EditFlashcardDescriptor(EditFlashcardDescriptor toCopy) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            setFrontFace(toCopy.frontFace);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            setBackFace(toCopy.backFace);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            setImagePath(toCopy.imagePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            return CollectionUtil.isAnyNonNull(frontFace, backFace, imagePath, tags);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        public Optional\u003cFace\u003e getFrontFace() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            return Optional.ofNullable(frontFace);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        public void setFrontFace(Face frontFace) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            this.frontFace \u003d frontFace;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        public Optional\u003cFace\u003e getBackFace() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            return Optional.ofNullable(backFace);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        public void setBackFace(Face backFace) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            this.backFace \u003d backFace;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        public Optional\u003cImagePath\u003e getImagePath() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            return Optional.ofNullable(imagePath);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        public void setImagePath(ImagePath imagePath) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            this.imagePath \u003d imagePath;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "         */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        public boolean equals(Object o) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            if (!(o instanceof EditFlashcardDescriptor)) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            EditFlashcardDescriptor that \u003d (EditFlashcardDescriptor) o;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            // Due to the strange nature of constructing these, it is necessary"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            // to check if the image path actually points to a valid image when"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            // comparing edit commands."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            if (!getImagePath().isPresent() \u0026\u0026 !that.getImagePath().isPresent()) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                return getFrontFace().equals(that.getFrontFace())"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                    \u0026\u0026 getBackFace().equals(that.getBackFace())"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                    \u0026\u0026 getTags().equals(that.getTags());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            } else if (getImagePath().isPresent() \u0026\u0026 !that.getImagePath().isPresent()) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                if (getImagePath().get().hasImagePath()) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                    return getFrontFace().equals(that.getFrontFace())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                        \u0026\u0026 getBackFace().equals(that.getBackFace())"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                        \u0026\u0026 getTags().equals(that.getTags());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            } else if (!getImagePath().isPresent() \u0026\u0026 that.getImagePath().isPresent()) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                if (!that.getImagePath().get().hasImagePath()) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                    return getFrontFace().equals(that.getFrontFace())"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                        \u0026\u0026 getBackFace().equals(that.getBackFace())"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                        \u0026\u0026 getTags().equals(that.getTags());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                return getFrontFace().equals(that.getFrontFace())"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                    \u0026\u0026 getBackFace().equals(that.getBackFace())"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                    \u0026\u0026 getImagePath().equals(that.getImagePath())"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                    \u0026\u0026 getTags().equals(that.getTags());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        public int hashCode() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            return Objects.hash(getFrontFace(), getBackFace(), getImagePath(), getTags());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 6,
      "robincyu": 72,
      "sergiovieri": 50,
      "-": 121
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final String MESSAGE_EXIT_QUIZ \u003d \"Quiz mode ended. You got %s/%s correct!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Acquizition as requested ...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (model.getQuizMode() !\u003d 0) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            model.setQuizMode(0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            model.setSelectedFlashcard(null);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            model.commitCardCollection(QuizCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                String.format(MESSAGE_EXIT_QUIZ,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                    String.valueOf(model.getQuizGood().getValue()),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                    String.valueOf(model.getQuizGood().getValue() + model.getQuizBad().getValue())));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 1,
      "sergiovieri": 10,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BACK_FACE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FRONT_FACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUCCESS_RATE_RANGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.commons.core.QuizState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.model.flashcard.FlashcardPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " * Finds and lists all flashcards which contain any of the argument keywords AND which are within"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " * a specified success rate range. Keyword matching is case insensitive."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all flashcards which contain any of \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            + \"the specified keywords (case-insensitive) AND which are within a specified success rate range. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            + \"displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            + \"[\" + PREFIX_FRONT_FACE + \"FRONTFACE] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            + \"[\" + PREFIX_BACK_FACE + \"BACKFACE] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            + \"[\" + PREFIX_SUCCESS_RATE_RANGE + \"SUCCESS_RATE_RANGE]\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            + PREFIX_FRONT_FACE + \"Hello Ciao \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            + PREFIX_BACK_FACE + \"Hola \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            + PREFIX_TAG + \"Chinese \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            + PREFIX_TAG + \"Spanish \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            + PREFIX_SUCCESS_RATE_RANGE + \"0 50\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private static final String MESSAGE_IN_QUIZ \u003d \"Cannot find in quiz mode.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    private final FlashcardPredicate predicate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public FindCommand(FlashcardPredicate predicate) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (model.getQuizMode() !\u003d QuizState.NOT_QUIZ_MODE) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            throw new CommandException(MESSAGE_IN_QUIZ);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        model.updateFilteredFlashcardList(predicate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                String.format(Messages.MESSAGE_FLASHCARDS_LISTED_OVERVIEW, model.getFilteredFlashcardList().size()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 3,
      "lucatriglia": 21,
      "robincyu": 3,
      "sergiovieri": 6,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GoodCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " * Good user feedback"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "public class GoodCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"good\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final String MESSAGE_GOOD \u003d \"Great!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static final String MESSAGE_FAILURE_NOT_QUIZ_MODE \u003d \"Cannot give feedback outside quiz mode.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (model.getQuizMode() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE_NOT_QUIZ_MODE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        model.addGoodFeedback();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (model.getQuizFlashcards().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            return new ExitCommand().execute(model, history);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        model.showNextQuizCard();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return new CommandResult(MESSAGE_GOOD);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 1,
      "sergiovieri": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ImageCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robincyu"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.commons.core.Config.IMAGE_DIRECTORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.io.OutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * Imports an image into the working directory."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robincyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public class ImageCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"image\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Imports an image into the working directory. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        + \"FILEPATH \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        + \"C:\\\\Users\\\\Alice\\\\Desktop\\\\lasagna.png\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Image %s successfully imported into: %s.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static final String MESSAGE_INVALID_FILE \u003d \"Image %s not found!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_NAME \u003d \"Image with filename %s already exists in working directory.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static final String MESSAGE_IMPORT_FAIL \u003d \"Failed to import the image. Please check your permissions.\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        + \"settings.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private final File toImport;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Creates an ImageCommand to import the specified image from {@code File}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public ImageCommand(File file) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        toImport \u003d file;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        String fileName \u003d toImport.getName();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Path imageDirectory \u003d Paths.get(IMAGE_DIRECTORY);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        File workingDirectoryFile \u003d imageDirectory.resolve(fileName).toFile();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (workingDirectoryFile.exists()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_NAME, fileName));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        imageDirectory.toFile().mkdirs();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        //make a copy of the image"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            InputStream inputStream \u003d new FileInputStream(toImport);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            OutputStream outputStream \u003d new FileOutputStream(workingDirectoryFile);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            byte[] buffer \u003d new byte[1024];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            int length;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            while ((length \u003d inputStream.read(buffer)) \u003e 0) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                outputStream.write(buffer, 0, length);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            outputStream.flush();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            inputStream.close();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            outputStream.close();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            //ImageCommandParser should have already made this check;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            //so this should not be possible. But use redundancy for defensive coding"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_FILE, toImport));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        } catch (IOException | NullPointerException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            throw new CommandException(MESSAGE_IMPORT_FAIL);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toImport, workingDirectoryFile));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "robincyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 78,
      "sergiovieri": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ImportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.logic.parser.AddCommandParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " * Appends a data file containing flashcards to the current data file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "public class ImportCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds flashcards from a text file to the existing \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        + \"collection. \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        + \"FILE_PATH\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static final String MESSAGE_IMPORT_SUCCESS \u003d \" flashcards successfully imported from files.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public static final String MESSAGE_IMPORT_PARTIAL_SUCCESS_INFO \u003d \"*Unsuccessfully imported flashcards may \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            + \"have already existed locally OR may be corrupted*\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public static final String MESSAGE_IMPORT_ERROR \u003d \"Unable to import flashcards from \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    private final File toImport;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "     * Creates an ImportCommand to upload the specified flashcards from {@code File}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public ImportCommand(File toImport) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        requireNonNull(toImport);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        this.toImport \u003d toImport;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        Pair\u003cInteger, Integer\u003e result \u003d importCards(model, history);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        int numSuccessfullyImported \u003d result.getKey();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        int totalFlashcardsRead \u003d result.getValue();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        if (numSuccessfullyImported \u003d\u003d totalFlashcardsRead) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            return new CommandResult(\"ALL\" + MESSAGE_IMPORT_SUCCESS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            String numSuccessful \u003d numSuccessfullyImported + \" out of \" + totalFlashcardsRead;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            return new CommandResult(String.format(numSuccessful + MESSAGE_IMPORT_SUCCESS + \" %s\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                    toImport.getAbsolutePath() + \"\\n\" + MESSAGE_IMPORT_PARTIAL_SUCCESS_INFO));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "     * Reads flashcard declarations from {@code File} and uses the {@code AddCommand} to"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "     * import these cards locally."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "     * Returns the number of flashcards successfully imported and the total number of flashcards read"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    private Pair importCards(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        int numSuccessfullyImported \u003d 0;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        int totalFlashcardsRead \u003d 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new FileReader(toImport));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            String flashcardToAdd;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            while ((flashcardToAdd \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                totalFlashcardsRead++;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                    AddCommand command \u003d parser.parse(flashcardToAdd);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                    command.execute(model, history);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                    numSuccessfullyImported++;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                    logger.info(\"Exception from adding flashcard using import command\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            logger.warning(\"IO failure reading from file \" + toImport.getName());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_IMPORT_ERROR, toImport.getAbsolutePath()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        return new Pair(numSuccessfullyImported, totalFlashcardsRead);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucatriglia": 92,
      "robincyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.commons.core.QuizState;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * Lists all flashcards in the card collection to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all flashcards.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static final String MESSAGE_EMPTY \u003d \"Nothing to show.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private static final String MESSAGE_IN_QUIZ \u003d \"Cannot list in quiz mode.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (model.getQuizMode() !\u003d QuizState.NOT_QUIZ_MODE) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            throw new CommandException(MESSAGE_IN_QUIZ);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        model.updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return new CommandResult(model.getFilteredFlashcardList().size() \u003e 0 ? MESSAGE_SUCCESS : MESSAGE_EMPTY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 1,
      "robincyu": 6,
      "sergiovieri": 6,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/QuizCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.commons.core.QuizState;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " * Enters quiz mode"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "public class QuizCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"quiz\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public static final String REVIEW_MODE \u003d \"review\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public static final String SRS_MODE \u003d \"srs\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static final String MESSAGE_QUIZ_REVIEW_START \u003d \"Review mode started. Good luck! :)\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static final String MESSAGE_QUIZ_SRS_START \u003d \"Quiz mode started. Good luck! :)\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static final String MESSAGE_QUIZ_NO_SCHEDULED_CARD \u003d \"You have done well! There are no cards to review, \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            + \"come back later.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static final String MESSAGE_QUIZ_FAILURE_EMPTY \u003d \"Cannot start quiz mode on empty list.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static final String MESSAGE_QUIZ_FAILURE_UNKNOWN_MODE \u003d \"Cannot start quiz mode on empty list.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static final String MESSAGE_QUIZ_FAILURE_IN_QUIZ \u003d \"Already in quiz mode.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public final boolean isQuizSrs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public QuizCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        this.isQuizSrs \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public QuizCommand(boolean isQuizSrs) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        this.isQuizSrs \u003d isQuizSrs;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private List\u003cFlashcard\u003e getShuffledFlashCards(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Random random \u003d new Random();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        List\u003cFlashcard\u003e filteredFlashcardList \u003d model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        ArrayList\u003cFlashcard\u003e quizCards \u003d new ArrayList\u003c\u003e(filteredFlashcardList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        quizCards.sort((Flashcard card1, Flashcard card2) -\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            double successRate1 \u003d card1.getStatistics().getSuccessRate();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            double successRate2 \u003d card2.getStatistics().getSuccessRate();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            if (successRate1 \u003c successRate2) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            } else if (successRate1 \u003e successRate2) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                return random.nextInt(2) \u003d\u003d 1 ? -1 : 1;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        });"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return quizCards;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private List\u003cFlashcard\u003e getSrsFlashCards(List\u003cFlashcard\u003e cards) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return cards.stream()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                .filter(Flashcard::isIncludedInCurrentQuiz)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (model.getQuizMode() !\u003d QuizState.NOT_QUIZ_MODE) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            throw new CommandException(MESSAGE_QUIZ_FAILURE_IN_QUIZ);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        List\u003cFlashcard\u003e quizCards \u003d getShuffledFlashCards(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (quizCards.isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            throw new CommandException(MESSAGE_QUIZ_FAILURE_EMPTY);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        if (isQuizSrs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            quizCards \u003d getSrsFlashCards(quizCards);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            if (quizCards.isEmpty()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                return new CommandResult(MESSAGE_QUIZ_NO_SCHEDULED_CARD);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        model.resetQuizStat();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        model.setQuizFlashcards(FXCollections.observableArrayList(quizCards));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        model.setIsQuizSrs(this.isQuizSrs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        model.setQuizMode(QuizState.QUIZ_MODE_FRONT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        model.showNextQuizCard();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        String messageStart;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        if (this.isQuizSrs) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            messageStart \u003d MESSAGE_QUIZ_SRS_START;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            messageStart \u003d MESSAGE_QUIZ_REVIEW_START;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return new CommandResult(messageStart);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                || (other instanceof QuizCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                \u0026\u0026 isQuizSrs \u003d\u003d ((QuizCommand) other).isQuizSrs);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 44,
      "robincyu": 7,
      "sergiovieri": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.commons.core.QuizState;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * Reverts the {@code model}\u0027s card collection to its previously undone state."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            + \"Redo %s command\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private static final String MESSAGE_IN_QUIZ \u003d \"Cannot redo in quiz mode.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (model.getQuizMode() !\u003d QuizState.NOT_QUIZ_MODE) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            throw new CommandException(MESSAGE_IN_QUIZ);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (!model.canRedoCardCollection()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        String commandText \u003d model.redoCardCollection();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        model.updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, commandText));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 4,
      "robincyu": 5,
      "sergiovieri": 4,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.commons.core.QuizState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * Selects a flashcard identified using it\u0027s displayed index from the card collection."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        + \": Selects the flashcard identified by the index number used in the displayed flashcard list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public static final String MESSAGE_SELECT_FLASHCARD_SUCCESS \u003d \"Selected Flashcard: %1$s, %2$.2f%% success.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        + \"SRS Status: %3$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private static final String MESSAGE_IN_QUIZ \u003d \"Cannot select in quiz mode.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (model.getQuizMode() !\u003d QuizState.NOT_QUIZ_MODE) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            throw new CommandException(MESSAGE_IN_QUIZ);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        List\u003cFlashcard\u003e filteredFlashcardList \u003d model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredFlashcardList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Flashcard flashcard \u003d filteredFlashcardList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        model.setSelectedFlashcard(flashcard);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_FLASHCARD_SUCCESS, targetIndex.getOneBased(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            flashcard.getSuccessRate(), flashcard.getQuizSrsStatus()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 5,
      "robincyu": 7,
      "sergiovieri": 5,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ShareCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BACK_FACE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FRONT_FACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.commons.core.QuizState;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " * Creates a text file consisting of a set of flashcards which contain any of the argument keywords."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "public class ShareCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"share\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public static final String FILE_NAME \u003d \"flashcards.txt\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates a text file containing flashcards currently \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            + \"being listed to a user defined directory.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            + \"DIRECTORY_PATH\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public static final String MESSAGE_SHARE_SUCCESS \u003d \"Successfully created \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final String MESSAGE_SHARE_FAILURE \u003d \"Could not create file at %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public static final String MESSAGE_SHARE_FAILURE_EMPTY_LIST \u003d \"Cannot share an empty list \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private static final String MESSAGE_IN_QUIZ \u003d \"Cannot share in quiz mode.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    private String path;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public ShareCommand (String path) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (model.getQuizMode() !\u003d QuizState.NOT_QUIZ_MODE) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            throw new CommandException(MESSAGE_IN_QUIZ);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        List\u003cFlashcard\u003e flashcardsToShare \u003d model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        if (flashcardsToShare.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            throw new CommandException(MESSAGE_SHARE_FAILURE_EMPTY_LIST);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        String fileName \u003d Paths.get(path).resolve(FILE_NAME).toFile().toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        boolean isSuccessful \u003d generateFile(flashcardsToShare, fileName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        if (isSuccessful) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            return new CommandResult(MESSAGE_SHARE_SUCCESS + fileName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_SHARE_FAILURE, path));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "     * Creates a text file with the details of {@code flashcardsToShare}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private boolean generateFile(List\u003cFlashcard\u003e flashcardsToShare, String fileName) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        final boolean isSuccessful \u003d true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        try (BufferedWriter bw \u003d new BufferedWriter(new FileWriter(fileName))) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            StringBuilder lineToAdd;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            for (Flashcard flashcard : flashcardsToShare) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                lineToAdd \u003d new StringBuilder(\" \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                //Front Face"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                lineToAdd.append(PREFIX_FRONT_FACE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                lineToAdd.append(flashcard.getFrontFace().text);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                lineToAdd.append(\" \");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                //Back Face"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                lineToAdd.append(PREFIX_BACK_FACE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                lineToAdd.append(flashcard.getBackFace().text);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                lineToAdd.append(\" \");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                //Tag"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                for (Tag tag : flashcard.getTags()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                    lineToAdd.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                    lineToAdd.append(tag.tagName);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                    lineToAdd.append(\" \");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                //Remove last char"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                lineToAdd.setLength(lineToAdd.length() - 1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                lineToAdd.append(System.getProperty(\"line.separator\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                bw.write(lineToAdd.toString());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            logger.warning(\"IO failure creating file \" + FILE_NAME);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            return !isSuccessful;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        return isSuccessful;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucatriglia": 98,
      "robincyu": 1,
      "sergiovieri": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ShowCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.commons.core.QuizState;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " * Shows the back face of a flashcard in quiz mode."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "public class ShowCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"show\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final String MESSAGE_SHOW \u003d \"Back face shown\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static final String MESSAGE_FAILURE_NOT_QUIZ_MODE \u003d \"Cannot show card outside quiz mode.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (model.getQuizMode() \u003d\u003d QuizState.NOT_QUIZ_MODE) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE_NOT_QUIZ_MODE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        model.setQuizMode(QuizState.QUIZ_MODE_BOTH);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return new CommandResult(MESSAGE_SHOW);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 1,
      "sergiovieri": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SmartCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.commons.core.QuizState;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " * A smart command. This command will execute a show command when in quiz mode and back face is not yet shown,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " * and execute a good command when in quiz mode and back face is already shown."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "public class SmartCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private static final String MESSAGE_FAILURE \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (model.getQuizMode() \u003d\u003d QuizState.QUIZ_MODE_FRONT) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            return new ShowCommand().execute(model, history);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        } else if (model.getQuizMode() \u003d\u003d QuizState.QUIZ_MODE_BOTH) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            return new GoodCommand().execute(model, history);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sergiovieri": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/StatsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lungsin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BACK_FACE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FRONT_FACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.commons.core.QuizState;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.model.flashcard.FlashcardPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.model.flashcard.Statistics;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lungsin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lungsin"
        },
        "content": " * Display the success rate of the past quiz mode. Keyword matching is case insensitive."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lungsin"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lungsin"
        },
        "content": "public class StatsCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stats\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public static final String MESSAGE_STATISTICS_FORMAT \u003d \"Success rate: %.2f %%.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Display the success rate of all flashcards which \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            + \"contains any of the specified keywords (case-insensitive) based on prefix. If no keywords is specified, \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            + \"this command will display the success rate of flashcards in the current list.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            + \"[\" + PREFIX_FRONT_FACE + \"FRONTFACE] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            + \"[\" + PREFIX_BACK_FACE + \"BACKFACE] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            + PREFIX_FRONT_FACE + \"Hello Ciao \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            + PREFIX_BACK_FACE + \"Hola \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            + PREFIX_TAG + \"Chinese \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            + PREFIX_TAG + \"Spanish \\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private static final String MESSAGE_IN_QUIZ \u003d \"Cannot stats in quiz mode.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    private final Optional\u003cFlashcardPredicate\u003e optPredicate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * Creates a StatsCommand to display the success rate of current filtered flashcards list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public StatsCommand() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        optPredicate \u003d Optional.empty();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * Creates a StatsCommand with a predicate. The predicate will be used to filter the entire flashcards list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public StatsCommand(FlashcardPredicate predicate) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        this.optPredicate \u003d Optional.of(predicate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (model.getQuizMode() !\u003d QuizState.NOT_QUIZ_MODE) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            throw new CommandException(MESSAGE_IN_QUIZ);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        optPredicate.ifPresent(model::updateFilteredFlashcardList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        List\u003cFlashcard\u003e filteredPersonList \u003d model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Statistics cumulativeStats \u003d new Statistics();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        for (Flashcard flashcard : filteredPersonList) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            cumulativeStats \u003d cumulativeStats.merge(flashcard.getStatistics());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        double successRate \u003d cumulativeStats.getSuccessRate();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        double percentageSuccessRate \u003d successRate * 100;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_STATISTICS_FORMAT, percentageSuccessRate));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                || (other instanceof StatsCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                \u0026\u0026 optPredicate.equals(((StatsCommand) other).optPredicate));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lungsin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 77,
      "lucatriglia": 3,
      "robincyu": 1,
      "sergiovieri": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.commons.core.QuizState;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * Reverts the {@code model}\u0027s card collection to its previous state."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            + \"Undo %s command\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private static final String MESSAGE_IN_QUIZ \u003d \"Cannot undo in quiz mode.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (model.getQuizMode() !\u003d QuizState.NOT_QUIZ_MODE) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            throw new CommandException(MESSAGE_IN_QUIZ);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (!model.canUndoCardCollection()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        String commandText \u003d model.undoCardCollection();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        model.updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, commandText));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 4,
      "robincyu": 5,
      "sergiovieri": 4,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.commons.core.Config.IMAGE_DIRECTORY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_IMAGE_NOT_FOUND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BACK_FACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FRONT_FACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IMAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.flashcard.Face;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.ImagePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.model.flashcard.Proficiency;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.model.flashcard.Statistics;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_FRONT_FACE, PREFIX_BACK_FACE, PREFIX_IMAGE, PREFIX_TAG);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_FRONT_FACE, PREFIX_BACK_FACE)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Face frontFace \u003d ParserUtil.parseFace(argMultimap.getValue(PREFIX_FRONT_FACE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Face backFace \u003d ParserUtil.parseFace(argMultimap.getValue(PREFIX_BACK_FACE).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Optional\u003cString\u003e imageFileName \u003d argMultimap.getValue(PREFIX_IMAGE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        ImagePath imagePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (imageFileName.isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            Path imageDirectoryPath \u003d Paths.get(IMAGE_DIRECTORY);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            Path imageFileNamePath \u003d Paths.get(imageFileName.get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            if (!Files.exists(imageDirectoryPath.resolve(imageFileNamePath))) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_IMAGE_NOT_FOUND, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            imagePath \u003d new ImagePath(Optional.of((imageDirectoryPath.resolve(imageFileNamePath)).toString()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            if (!imagePath.imageExistsAtPath()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_IMAGE_NOT_FOUND, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            imagePath \u003d new ImagePath();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Statistics statistics \u003d new Statistics(0, 0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Proficiency proficiency \u003d new Proficiency(Calendar.getInstance(), 0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Flashcard flashcard \u003d new Flashcard(frontFace, backFace, imagePath, statistics, proficiency, tagList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return new AddCommand(flashcard);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 6,
      "robincyu": 27,
      "sergiovieri": 6,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Prefixes mapped to their respective arguments"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 3,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CardCollectionParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.logic.commands.BadCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.logic.commands.GoodCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.logic.commands.ImageCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.logic.commands.QuizCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.logic.commands.ShareCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.logic.commands.ShowCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.logic.commands.SmartCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public class CardCollectionParser {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (userInput.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            return new SmartCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        switch (commandWord.toLowerCase()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        case ImageCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            return new ImageCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        case ShareCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            return new ShareCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        case ImportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            return new ImportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        case StatsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            return new StatsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        case QuizCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            return new QuizCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        case GoodCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            return new GoodCommand();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        case BadCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            return new BadCommand();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        case ShowCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            return new ShowCommand();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        case SmartCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            return new SmartCommand();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 6,
      "lucatriglia": 8,
      "robincyu": 5,
      "sergiovieri": 23,
      "-": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final Prefix PREFIX_FRONT_FACE \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final Prefix PREFIX_BACK_FACE \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static final Prefix PREFIX_IMAGE \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public static final Prefix PREFIX_SUCCESS_RATE_RANGE \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucatriglia": 1,
      "robincyu": 1,
      "sergiovieri": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 1,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.commons.core.Config.IMAGE_DIRECTORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_IMAGE_NOT_FOUND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BACK_FACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FRONT_FACE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IMAGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditFlashcardDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.ImagePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_FRONT_FACE, PREFIX_BACK_FACE, PREFIX_IMAGE, PREFIX_TAG);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        EditFlashcardDescriptor editFlashcardDescriptor \u003d new EditFlashcardDescriptor();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (argMultimap.getValue(PREFIX_FRONT_FACE).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            editFlashcardDescriptor.setFrontFace(ParserUtil.parseFace(argMultimap.getValue(PREFIX_FRONT_FACE).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (argMultimap.getValue(PREFIX_BACK_FACE).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            editFlashcardDescriptor.setBackFace(ParserUtil.parseFace(argMultimap.getValue(PREFIX_BACK_FACE).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_IMAGE).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            String imageFileName \u003d argMultimap.getValue(PREFIX_IMAGE).get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            if (imageFileName.equals(\"\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                editFlashcardDescriptor.setImagePath(new ImagePath(Optional.empty()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                Path imageDirectoryPath \u003d Paths.get(IMAGE_DIRECTORY);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                Path imageFileNamePath \u003d Paths.get(imageFileName);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                if (!Files.exists(imageDirectoryPath.resolve(imageFileNamePath))) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_IMAGE_NOT_FOUND, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                ImagePath imagePath \u003d new ImagePath(Optional.of((imageDirectoryPath.resolve(imageFileNamePath))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                    .toString()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                if (!imagePath.imageExistsAtPath()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_IMAGE_NOT_FOUND, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                editFlashcardDescriptor.setImagePath(imagePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editFlashcardDescriptor::setTags);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (!editFlashcardDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return new EditCommand(index, editFlashcardDescriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 31,
      "sergiovieri": 6,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return new FindCommand(ParserUtil.filterByKeyword(args, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 1,
      "robincyu": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ImageCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robincyu"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.logic.commands.ImageCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * Parses input arguments and creates a new UploadCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public class ImageCommandParser implements Parser\u003cImageCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static final String PATH_MESSAGE_CONSTRAINT \u003d \"File not found.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static final String FILE_MESSAGE_CONSTRAINT \u003d \"File should be an image file.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Checks whether an image exists at the given path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private boolean fileIsValidImage(File file) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            BufferedImage imageRead \u003d ImageIO.read(file);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            if (imageRead \u003d\u003d null) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                throw new IOException();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UploadCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * and returns an UploadCommand object for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public ImageCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImageCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        File file \u003d new File(trimmedArgs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (file.isDirectory() || !file.exists()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            throw new ParseException(PATH_MESSAGE_CONSTRAINT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (!fileIsValidImage(file)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            throw new ParseException(FILE_MESSAGE_CONSTRAINT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return new ImageCommand(file);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robincyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ImportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PATH;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " * Parses input arguments and creates a new ImportCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ImportCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "     * and returns an ImportCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public ImportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        String path \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        File file \u003d new File(path);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        if (!file.exists() || file.isDirectory() || !path.endsWith(\".txt\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_PATH, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        return new ImportCommand(file);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucatriglia": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BACK_FACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FRONT_FACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUCCESS_RATE_RANGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.flashcard.Face;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.model.flashcard.FlashcardPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public static final double MIN_BOUND \u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public static final double MAX_BOUND \u003d 100;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public static final String MESSAGE_INVALID_RANGE_FORMAT \u003d \"The success rate range must be two numbers separated\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            + \" by a space.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public static final String MESSAGE_INVALID_RANGE \u003d \"The success rate range must be between 0 to 100 (inclusive).\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            + \" The first number must not be greater than the second.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Parses a {@code String face} into an {@code Face}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * @throws ParseException if the given {@code face} is invalid."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static Face parseFace(String face) throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        requireNonNull(face);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        String trimmedFace \u003d face.trim();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (!Face.isValidFace(trimmedFace)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            throw new ParseException(Face.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return new Face(trimmedFace);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e faces} into a {@code Set\u003cFace\u003e}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public static Set\u003cFace\u003e parseFaces(Collection\u003cString\u003e faces) throws ParseException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        requireNonNull(faces);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        final Set\u003cFace\u003e faceSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        for (String faceText : faces) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            faceSet.add(parseFace(faceText));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        return faceSet;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "     * Parses a {@code String range} into an {@code Array}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "     * @throws ParseException if the given {@code range} is invalid."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public static double[] parseStatRange(String range) throws ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        requireNonNull(range);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        String trimmedRange \u003d range.trim();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        double lowerBound;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        double upperBound;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        if (trimmedRange.isEmpty()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_RANGE_FORMAT);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        String[] rangeBounds \u003d trimmedRange.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        if (rangeBounds.length !\u003d 2) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_RANGE_FORMAT);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        } else if (!rangeBounds[0].matches(\"-?\\\\d+(\\\\.\\\\d+)?\")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                || !rangeBounds[1].matches(\"-?\\\\d+(\\\\.\\\\d+)?\")) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_RANGE_FORMAT);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            lowerBound \u003d Double.parseDouble(rangeBounds[0]);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            upperBound \u003d Double.parseDouble(rangeBounds[1]);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            if (lowerBound \u003c MIN_BOUND || upperBound \u003e MAX_BOUND || lowerBound \u003e upperBound) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_RANGE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        double[] parsedRange \u003d {lowerBound, upperBound};"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        return parsedRange;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "     * Parses the given {@code String} of arguments and returns a FlashcardPredicate"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * object."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    static FlashcardPredicate filterByKeyword(String args, String messageUsage) throws ParseException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_FRONT_FACE, PREFIX_BACK_FACE, PREFIX_TAG,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                PREFIX_SUCCESS_RATE_RANGE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_FRONT_FACE) \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_BACK_FACE)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_TAG)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_SUCCESS_RATE_RANGE)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, messageUsage));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Set\u003cFace\u003e frontFaceKeywordSet \u003d ParserUtil.parseFaces(argMultimap.getAllValues(PREFIX_FRONT_FACE));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Set\u003cFace\u003e backFaceKeywordSet \u003d ParserUtil.parseFaces(argMultimap.getAllValues(PREFIX_BACK_FACE));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Set\u003cTag\u003e tagKeywordSet \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        double[] statRange \u003d ParserUtil.parseStatRange(argMultimap.getValue(PREFIX_SUCCESS_RATE_RANGE).isPresent()"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                ? argMultimap.getValue(PREFIX_SUCCESS_RATE_RANGE).get() : MIN_BOUND + \" \" + MAX_BOUND);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        ArrayList\u003cString\u003e frontFaceKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        ArrayList\u003cString\u003e backFaceKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        ArrayList\u003cString\u003e tagKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        for (Face frontFace : frontFaceKeywordSet) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            String[] frontFaceTextSplit \u003d frontFace.text.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            frontFaceKeywords.addAll(Arrays.asList(frontFaceTextSplit));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        for (Face backFace : backFaceKeywordSet) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            String[] backFaceTextSplit \u003d backFace.text.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            backFaceKeywords.addAll(Arrays.asList(backFaceTextSplit));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        for (Tag tag : tagKeywordSet) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            tagKeywords.add(tag.tagName);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        return new FlashcardPredicate(frontFaceKeywords, backFaceKeywords, tagKeywords, statRange);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 44,
      "lucatriglia": 52,
      "robincyu": 1,
      "sergiovieri": 9,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/QuizCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lungsin"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.logic.commands.QuizCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lungsin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lungsin"
        },
        "content": " * Parses input arguments and creates a new QuizCommand object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lungsin"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lungsin"
        },
        "content": "public class QuizCommandParser implements Parser\u003cQuizCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StatsCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * and returns an QuizCommand object for execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public QuizCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        if (args.trim().isEmpty()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            return new QuizCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        switch (args.trim().toLowerCase()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        case \"review\":"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            return new QuizCommand(false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        case \"srs\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            return new QuizCommand(true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            throw new ParseException(QuizCommand.MESSAGE_QUIZ_FAILURE_UNKNOWN_MODE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lungsin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SelectCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new SelectCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParser implements Parser\u003cSelectCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an SelectCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 1,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ShareCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PATH;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.logic.commands.ShareCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " * Parses input arguments and creates a new ShareCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "public class ShareCommandParser implements Parser\u003cShareCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ShareCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "     * and returns an ShareCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public ShareCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        String path \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        File directory \u003d new File(path);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        if (!directory.exists() || !directory.isDirectory()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_PATH, ShareCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        return new ShareCommand(path);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucatriglia": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/StatsCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lungsin"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lungsin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lungsin"
        },
        "content": " * Parses input arguments and creates a new StatsCommand object"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lungsin"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lungsin"
        },
        "content": "public class StatsCommandParser implements Parser\u003cStatsCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StatsCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * and returns an StatsCommand object for execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public StatsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        if (args.trim().isEmpty()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            return new StatsCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return new StatsCommand(ParserUtil.filterByKeyword(args, StatsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lungsin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/CardCollection.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robincyu"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.UniqueFlashcardList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robincyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " * Wraps all data at the card-collection level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * Duplicates are not allowed (by .isSameFlashcard comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public class CardCollection implements ReadOnlyCardCollection {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private final UniqueFlashcardList flashcards;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        flashcards \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public CardCollection() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Creates an CardCollection using the Flashcards in the {@code toBeCopied}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public CardCollection(ReadOnlyCardCollection toBeCopied) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Replaces the contents of the flashcard list with {@code flashcards}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * {@code flashcards} must not contain duplicate flashcards."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void setFlashcards(List\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        this.flashcards.setFlashcards(flashcards);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Resets the existing data of this {@code CardCollection} with {@code newData}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void resetData(ReadOnlyCardCollection newData) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        setFlashcards(newData.getFlashcardList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    //// flashcard-level operations"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns true if a flashcard with the same identity as {@code flashcard} exists in the card collection."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        requireNonNull(flashcard);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return flashcards.contains(flashcard);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Adds a flashcard to the card collection."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * The flashcard must not already exist in the card collection."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void addFlashcard(Flashcard p) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        flashcards.add(p);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Replaces the given flashcard {@code target} in the list with {@code editedFlashcard}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * {@code target} must exist in the card collection."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * The flashcard identity of {@code editedFlashcard} must not be the same as another existing flashcard in the card"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * collection."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        requireNonNull(editedFlashcard);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        flashcards.setFlashcard(target, editedFlashcard);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Removes {@code key} from this {@code CardCollection}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * {@code key} must exist in the card collection."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void removeFlashcard(Flashcard key) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        flashcards.remove(key);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Notifies listeners that the card collection has been modified."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return flashcards.asUnmodifiableObservableList().size() + \" flashcards\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e getFlashcardList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return flashcards.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            || (other instanceof CardCollection // instanceof handles nulls"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            \u0026\u0026 flashcards.equals(((CardCollection) other).flashcards));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return flashcards.hashCode();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "robincyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 145,
      "sergiovieri": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    Predicate\u003cFlashcard\u003e PREDICATE_SHOW_ALL_FLASHCARDS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns the user prefs\u0027 card collection file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    Path getCardCollectionFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Sets the user prefs\u0027 card collection file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    void setCardCollectionFilePath(Path cardCollectionFilePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Replaces card collection data with the data in {@code cardCollection}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    void setCardCollection(ReadOnlyCardCollection cardCollection);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns the CardCollection"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    ReadOnlyCardCollection getCardCollection();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns true if a flashcard with the same identity as {@code flashcard} exists in the card collection."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    boolean hasFlashcard(Flashcard flashcard);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Deletes the given flashcard."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * The flashcard must exist in the card collection."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    void deleteFlashcard(Flashcard target);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Adds the given flashcard."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * {@code flashcard} must not already exist in the card collection."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    void addFlashcard(Flashcard flashcard);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Replaces the given flashcard {@code target} with {@code editedFlashcard}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * {@code target} must exist in the card collection."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * The flashcard identity of {@code editedFlashcard} must not be the same as another existing flashcard in the card"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * collection."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    void setFlashcard(Flashcard target, Flashcard editedFlashcard);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns an unmodifiable view of the filtered flashcard list"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    ObservableList\u003cFlashcard\u003e getFilteredFlashcardList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Updates the filter of the filtered flashcard list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    void updateFilteredFlashcardList(Predicate\u003cFlashcard\u003e predicate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns true if the model has previous card collection states to restore."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    boolean canUndoCardCollection();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns true if the model has undone card collection states to restore."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    boolean canRedoCardCollection();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Restores the model\u0027s card collection to its previous state."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * @return  the command that makes change before and after undo."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    String undoCardCollection();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Restores the model\u0027s card collection to its previously undone state."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * @return  the command that makes change before and after redo."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    String redoCardCollection();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * Saves the current card collection state for undo/redo."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * @param command the command that makes the change."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    void commitCardCollection(String command);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Saves the current card collection state for undo/redo."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    void commitCardCollection();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Selected flashcard in the filtered flashcard list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * null if no flashcard is selected."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    ReadOnlyProperty\u003cFlashcard\u003e selectedFlashcardProperty();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Current quiz mode. -1 for front face, 1 for back face, 0 for non-quiz mode."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    ReadOnlyProperty\u003cInteger\u003e quizModeProperty();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns the selected flashcard in the filtered flashcard list."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * null if no flashcard is selected."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    Flashcard getSelectedFlashcard();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Sets the selected flashcard in the filtered flashcard list."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    void setSelectedFlashcard(Flashcard flashcard);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Returns the quiz mode."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    Integer getQuizMode();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Sets the quiz mode."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    void setQuizMode(Integer quizMode);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * Sets the SRS mode."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    void setIsQuizSrs(Boolean isQuizSrs);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Gets the quiz mode flashcards."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    ObservableList\u003cFlashcard\u003e getQuizFlashcards();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Sets the quiz mode flashcards."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * @param flashcards the flashcards that is going to be quizzed"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    void setQuizFlashcards(ObservableList\u003cFlashcard\u003e flashcards);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Shows a flashcard for quiz mode from quiz flashcards."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    void showNextQuizCard();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * @return the number of good feedback in the current quiz mode"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    ReadOnlyProperty\u003cInteger\u003e getQuizGood();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * @return the number of bad feedback in the current quiz mode"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    ReadOnlyProperty\u003cInteger\u003e getQuizBad();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * @return is the current quiz session uses SRS mode."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    ReadOnlyProperty\u003cBoolean\u003e getIsQuizSrs();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Resets the quiz statistics."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    void resetQuizStat();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Adds good feedback."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    void addGoodFeedback();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Adds bad feedback."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    void addBadFeedback();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 17,
      "robincyu": 51,
      "sergiovieri": 36,
      "-": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.commons.core.QuizState;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.exceptions.FlashcardNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * Represents the in-memory model of the card collection data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private final VersionedCardCollection versionedCardCollection;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private final FilteredList\u003cFlashcard\u003e filteredFlashcards;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private final SimpleObjectProperty\u003cFlashcard\u003e selectedFlashcard \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private final SimpleObjectProperty\u003cInteger\u003e quizMode \u003d new SimpleObjectProperty\u003c\u003e(0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private final SimpleObjectProperty\u003cInteger\u003e quizGood \u003d new SimpleObjectProperty\u003c\u003e(0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private final SimpleObjectProperty\u003cInteger\u003e quizBad \u003d new SimpleObjectProperty\u003c\u003e(0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private final SimpleObjectProperty\u003cBoolean\u003e isQuizSrs \u003d new SimpleObjectProperty\u003c\u003e(false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private ObservableList\u003cFlashcard\u003e quizFlashcards;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Initializes a ModelManager with the given cardCollection and userPrefs."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public ModelManager(ReadOnlyCardCollection cardCollection, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        requireAllNonNull(cardCollection, userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        logger.fine(\"Initializing with card collection: \" + cardCollection + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        versionedCardCollection \u003d new VersionedCardCollection(cardCollection);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        filteredFlashcards \u003d new FilteredList\u003c\u003e(versionedCardCollection.getFlashcardList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        filteredFlashcards.addListener(this::ensureSelectedFlashcardIsValid);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        this(new CardCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public Path getCardCollectionFilePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return userPrefs.getCardCollectionFilePath();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void setCardCollectionFilePath(Path cardCollectionFilePath) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        requireNonNull(cardCollectionFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        userPrefs.setCardCollectionFilePath(cardCollectionFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CardCollection \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public ReadOnlyCardCollection getCardCollection() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return versionedCardCollection;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public void setCardCollection(ReadOnlyCardCollection cardCollection) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        versionedCardCollection.resetData(cardCollection);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        requireNonNull(flashcard);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return versionedCardCollection.hasFlashcard(flashcard);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void deleteFlashcard(Flashcard target) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        versionedCardCollection.removeFlashcard(target);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void addFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        versionedCardCollection.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        requireAllNonNull(target, editedFlashcard);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        versionedCardCollection.setFlashcard(target, editedFlashcard);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Flashcard List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Flashcard} backed by the internal list of"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * {@code versionedCardCollection}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e getFilteredFlashcardList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return filteredFlashcards;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void updateFilteredFlashcardList(Predicate\u003cFlashcard\u003e predicate) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        filteredFlashcards.setPredicate(predicate);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public boolean canUndoCardCollection() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return versionedCardCollection.canUndo();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public boolean canRedoCardCollection() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return versionedCardCollection.canRedo();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public String undoCardCollection() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return versionedCardCollection.undo();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public String redoCardCollection() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return versionedCardCollection.redo();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public void commitCardCollection(String commandText) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        versionedCardCollection.commit(commandText);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void commitCardCollection() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        versionedCardCollection.commit(\"\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected flashcard \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public ReadOnlyProperty\u003cFlashcard\u003e selectedFlashcardProperty() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return selectedFlashcard;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public Flashcard getSelectedFlashcard() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return selectedFlashcard.getValue();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void setSelectedFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (flashcard !\u003d null \u0026\u0026 !filteredFlashcards.contains(flashcard)) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            throw new FlashcardNotFoundException();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        selectedFlashcard.setValue(flashcard);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Ensures {@code selectedFlashcard} is a valid flashcard in {@code filteredFlashcards}."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private void ensureSelectedFlashcardIsValid(ListChangeListener.Change\u003c? extends Flashcard\u003e change) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            if (selectedFlashcard.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                // null is always a valid selected flashcard, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            boolean wasSelectedFlashcardReplaced \u003d"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                change.wasReplaced() \u0026\u0026 change.getAddedSize() \u003d\u003d change.getRemovedSize()"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                    \u0026\u0026 change.getRemoved().contains(selectedFlashcard.getValue());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            if (wasSelectedFlashcardReplaced) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                // Update selectedFlashcard to its new value."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedFlashcard.getValue());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                selectedFlashcard.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            boolean wasSelectedFlashcardRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                .anyMatch(removedFlashcard -\u003e selectedFlashcard.getValue().isSameFlashcard(removedFlashcard))"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                \u0026\u0026 !change.getAddedSubList().contains(selectedFlashcard.getValue());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            if (wasSelectedFlashcardRemoved) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                // Select the flashcard that came before it in the list,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                // or clear the selection if there is no such flashcard."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                selectedFlashcard.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Quiz Mode \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e getQuizFlashcards() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return quizFlashcards;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void setQuizFlashcards(ObservableList\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        quizFlashcards \u003d flashcards;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public ReadOnlyProperty\u003cInteger\u003e quizModeProperty() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return quizMode;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public Integer getQuizMode() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return quizMode.getValue();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void setQuizMode(Integer quizMode) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        this.quizMode.setValue(quizMode);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void showNextQuizCard() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        quizMode.setValue(QuizState.QUIZ_MODE_FRONT);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Flashcard flashcard \u003d quizFlashcards.get(0);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        setSelectedFlashcard(flashcard);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        quizFlashcards.remove(0);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public ReadOnlyProperty\u003cInteger\u003e getQuizGood() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return quizGood;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public ReadOnlyProperty\u003cInteger\u003e getQuizBad() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return quizBad;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public ReadOnlyProperty\u003cBoolean\u003e getIsQuizSrs() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return isQuizSrs;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public void setIsQuizSrs(Boolean isQuizSrs) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        this.isQuizSrs.setValue(isQuizSrs);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void resetQuizStat() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        quizGood.setValue(0);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        quizBad.setValue(0);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void addGoodFeedback() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Flashcard updatedFlashcard \u003d selectedFlashcard.getValue().quizAttempt(true, isQuizSrs.getValue());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        setFlashcard(selectedFlashcard.getValue(), updatedFlashcard);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        quizGood.setValue(quizGood.getValue() + 1);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void addBadFeedback() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Flashcard updatedFlashcard \u003d selectedFlashcard.getValue().quizAttempt(false, isQuizSrs.getValue());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        setFlashcard(selectedFlashcard.getValue(), updatedFlashcard);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        quizBad.setValue(quizBad.getValue() + 1);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return versionedCardCollection.equals(other.versionedCardCollection)"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            \u0026\u0026 filteredFlashcards.equals(other.filteredFlashcards)"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            \u0026\u0026 Objects.equals(selectedFlashcard.get(), other.selectedFlashcard.get());"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 31,
      "robincyu": 70,
      "sergiovieri": 71,
      "-": 152
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyCardCollection.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robincyu"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robincyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * Unmodifiable view of an card collection"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robincyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public interface ReadOnlyCardCollection extends Observable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns an unmodifiable view of the flashcards list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * This list will not contain any duplicate flashcards."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    ObservableList\u003cFlashcard\u003e getFlashcardList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    Path getCardCollectionFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private Path cardCollectionFilePath \u003d Paths.get(\"data\", \"cardcollection.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        setCardCollectionFilePath(newUserPrefs.getCardCollectionFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public Path getCardCollectionFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return cardCollectionFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void setCardCollectionFilePath(Path cardCollectionFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        requireNonNull(cardCollectionFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        this.cardCollectionFilePath \u003d cardCollectionFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            \u0026\u0026 cardCollectionFilePath.equals(o.cardCollectionFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return Objects.hash(guiSettings, cardCollectionFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + cardCollectionFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 12,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedCardCollection.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robincyu"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * {@code CardCollection} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robincyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public class VersionedCardCollection extends CardCollection {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private final List\u003cReadOnlyCardCollection\u003e cardCollectionStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private final List\u003cString\u003e commandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public VersionedCardCollection(ReadOnlyCardCollection initialState) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        cardCollectionStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        commandHistory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        cardCollectionStateList.add(new CardCollection(initialState));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        commandHistory.add(\"\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Saves a copy of the current {@code CardCollection} state at the end of the state list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * @param commandText The command that makes the change."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public void commit(String commandText) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        cardCollectionStateList.add(new CardCollection(this));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        commandHistory.add(commandText);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * Saves a copy of the current {@code CardCollection} state at the end of the state list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * Saves the command that makes the change."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        commit(\"\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        cardCollectionStateList.subList(currentStatePointer + 1, cardCollectionStateList.size()).clear();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        commandHistory.subList(currentStatePointer + 1, commandHistory.size()).clear();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Restores the card collection to its previous state."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * @return The command that makes the change before and after undo."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public String undo() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        String command \u003d commandHistory.get(currentStatePointer);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        resetData(cardCollectionStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Restores the card collection to its previously undone state."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * @return The command that makes the change before and after redo."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public String redo() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        resetData(cardCollectionStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return commandHistory.get(currentStatePointer);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns true if {@code undo()} has card collection states to undo."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns true if {@code redo()} has card collection states to redo."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return currentStatePointer \u003c cardCollectionStateList.size() - 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (!(other instanceof VersionedCardCollection)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        VersionedCardCollection otherVersionedCardCollection \u003d (VersionedCardCollection) other;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return super.equals(otherVersionedCardCollection)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            \u0026\u0026 cardCollectionStateList.equals(otherVersionedCardCollection.cardCollectionStateList)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedCardCollection.currentStatePointer"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            \u0026\u0026 commandHistory.equals(otherVersionedCardCollection.commandHistory);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            super(\"Current state pointer at start of cardCollectionStateList, unable to undo.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            super(\"Current state pointer at end of cardCollectionStateList, unable to redo.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "robincyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 26,
      "robincyu": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/Face.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " * Represents a Flashcard\u0027s face in the card collection."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " * Guarantees: immutable"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "public class Face {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Face can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public final String text;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Constructs a {@code Face}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * @param text A valid text."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public Face(String text) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        requireNonNull(text);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        checkArgument(isValidFace(text), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static boolean isValidFace(String trimmedFace) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return trimmedFace.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Face face \u003d (Face) o;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return text.equals(face.text);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sergiovieri": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/FaceContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " * Tests that a {@code Flashcard}\u0027s {@code Face} matches any of the keywords given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "public class FaceContainsKeywordsPredicate implements Predicate\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    private final boolean isFrontFace;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public FaceContainsKeywordsPredicate(List\u003cString\u003e keywords, boolean isFrontFace) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        this.isFrontFace \u003d isFrontFace;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public boolean test(Flashcard flashcard) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        if (isFrontFace) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                    .anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                            containsSubstring(flashcard.getFrontFace().text, keyword));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                    .anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                            containsSubstring(flashcard.getBackFace().text, keyword));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                || (other instanceof FaceContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                \u0026\u0026 keywords.equals(((FaceContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * check if keyword is a substring of s."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * @param s"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * @param keyword"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * @return true if `keyword` is a substring of `s`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private boolean containsSubstring(String s, String keyword) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        for (int i \u003d 0; i + keyword.length() - 1 \u003c s.length(); i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            String sub \u003d s.substring(i, i + keyword.length());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            if (sub.equalsIgnoreCase(keyword)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 20,
      "lucatriglia": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/Flashcard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robincyu"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lungsin"
        },
        "content": " * Represents a Flashcard in the card collection. Guarantees: details are present and not null, field values are"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lungsin"
        },
        "content": " * validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public class Flashcard {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private final Face frontFace;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private final Face backFace;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private final ImagePath imagePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private final Statistics statistics;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private final Proficiency proficiency;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public Flashcard(Face frontFace, Face backFace, Statistics statistics, Proficiency proficiency, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        requireAllNonNull(frontFace, backFace, statistics, proficiency, tags);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        this.frontFace \u003d frontFace;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        this.backFace \u003d backFace;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        this.imagePath \u003d new ImagePath(Optional.empty());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        this.statistics \u003d statistics;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        this.proficiency \u003d proficiency;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public Flashcard(Face frontFace, Face backFace, ImagePath imagePath, Statistics statistics, Proficiency proficiency,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                     Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        requireAllNonNull(frontFace, backFace, statistics, tags, proficiency);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        this.frontFace \u003d frontFace;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        this.backFace \u003d backFace;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        this.imagePath \u003d imagePath;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        this.statistics \u003d statistics;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        this.proficiency \u003d proficiency;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public Proficiency getProficiency() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return proficiency;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public Statistics getStatistics() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return statistics;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public Face getFrontFace() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return frontFace;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public Face getBackFace() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return backFace;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public ImagePath getImagePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return imagePath;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * @return success rate of the flashcard in quiz or review in percentage."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public Double getSuccessRate() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return getStatistics().getSuccessRate() * 100;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * @return the status of this flashcard in the quiz."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public String getQuizSrsStatus() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return getProficiency().getQuizSrsStatus();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * Returns a flashcard with updated statistics and SRS info based on the result of the quiz."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * @param isSuccess success in quiz mode"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * @param isQuizSrs is it srs mode in the quiz"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * @return the modified flashcard"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public Flashcard quizAttempt(boolean isSuccess, boolean isQuizSrs) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Proficiency rProficiency \u003d proficiency;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        if (isQuizSrs) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            rProficiency \u003d rProficiency.quizAttempt(isSuccess);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Statistics rStatistics \u003d statistics.quizAttempt(isSuccess);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return new Flashcard(frontFace, backFace, imagePath, rStatistics, rProficiency, tags);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public boolean isIncludedInCurrentQuiz() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return getProficiency().isIncludedInCurrentQuiz();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns true if both flashcards of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * This defines a weaker notion of equality between two flashcards."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public boolean isSameFlashcard(Flashcard otherFlashcard) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (otherFlashcard \u003d\u003d this) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return otherFlashcard !\u003d null"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                \u0026\u0026 otherFlashcard.getFrontFace().equals(getFrontFace())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                \u0026\u0026 otherFlashcard.getBackFace().equals(getBackFace())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                \u0026\u0026 otherFlashcard.getImagePath().equals(getImagePath());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * Returns true if both flashcards have the same identity and data fields. This defines a stronger notion of"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * equality between two flashcards."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (!(o instanceof Flashcard)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Flashcard flashcard \u003d (Flashcard) o;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return getFrontFace().equals(flashcard.getFrontFace())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                \u0026\u0026 getBackFace().equals(flashcard.getBackFace())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                \u0026\u0026 getImagePath().equals(flashcard.getImagePath())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                \u0026\u0026 getTags().equals(flashcard.getTags());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return Objects.hash(getFrontFace(), getBackFace(), getImagePath(), getTags(), getProficiency());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        builder.append(\"Front: \")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                .append(getFrontFace().text)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                .append(\" Back: \")"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                .append(getBackFace().text)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 57,
      "robincyu": 27,
      "sergiovieri": 20,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/FlashcardPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " * Tests that a {@code Flashcard}\u0027s FrontFace OR BackFace OR {@code Tag} matches any of the keywords given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " * AND that the {@Code Flashcard}\u0027s success rate is within the {@code upperBound} and {@code lowerBound}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "public class FlashcardPredicate implements Predicate\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public static final boolean IS_FRONT_FACE \u003d true;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    private final List\u003cString\u003e frontFaceKeywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    private final List\u003cString\u003e backFaceKeywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    private final List\u003cString\u003e tagKeywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    private double lowerBound;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    private double upperBound;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public FlashcardPredicate(List\u003cString\u003e frontFaceKeywords, List\u003cString\u003e backFaceKeywords,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                              List\u003cString\u003e tagKeywords, double[] statRange) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        this.frontFaceKeywords \u003d frontFaceKeywords;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        this.backFaceKeywords \u003d backFaceKeywords;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        this.tagKeywords \u003d tagKeywords;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        this.lowerBound \u003d statRange[0];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        this.upperBound \u003d statRange[1];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public boolean test(Flashcard flashcard) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        if (frontFaceKeywords.isEmpty() \u0026\u0026 backFaceKeywords.isEmpty() \u0026\u0026 tagKeywords.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            return (flashcard.getStatistics().getSuccessRate() * 100 \u003e\u003d lowerBound"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                    \u0026\u0026 flashcard.getStatistics().getSuccessRate() * 100 \u003c\u003d upperBound);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        FaceContainsKeywordsPredicate frontFacePredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                new FaceContainsKeywordsPredicate(frontFaceKeywords, IS_FRONT_FACE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        FaceContainsKeywordsPredicate backFacePredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                new FaceContainsKeywordsPredicate(backFaceKeywords, !IS_FRONT_FACE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        TagContainsKeywordsPredicate tagPredicate \u003d new TagContainsKeywordsPredicate(tagKeywords);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        return ((frontFacePredicate.test(flashcard) || backFacePredicate.test(flashcard)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                || tagPredicate.test(flashcard)) \u0026\u0026 (flashcard.getStatistics().getSuccessRate() * 100 \u003e\u003d lowerBound"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                \u0026\u0026 flashcard.getStatistics().getSuccessRate() * 100 \u003c\u003d upperBound));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                || (other instanceof FlashcardPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                \u0026\u0026 frontFaceKeywords.equals(((FlashcardPredicate) other).frontFaceKeywords)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                \u0026\u0026 backFaceKeywords.equals(((FlashcardPredicate) other).backFaceKeywords)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                \u0026\u0026 tagKeywords.equals(((FlashcardPredicate) other).tagKeywords)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                \u0026\u0026 lowerBound \u003d\u003d (((FlashcardPredicate) other).lowerBound)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                \u0026\u0026 upperBound \u003d\u003d (((FlashcardPredicate) other).upperBound)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucatriglia": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/ImagePath.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robincyu"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import javax.imageio.ImageIO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robincyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * Represents either empty (no image) or a valid path to an existing image."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public class ImagePath {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private Optional\u003cString\u003e imagePath;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public ImagePath() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        this.imagePath \u003d Optional.empty();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public ImagePath(Optional\u003cString\u003e imagePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        this.imagePath \u003d imagePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @return whether or not an image path exists"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public boolean hasImagePath() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return imagePath.isPresent();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @return true iff this image path is either empty or has a valid image"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public boolean imageExistsAtPath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (this.hasImagePath()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            File image \u003d new File(imagePath.get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                ImageIO.read(image);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @return the image path if it exists"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @throws NoSuchElementException if no image path exists"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public String getImagePath() throws NoSuchElementException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return imagePath.get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns true if both flashcards have the same identity and data fields. This defines a stronger notion of"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * equality between two flashcards."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (!(o instanceof ImagePath)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        ImagePath imagePath \u003d (ImagePath) o;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (!this.hasImagePath() \u0026\u0026 !imagePath.hasImagePath()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        } else if (!this.hasImagePath() \u0026\u0026 imagePath.hasImagePath()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        } else if (this.hasImagePath() \u0026\u0026 !imagePath.hasImagePath()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            return this.getImagePath().equals(imagePath.getImagePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robincyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/Proficiency.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lungsin"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lungsin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lungsin"
        },
        "content": " * Represents a Flashcard\u0027s proficiency level on how well the user does in the quiz mode."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lungsin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lungsin"
        },
        "content": "public class Proficiency {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"inactive until \\\\d+ proficiency level \\\\d+$\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Proficiency string format must be in the form of: \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        + \"inactive until \u003cdate until card can be reviewed\u003e proficiency level \u003cproficiency level\u003e\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public static final String NOW_ACTIVE \u003d \"Active\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public static final String INACTIVE_UNTIL_IN_DAYS \u003d \"Inactive until %d day(s)\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public static final String INACTIVE_UNTIL_IN_HOURS \u003d \"Inactive until %d hour(s)\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public static final String INACTIVE_UNTIL_IN_MINUTES \u003d \"Inactive until %d minute(s)\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public static final String ACTIVE_IN_UNDER_A_MINUTE \u003d \"Will be active in under a minute.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private final Calendar timeUntilReview;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private final int proficiencyLevel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public Proficiency(Calendar timeUntilReview, int proficiencyLevel) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        if (proficiencyLevel \u003c 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            throw new IllegalArgumentException(\"Proficiency level cannot be negative\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        this.timeUntilReview \u003d timeUntilReview;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        this.proficiencyLevel \u003d proficiencyLevel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public Proficiency() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        this.timeUntilReview \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        this.proficiencyLevel \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public Proficiency(String fromString) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Scanner sc \u003d new Scanner(fromString);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        sc.next(); // string: inactive"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        sc.next(); // string: until"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        timeUntilReview \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        timeUntilReview.setTimeInMillis(sc.nextLong());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        sc.next(); // string: proficiency"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        sc.next(); // string: level"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        proficiencyLevel \u003d sc.nextInt();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * Returns if a given string is a valid proficiency format."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public static boolean isValidProficiency(String test) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        if (!test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Proficiency dummy \u003d new Proficiency(test);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return dummy.proficiencyLevel \u003e\u003d 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * @return True if this flashcard can be reviewed in the current session."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public boolean isIncludedInCurrentQuiz() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Calendar now \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return !now.before(timeUntilReview);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * @return The quiz status, either active or inactive. Will display the time until it became active."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public String getQuizSrsStatus() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        long millis \u003d timeUntilReview.getTimeInMillis() - Calendar.getInstance().getTimeInMillis();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        if (millis \u003c\u003d 0) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            return NOW_ACTIVE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        long daysLeft \u003d TimeUnit.MILLISECONDS.toDays(millis);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        if (daysLeft \u003e 0) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            return String.format(INACTIVE_UNTIL_IN_DAYS, daysLeft);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        long hoursLeft \u003d TimeUnit.MILLISECONDS.toHours(millis);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        if (hoursLeft \u003e 0) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            return String.format(INACTIVE_UNTIL_IN_HOURS, hoursLeft);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        long minutesLeft \u003d TimeUnit.MILLISECONDS.toMinutes(millis);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        if (minutesLeft \u003e 0) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            return String.format(INACTIVE_UNTIL_IN_MINUTES, minutesLeft);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return ACTIVE_IN_UNDER_A_MINUTE;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * update the proficiency after a quiz is finished."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * @param isSuccess does the user guess the card from the quiz correctly."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public Proficiency quizAttempt(boolean isSuccess) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        int rProficiencyLevel \u003d proficiencyLevel;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        if (isSuccess) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            rProficiencyLevel++;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            rProficiencyLevel \u003d 0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Calendar now \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        if (rProficiencyLevel !\u003d 0) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            now.add(Calendar.DATE, rProficiencyLevel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return new Proficiency(now, rProficiencyLevel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return Objects.hash(toString());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            || (other instanceof Proficiency // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            \u0026\u0026 isAlmostEqualCalendar(timeUntilReview, ((Proficiency) other).timeUntilReview)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            \u0026\u0026 proficiencyLevel \u003d\u003d ((Proficiency) other).proficiencyLevel); // state check"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return String.format(\"inactive until %d proficiency level %d\", timeUntilReview.getTimeInMillis(),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            proficiencyLevel);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private boolean isAlmostEqualCalendar(Calendar a, Calendar b) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        int oneHourInMillis \u003d 3600 * 1000;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return Math.abs(a.getTimeInMillis() - b.getTimeInMillis()) \u003c oneHourInMillis;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lungsin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/Statistics.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lungsin"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lungsin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lungsin"
        },
        "content": " * Represents a Flashcard\u0027s statistics on how well the user does in the quiz mode."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lungsin"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lungsin"
        },
        "content": "public class Statistics {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+ out of \\\\d+ attempts.$\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Statistics string format must be in the form of: \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            + \"`\u003cnumber of success attempt\u003e out of \u003ctotal number of attempts\u003e attempts.`\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private final int attemptNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private final int successAttempt;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public Statistics(int successAttempt, int attemptNumber) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        if (successAttempt \u003e attemptNumber) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            throw new IllegalArgumentException(\"successAttempt higher than attemptNumber\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        this.attemptNumber \u003d attemptNumber;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        this.successAttempt \u003d successAttempt;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public Statistics() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        this.attemptNumber \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        this.successAttempt \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public Statistics(String fromString) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Scanner sc \u003d new Scanner(fromString);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        successAttempt \u003d sc.nextInt();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        sc.next(); // string: out"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        sc.next(); // string: of"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        attemptNumber \u003d sc.nextInt();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * Returns if a given string is a valid statistics format."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public static boolean isValidStatistics(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        if (!test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Statistics dummy \u003d new Statistics(test);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return dummy.successAttempt \u003c\u003d dummy.attemptNumber;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * @return The success rate of a quiz on a particular card. Return 0 if there hasn\u0027t any attempt in quiz."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public double getSuccessRate() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        if (attemptNumber \u003d\u003d 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return (double) successAttempt / attemptNumber;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * Returns an updated statistics after a quiz is finished."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * @param isSuccess does the user guess the card from the quiz correctly."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * @return the modified statistics"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public Statistics quizAttempt(boolean isSuccess) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        int rSuccessAttempt \u003d this.successAttempt;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        int rAttemptNumber \u003d this.attemptNumber + 1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        if (isSuccess) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            rSuccessAttempt++;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return new Statistics(rSuccessAttempt, rAttemptNumber);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * merge two statistics by combining the attempt and success number."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * @param oth the statistics to merge"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * @return new Statistics."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public Statistics merge(Statistics oth) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return new Statistics("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            this.successAttempt + oth.successAttempt, this.attemptNumber + oth.attemptNumber);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return Objects.hash(toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                || (other instanceof Statistics // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                \u0026\u0026 attemptNumber \u003d\u003d ((Statistics) other).attemptNumber"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                \u0026\u0026 successAttempt \u003d\u003d ((Statistics) other).successAttempt); // state check"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return String.format(\"%d out of %d attempts.\", successAttempt, attemptNumber);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lungsin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/TagContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " * Tests that a {@code Flashcard}\u0027s {@code Tag} matches any of the keywords given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "public class TagContainsKeywordsPredicate implements Predicate\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public TagContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public boolean test(Flashcard flashcard) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        boolean match \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        Set\u003cTag\u003e tags \u003d flashcard.getTags();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        for (Tag tag : tags) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            match \u003d keywords.stream()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(tag.tagName, keyword));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            if (match) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        return match;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                \u0026\u0026 keywords.equals(((TagContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucatriglia": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/UniqueFlashcardList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robincyu"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.exceptions.DuplicateFlashcardException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.exceptions.FlashcardNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * A list of flashcards that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * A flashcard is considered unique by comparing using {@code Flashcard#isSameFlashcard(Flashcard)}. As such, adding"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * and updating of flashcards uses Flashcard#isSameFlashcard(Flashcard) for equality so as to ensure that the flashcard"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * being added or updated is unique in terms of identity in the UniqueFlashcardList. However, the removal of a flashcard"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * uses Flashcard#equals(Object) so as to ensure that the flashcard with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robincyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * @see Flashcard#isSameFlashcard(Flashcard)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robincyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public class UniqueFlashcardList implements Iterable\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private final ObservableList\u003cFlashcard\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private final ObservableList\u003cFlashcard\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns true if the list contains an equivalent flashcard as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public boolean contains(Flashcard toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameFlashcard);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Adds a flashcard to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * The flashcard must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void add(Flashcard toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            throw new DuplicateFlashcardException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Replaces the flashcard {@code target} in the list with {@code editedFlashcard}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * The flashcard identity of {@code editedFlashcard} must not be the same as another existing flashcard in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        requireAllNonNull(target, editedFlashcard);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            throw new FlashcardNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (!target.isSameFlashcard(editedFlashcard) \u0026\u0026 contains(editedFlashcard)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            throw new DuplicateFlashcardException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        internalList.set(index, editedFlashcard);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Removes the equivalent flashcard from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * The flashcard must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void remove(Flashcard toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            throw new FlashcardNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void setFlashcards(UniqueFlashcardList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Replaces the contents of this list with {@code flashcards}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * {@code flashcards} must not contain duplicate flashcards."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void setFlashcards(List\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        requireAllNonNull(flashcards);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (!flashcardsAreUnique(flashcards)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            throw new DuplicateFlashcardException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        internalList.setAll(flashcards);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public Iterator\u003cFlashcard\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            || (other instanceof UniqueFlashcardList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueFlashcardList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns true if {@code flashcards} contains only unique flashcards."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private boolean flashcardsAreUnique(List\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        for (int i \u003d 0; i \u003c flashcards.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            for (int j \u003d i + 1; j \u003c flashcards.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                if (flashcards.get(i).isSameFlashcard(flashcards.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "robincyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/exceptions/DuplicateFlashcardException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robincyu"
        },
        "content": "package seedu.address.model.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robincyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * Signals that the operation will result in duplicate Flashcards (Flashcards are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public class DuplicateFlashcardException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public DuplicateFlashcardException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        super(\"Operation would result in duplicate flashcards\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/flashcard/exceptions/FlashcardNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robincyu"
        },
        "content": "package seedu.address.model.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robincyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * Signals that the operation is unable to find the specified flashcard."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robincyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public class FlashcardNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robincyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * Represents a Tag in the card collection."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.CardCollection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.ReadOnlyCardCollection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.flashcard.Face;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.model.flashcard.Proficiency;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.model.flashcard.Statistics;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * Contains utility methods for populating {@code CardCollection} with sample data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static Flashcard[] getSampleFlashcards() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Calendar tomorrow \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        tomorrow.add(Calendar.DATE, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return new Flashcard[]{"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            new Flashcard(new Face(\"Hello\"), new Face(\"Halo\"), new Statistics(), new Proficiency(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                getTagSet(\"indonesian\")),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            new Flashcard(new Face(\"Hola\"), new Face(\"你好\"), new Statistics(5, 7), new Proficiency(tomorrow, 2),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                getTagSet(\"chinese\", \"spanish\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            new Flashcard(new Face(\"Newton\u0027s 3rd law\"), new Face(\"idk\"), new Statistics(0, 5), new Proficiency(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                getTagSet(\"alevel\", \"physics\"))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static ReadOnlyCardCollection getSampleCardCollection() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        CardCollection sampleAb \u003d new CardCollection();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        for (Flashcard sampleFlashcard : getSampleFlashcards()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            sampleAb.addFlashcard(sampleFlashcard);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 11,
      "robincyu": 10,
      "sergiovieri": 1,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/CardCollectionStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robincyu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.CardCollection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.ReadOnlyCardCollection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * Represents a storage for {@link CardCollection}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robincyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public interface CardCollectionStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    Path getCardCollectionFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns CardCollection data as a {@link ReadOnlyCardCollection}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    Optional\u003cReadOnlyCardCollection\u003e readCardCollection() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @see #getCardCollectionFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    Optional\u003cReadOnlyCardCollection\u003e readCardCollection(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Saves the given {@link ReadOnlyCardCollection} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @param cardCollection cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    void saveCardCollection(ReadOnlyCardCollection cardCollection) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @see #saveCardCollection(ReadOnlyCardCollection)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    void saveCardCollection(ReadOnlyCardCollection cardCollection, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robincyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedFlashcard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_IMAGE_NOT_FOUND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.flashcard.Face;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.ImagePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.model.flashcard.Proficiency;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.model.flashcard.Statistics;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * Jackson-friendly version of {@link Flashcard}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robincyu"
        },
        "content": "class JsonAdaptedFlashcard {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Flashcard\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private final String frontFace;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private final String backFace;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private final String imagePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private final String statistics;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private final String proficiency;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Constructs a {@code JsonAdaptedFlashcard} with the given flashcard details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public JsonAdaptedFlashcard(@JsonProperty(\"frontFace\") String frontFace, @JsonProperty(\"backFace\") String backFace,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                                @JsonProperty(\"imagePath\") String imagePath,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                                @JsonProperty(\"statistics\") String statistics,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                                @JsonProperty(\"proficiency\") String proficiency,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                                @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        this.frontFace \u003d frontFace;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        this.backFace \u003d backFace;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        this.imagePath \u003d imagePath;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        this.statistics \u003d statistics;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        this.proficiency \u003d proficiency;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Converts a given {@code Flashcard} into this class for Jackson use."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public JsonAdaptedFlashcard(Flashcard source) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        frontFace \u003d source.getFrontFace().text;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        backFace \u003d source.getBackFace().text;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (source.getImagePath().hasImagePath()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            imagePath \u003d source.getImagePath().getImagePath();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            imagePath \u003d \"\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        statistics \u003d source.getStatistics().toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        proficiency \u003d source.getProficiency().toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Converts this Jackson-friendly adapted flashcard object into the model\u0027s {@code Flashcard} object."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted flashcard."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public Flashcard toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        final List\u003cTag\u003e flashcardTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            flashcardTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (frontFace \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Face.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (!Face.isValidFace(frontFace)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            throw new IllegalValueException(Face.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        final Face modelFrontFace \u003d new Face(frontFace);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (backFace \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Face.class.getSimpleName()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (!Face.isValidFace(backFace)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            throw new IllegalValueException(Face.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        final Face modelBackFace \u003d new Face(backFace);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        final ImagePath modelImagePath;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (imagePath \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                    ImagePath.class.getSimpleName()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (imagePath.isEmpty()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            modelImagePath \u003d new ImagePath(Optional.empty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            modelImagePath \u003d new ImagePath(Optional.of(imagePath));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            if (!modelImagePath.imageExistsAtPath()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                throw new IllegalValueException(MESSAGE_IMAGE_NOT_FOUND);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        if (statistics \u003d\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                    Statistics.class.getSimpleName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        if (!Statistics.isValidStatistics(statistics)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            throw new IllegalValueException(Statistics.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        final Statistics modelStatistics \u003d new Statistics(statistics);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        if (proficiency \u003d\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                    Proficiency.class.getSimpleName()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        if (!Proficiency.isValidProficiency(proficiency)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            throw new IllegalValueException(Proficiency.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        final Proficiency modelProficiency \u003d new Proficiency(proficiency);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(flashcardTags);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return new Flashcard(modelFrontFace, modelBackFace, modelImagePath, modelStatistics,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                modelProficiency, modelTags);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 30,
      "robincyu": 39,
      "sergiovieri": 18,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonCardCollectionStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robincyu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.ReadOnlyCardCollection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * A class to access CardCollection data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robincyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public class JsonCardCollectionStorage implements CardCollectionStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonCardCollectionStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public JsonCardCollectionStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public Path getCardCollectionFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public Optional\u003cReadOnlyCardCollection\u003e readCardCollection() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return readCardCollection(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Similar to {@link #readCardCollection()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public Optional\u003cReadOnlyCardCollection\u003e readCardCollection(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Optional\u003cJsonSerializableCardCollection\u003e jsonCardCollection \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            filePath, JsonSerializableCardCollection.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (!jsonCardCollection.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            return Optional.of(jsonCardCollection.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void saveCardCollection(ReadOnlyCardCollection cardCollection) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        saveCardCollection(cardCollection, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Similar to {@link #saveCardCollection(ReadOnlyCardCollection)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void saveCardCollection(ReadOnlyCardCollection cardCollection, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        requireNonNull(cardCollection);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableCardCollection(cardCollection), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "robincyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableCardCollection.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robincyu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.CardCollection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.ReadOnlyCardCollection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * An Immutable CardCollection that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robincyu"
        },
        "content": "@JsonRootName(value \u003d \"cardcollection\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": "class JsonSerializableCardCollection {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARD \u003d \"Flashcards list contains duplicate flashcard(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private final List\u003cJsonAdaptedFlashcard\u003e flashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Constructs a {@code JsonSerializableCardCollection} with the given flashcards."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public JsonSerializableCardCollection(@JsonProperty(\"flashcards\") List\u003cJsonAdaptedFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        this.flashcards.addAll(flashcards);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Converts a given {@code ReadOnlyCardCollection} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableCardCollection}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public JsonSerializableCardCollection(ReadOnlyCardCollection source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        flashcards.addAll(source.getFlashcardList().stream().map(JsonAdaptedFlashcard::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Converts this card collection into the model\u0027s {@code CardCollection} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public CardCollection toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        CardCollection cardCollection \u003d new CardCollection();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        for (JsonAdaptedFlashcard jsonAdaptedFlashcard : flashcards) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            Flashcard flashcard \u003d jsonAdaptedFlashcard.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            if (cardCollection.hasFlashcard(flashcard)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            cardCollection.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return cardCollection;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robincyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonUserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 1,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.ReadOnlyCardCollection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public interface Storage extends CardCollectionStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    Path getCardCollectionFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    Optional\u003cReadOnlyCardCollection\u003e readCardCollection() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    void saveCardCollection(ReadOnlyCardCollection cardCollection) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.ReadOnlyCardCollection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * Manages storage of CardCollection data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private CardCollectionStorage cardCollectionStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public StorageManager(CardCollectionStorage cardCollectionStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        this.cardCollectionStorage \u003d cardCollectionStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CardCollection methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public Path getCardCollectionFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return cardCollectionStorage.getCardCollectionFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public Optional\u003cReadOnlyCardCollection\u003e readCardCollection() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return readCardCollection(cardCollectionStorage.getCardCollectionFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public Optional\u003cReadOnlyCardCollection\u003e readCardCollection(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return cardCollectionStorage.readCardCollection(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void saveCardCollection(ReadOnlyCardCollection cardCollection) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        saveCardCollection(cardCollection, cardCollectionStorage.getCardCollectionFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void saveCardCollection(ReadOnlyCardCollection cardCollection, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        cardCollectionStorage.saveCardCollection(cardCollection, filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 17,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link seedu.address.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 2,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CardViewPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "public class CardViewPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private static final String FXML \u003d \"CardViewPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private int quizMode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private StackPane cardPlaceholder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public CardViewPanel(ObservableValue\u003cFlashcard\u003e selectedCard, ObservableValue\u003cInteger\u003e quizMode) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        // Reload page when selected card changes."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        selectedCard.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                loadEmptyCard();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            loadCardPage(newValue);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        });"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        quizMode.addListener(((observableValue, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            this.quizMode \u003d newValue;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            loadCardPage(selectedCard.getValue());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        loadEmptyCard();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private void loadCardPage(Flashcard flashcard) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (flashcard !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            loadCard(new FlashcardCardView(flashcard, quizMode));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Loads card view given uiPart"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * @param uiPart the uiPart to show"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void loadCard(UiPart\u003cRegion\u003e uiPart) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        cardPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (uiPart !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            cardPlaceholder.getChildren().add(uiPart.getRoot());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Loads an empty card view."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private void loadEmptyCard() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        loadCard(null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 3,
      "sergiovieri": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FlashcardCardView.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " * A UI component that displays information of a {@code Flashcard} as a card view."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "public class FlashcardCardView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private static final String FXML \u003d \"FlashcardCardView.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public final Flashcard flashcard;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private StackPane cardPane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private Label frontFace;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private Label backFace;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private ImageView flashcardImage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Constructs a {@code FlashCardView} with the given mode."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * @param flashcard the flashcard to show"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * @param mode      -1 for front only, 1 for back only, and 0 for showing both"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public FlashcardCardView(Flashcard flashcard, int mode) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        frontFace.setWrapText(true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        backFace.setWrapText(true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        this.flashcard \u003d flashcard;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        frontFace.setText(flashcard.getFrontFace().text);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (mode !\u003d -1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            backFace.setText(flashcard.getBackFace().text);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            backFace.setText(\"\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (flashcard.getImagePath().hasImagePath()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            File file \u003d new File(flashcard.getImagePath().getImagePath());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            Image image \u003d new Image(file.toURI().toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            flashcardImage.setImage(image);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            flashcardImage.setFitHeight(192);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            flashcardImage.setPreserveRatio(true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (!(o instanceof FlashcardCardView)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        FlashcardCardView that \u003d (FlashcardCardView) o;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (flashcardImage.getImage() \u003d\u003d null \u0026\u0026 that.flashcardImage.getImage() \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            return frontFace.getText().equals(that.frontFace.getText())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                \u0026\u0026 backFace.getText().equals(that.backFace.getText());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        } else if (flashcardImage.getImage() !\u003d null \u0026\u0026 that.flashcardImage \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        } else if (flashcardImage \u003d\u003d null \u0026\u0026 that.flashcardImage.getImage() !\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            return frontFace.getText().equals(that.frontFace.getText())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                \u0026\u0026 backFace.getText().equals(that.backFace.getText())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                \u0026\u0026 flashcardImage.getImage().equals(that.flashcardImage.getImage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return Objects.hash(frontFace, backFace, flashcardImage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 23,
      "sergiovieri": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FlashcardListCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " * A UI component that displays information of a {@code Flashcard} for use in a list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "public class FlashcardListCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private static final String FXML \u003d \"FlashcardListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on Addressbook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public final Flashcard flashcard;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private Label frontFace;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private Label backFace;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public FlashcardListCard(Flashcard flashcard, int displayedIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        this.flashcard \u003d flashcard;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        frontFace.setText(flashcard.getFrontFace().text);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        backFace.setText(flashcard.getBackFace().text);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        flashcard.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (!(other instanceof FlashcardListCard)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        FlashcardListCard card \u003d (FlashcardListCard) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            \u0026\u0026 flashcard.equals(card.flashcard);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 6,
      "sergiovieri": 10,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FlashcardListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robincyu"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * Panel containing the list of flashcards."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public class FlashcardListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private static final String FXML \u003d \"FlashcardListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(FlashcardListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private ListView\u003cFlashcard\u003e flashcardListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public FlashcardListPanel(ObservableList\u003cFlashcard\u003e flashcardList, ObservableValue\u003cFlashcard\u003e selectedFlashcard,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                              Consumer\u003cFlashcard\u003e onSelectedFlashcardChange) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        flashcardListView.setItems(flashcardList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        flashcardListView.setCellFactory(listView -\u003e new FlashcardListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        flashcardListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                flashcardListView.getSelectionModel().select(selectedFlashcard.getValue());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                logger.fine(\"Selection in flashcard list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                onSelectedFlashcardChange.accept(newValue);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        selectedFlashcard.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            logger.fine(\"Selected flashcard changed to: \" + newValue);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected flashcard,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            if (Objects.equals(flashcardListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                flashcardListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                int index \u003d flashcardListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                flashcardListView.scrollTo(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                flashcardListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Flashcard} using a {@code FlashcardListCard}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    class FlashcardListViewCell extends ListCell\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        protected void updateItem(Flashcard flashcard, boolean empty) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            super.updateItem(flashcard, empty);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            if (empty || flashcard \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                setGraphic(new FlashcardListCard(flashcard, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robincyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 69,
      "sergiovieri": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_FILE_PATH \u003d \"/docs/HelpWindow.html\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String userGuideUrl \u003d getClass().getResource(USERGUIDE_FILE_PATH).toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        browser.getEngine().load(userGuideUrl);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called on the primary stage."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/ul\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 2,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ListElementPointer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Has a cursor that points to an element in the list, and is able to iterate through the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * This is different from {@code ListIterator}, which has a cursor that points in between elements."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The {@code ListIterator}\u0027s behaviour: when making alternating calls of {@code next()} and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code previous()}, the same element is returned on both calls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * In contrast, {@code ListElementPointer}\u0027s behaviour: when making alternating calls of"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code next()} and {@code previous()}, the next and previous elements are returned respectively."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointer {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs {@code ListElementPointer} which is backed by a defensive copy of {@code list}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The cursor points to the last element in {@code list}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer(List\u003cString\u003e list) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e(list);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d this.list.size() - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code element} to the end of the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String element) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(element);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #next()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasNext() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        int nextIndex \u003d index + 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(nextIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #previous()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPrevious() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        int previousIndex \u003d index - 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(previousIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #current()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasCurrent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isWithinBounds(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return index \u003e\u003d 0 \u0026\u0026 index \u003c list.size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the next element in the list and advances the cursor position."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more next element in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public String next() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasNext()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(++index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the previous element in the list and moves the cursor position backwards."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more previous element in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public String previous() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasPrevious()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(--index);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current element in the list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if the list is empty."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public String current() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasCurrent()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof ListElementPointer)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer iterator \u003d (ListElementPointer) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.equals(iterator.list) \u0026\u0026 index \u003d\u003d iterator.index;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 3,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_FLASHCARD_SUCCESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private FlashcardListPanel flashcardListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private double xOffset \u003d 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private double yOffset \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private StackPane cardViewPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private StackPane flashcardListPanelPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private StackPane toolbar;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private ImageView closeButton;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private ImageView helpButton;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private ImageView minimizeButton;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        setupToolbar();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private void setupToolbar() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        toolbar.setOnMousePressed(mouseEvent -\u003e {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            xOffset \u003d mouseEvent.getSceneX();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            yOffset \u003d mouseEvent.getSceneY();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        });"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        toolbar.setOnMouseDragged(mouseEvent -\u003e {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            getPrimaryStage().setX(mouseEvent.getScreenX() - xOffset);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            getPrimaryStage().setY(mouseEvent.getScreenY() - yOffset);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        });"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        // setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        CardViewPanel cardViewPanel \u003d new CardViewPanel(logic.selectedFlashcardProperty(), logic.quizModeProperty());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        cardViewPlaceholder.getChildren().add(cardViewPanel.getRoot());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        flashcardListPanel \u003d new FlashcardListPanel(logic.getFilteredFlashcardList(), logic.selectedFlashcardProperty(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            this::setSelectedFlashcard);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        flashcardListPanelPlaceholder.getChildren().add(flashcardListPanel.getRoot());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getCardCollectionFilePath(),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            logic.getCardCollection());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private void setSelectedFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        ObservableList\u003cFlashcard\u003e filteredFlashcardList \u003d logic.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        int index \u003d filteredFlashcardList.indexOf(flashcard) + 1;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        String messageDisplay \u003d String.format(MESSAGE_SELECT_FLASHCARD_SUCCESS, index,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            flashcard.getSuccessRate(), flashcard.getQuizSrsStatus());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        resultDisplay.setFeedbackToUser(messageDisplay);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        logic.setSelectedFlashcard(flashcard);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Sets up the listeners needed."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    void setupListeners() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        logic.quizModeProperty().addListener(((observableValue, oldValue, newValue) -\u003e onQuizModeChanged(newValue)));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        closeButton.setOnMouseClicked(mouseEvent -\u003e handleExit());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        helpButton.setOnMouseClicked(mouseEvent -\u003e handleHelp());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        minimizeButton.setOnMouseClicked(mouseEvent -\u003e primaryStage.setIconified(true));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Prepares view when quiz mode changes."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * @param newQuizMode the changed quiz mode"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private void onQuizModeChanged(Integer newQuizMode) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (newQuizMode \u003d\u003d 0) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            endQuizMode();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            startQuizMode();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Starts a quiz mode."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private void startQuizMode() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        flashcardListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        QuizPanel quizPanel \u003d new QuizPanel(logic.getQuizFlashcards(),"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            logic.quizGoodProperty(), logic.quizBadProperty(), logic.isQuizSrsProperty());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        flashcardListPanelPlaceholder.getChildren().add(quizPanel.getRoot());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private void endQuizMode() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        flashcardListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        flashcardListPanelPlaceholder.getChildren().add(flashcardListPanel.getRoot());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public FlashcardListPanel getFlashcardListPanel() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return flashcardListPanel;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 15,
      "robincyu": 9,
      "sergiovieri": 70,
      "-": 186
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/QuizPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " * Panel containing the list of flashcards."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "public class QuizPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private static final String FXML \u003d \"QuizPanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private Label mode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private Label cardsRemaining;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private Label cardsRemainingLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private Label good;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private Label bad;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public QuizPanel(ObservableList\u003cFlashcard\u003e quizCards, ObservableValue\u003cInteger\u003e quizGood,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                     ObservableValue\u003cInteger\u003e quizBad, ObservableValue\u003cBoolean\u003e isQuizSrs) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        updateCardsRemaining(quizCards.size() + 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        quizCards.addListener((ListChangeListener\u003cFlashcard\u003e) change -\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            updateCardsRemaining(change.getList().size() + 1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        updateMode(isQuizSrs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        good.setText(String.valueOf(quizGood.getValue()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        bad.setText(String.valueOf(quizBad.getValue()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        quizGood.addListener(((observableValue, oldValue, newValue) -\u003e good.setText(String.valueOf(newValue))));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        quizBad.addListener(((observableValue, oldValue, newValue) -\u003e bad.setText(String.valueOf(newValue))));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Updates the cards remaining labels for Quiz Panel UI."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * @param size the number of cards remaining"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private void updateCardsRemaining(int size) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        cardsRemaining.setText(String.valueOf(size));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        if (size \u003d\u003d 1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            cardsRemainingLabel.setText(\"card remaining\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            cardsRemainingLabel.setText(\"cards remaining\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * set the mode label in quiz panel."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * @param isQuizSrs true if indicating SRS Mode, false if Review Mode."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private void updateMode(ObservableValue\u003cBoolean\u003e isQuizSrs) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        if (isQuizSrs.getValue()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            mode.setText(\"Quiz Mode\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            mode.setText(\"Review Mode\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 17,
      "sergiovieri": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.ReadOnlyCardCollection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label syncStatus;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public StatusBarFooter(Path saveLocation, ReadOnlyCardCollection cardCollection) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        cardCollection.addListener(observable -\u003e updateSyncStatus());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates \"last updated\" status to the current time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void updateSyncStatus() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 4,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Ui.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Starts the UI (and the App)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 3,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import javafx.stage.StageStyle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/ic_launcher/res/mipmap-xxxhdpi/ic_launcher.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            mainWindow.getPrimaryStage().initStyle(StageStyle.UNDECORATED);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            mainWindow.setupListeners();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sergiovieri": 4,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root     Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 6,
      "-": 87
    }
  },
  {
    "path": "src/main/resources/view/CardViewPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003cStackPane fx:id\u003d\"cardPlaceholder\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "sergiovieri": 6
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" onKeyPressed\u003d\"#handleKeyPress\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robincyu"
        },
        "content": "               promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "robincyu": 2,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    -fx-background-color: derive(#1a1f27, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    -fx-base: #1a1f27;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    -fx-control-inner-background: #1a1f27;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    -fx-background-color: #1a1f27;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    -fx-background-color: derive(#1a1f27, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    -fx-background-color: derive(#1a1f27, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    -fx-background-color: derive(#1a1f27, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    -fx-background-color: derive(#1a1f27, 20%);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    -fx-background-color: derive(#1a1f27, 30%);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    -fx-background-color: derive(#1a1f27, 22%);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     -fx-background-color: derive(#1a1f27, 20%);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     -fx-background-color: derive(#1a1f27, 20%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     -fx-border-color: derive(#1a1f27, 10%);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lungsin"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lungsin"
        },
        "content": ".pane-without-border {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     -fx-background-color: derive(#1a1f27, 20%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     -fx-border-color: transparent;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    -fx-background-color: derive(#1a1f27, 30%);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lungsin"
        },
        "content": ".result-display .content {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     -fx-background-color: white;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lungsin"
        },
        "content": " }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    -fx-background-color: derive(#1a1f27, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    -fx-border-color: derive(#1a1f27, 25%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    -fx-background-color: derive(#1a1f27, 30%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    -fx-border-color: derive(#1a1f27, 30%);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    -fx-background-color: derive(#1a1f27, 30%);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    -fx-background-color: derive(#1a1f27, 50%);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    -fx-background-color: derive(#1a1f27, 20%);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    -fx-background-color: #1a1f27;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lungsin"
        },
        "content": "  -fx-text-fill: #1a1f27;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    -fx-background-color: #1a1f27;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    -fx-background-color: #1a1f27;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    -fx-background-color: #1a1f27;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    -fx-background-color: derive(#1a1f27, 25%);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    -fx-background-color: derive(#1a1f27, 20%);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    -fx-background-color: derive(#1a1f27, 50%);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "robincyu"
        },
        "content": "#filterField, #flashcardListPanel, #flashcardWebpage {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    -fx-background-color: derive(#1a1f27, 20%);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 36,
      "robincyu": 4,
      "sergiovieri": 2,
      "-": 320
    }
  },
  {
    "path": "src/main/resources/view/FlashcardCardView.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003c?import javafx.scene.shape.Rectangle?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    \u003cAnchorPane minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"200.0\" prefWidth\u003d\"300.0\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                style\u003d\"-fx-background-color: #dfe4ea; -fx-background-radius: 30;\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "              AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            \u003cLabel fx:id\u003d\"frontFace\" alignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                   style\u003d\"-fx-text-fill: black; -fx-opacity: 1.0; -fx-font-size: 30pt;\" text\u003d\"\\$frontText\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                   textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                    \u003cFont size\u003d\"30.0\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            \u003cImageView fx:id\u003d\"flashcardImage\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            \u003cLabel fx:id\u003d\"backFace\" style\u003d\"-fx-font-size: 20pt;\" text\u003d\"\\$backText\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                    \u003cFont size\u003d\"20.0\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" height\u003d\"1000.0\" opacity\u003d\"0.02\" rotate\u003d\"50.0\" stroke\u003d\"BLACK\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                   strokeType\u003d\"INSIDE\" translateX\u003d\"300.0\" translateY\u003d\"-600.0\" width\u003d\"1000.0\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            \u003cInsets bottom\u003d\"20.0\" left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"20.0\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        \u003cInsets bottom\u003d\"20.0\" left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"20.0\"/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "robincyu": 7,
      "sergiovieri": 34
    }
  },
  {
    "path": "src/main/resources/view/FlashcardListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                \u003cLabel fx:id\u003d\"frontFace\" text\u003d\"\\$frontFace\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            \u003cLabel fx:id\u003d\"backFace\" text\u003d\"\\$backFace\" styleClass\u003d\"cell_small_label\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robincyu"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "robincyu": 31,
      "sergiovieri": 2
    }
  },
  {
    "path": "src/main/resources/view/FlashcardListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    \u003cListView fx:id\u003d\"flashcardListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "robincyu": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003c!-- TODO: set a more appropriate initial size --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Help\" maximized\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cWebView fx:id\u003d\"browser\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "sergiovieri": 3,
      "-": 15
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lungsin"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" minHeight\u003d\"600\" minWidth\u003d\"950\" onCloseRequest\u003d\"#handleExit\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "         title\u003d\"Acquizition\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        \u003cImage url\u003d\"@/images/ic_launcher/res/mipmap-xxxhdpi/ic_launcher.png\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            \u003cBorderPane\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                \u003ccenter\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cVBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-without-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"80\" minHeight\u003d\"80\" prefHeight\u003d\"80\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                                   styleClass\u003d\"pane-without-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                            \u003cVBox fx:id\u003d\"flashcardList\" maxWidth\u003d\"300\" minWidth\u003d\"300\" prefWidth\u003d\"300\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                  SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"flashcardListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"cardViewPlaceholder\" prefWidth\u003d\"340\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                \u003c/center\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                \u003ctop\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"toolbar\" style\u003d\"-fx-background-color: #dfe4ea;\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                        \u003cHBox alignment\u003d\"CENTER_LEFT\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"35.0\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                              BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                \u003cImageView fitHeight\u003d\"25.0\" fitWidth\u003d\"25.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                    \u003cimage\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                        \u003cImage url\u003d\"@../images/ic_launcher/res/mipmap-xhdpi/ic_launcher.png\"/\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                    \u003c/image\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                \u003cImageView fitHeight\u003d\"150.0\" fitWidth\u003d\"100.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                    \u003cimage\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                        \u003cImage url\u003d\"@../images/acquizition.png\"/\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                    \u003c/image\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                        \u003cInsets top\u003d\"2.0\"/\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                        \u003cHBox alignment\u003d\"CENTER_RIGHT\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"35.0\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                              spacing\u003d\"10.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                \u003cImageView fx:id\u003d\"minimizeButton\" fitHeight\u003d\"20.0\" fitWidth\u003d\"20.0\" pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                           preserveRatio\u003d\"true\" style\u003d\"-fx-cursor: hand;\"\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                    \u003cimage\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                        \u003cImage url\u003d\"@../images/minus.png\"/\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                    \u003c/image\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                \u003cImageView fx:id\u003d\"helpButton\" fitHeight\u003d\"15.0\" fitWidth\u003d\"15.0\" pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                           preserveRatio\u003d\"true\" style\u003d\"-fx-cursor: hand;\"\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                    \u003cimage\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                        \u003cImage url\u003d\"@../images/help-blue.png\"/\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                    \u003c/image\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                \u003cImageView fx:id\u003d\"closeButton\" fitHeight\u003d\"20.0\" fitWidth\u003d\"20.0\" pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                           preserveRatio\u003d\"true\" style\u003d\"-fx-cursor: hand;\"\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                    \u003cimage\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                        \u003cImage url\u003d\"@../images/close.png\"/\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                    \u003c/image\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                                \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                \u003c/top\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "lungsin": 4,
      "robincyu": 1,
      "sergiovieri": 69,
      "-": 41
    }
  },
  {
    "path": "src/main/resources/view/QuizPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lungsin"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"TOP_CENTER\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    \u003cLabel fx:id\u003d\"mode\" style\u003d\"-fx-font-size: 32; -fx-text-fill: white;\" text\u003d\"Review Mode\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            \u003cInsets bottom\u003d\"25.0\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    \u003cLabel fx:id\u003d\"cardsRemaining\" style\u003d\"-fx-font-size: 64; -fx-text-fill: white;\" text\u003d\"41\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    \u003cLabel fx:id\u003d\"cardsRemainingLabel\" style\u003d\"-fx-font-size: 26; -fx-text-fill: white;\" text\u003d\"cards remaining\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"70.0\" prefWidth\u003d\"120.0\" style\u003d\"-fx-background-color: #3e7b91#3e7b91; -fx-background-radius: 10;\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            \u003cLabel style\u003d\"-fx-font-size: 20; -fx-text-fill: white;\" text\u003d\"Good\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            \u003cLabel fx:id\u003d\"good\" style\u003d\"-fx-text-fill: white; -fx-font-size: 16;\" text\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                    \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            \u003cInsets top\u003d\"30.0\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"70.0\" prefWidth\u003d\"120.0\" style\u003d\"-fx-background-color: #ad3b24#ad3b24; -fx-background-radius: 10;\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            \u003cLabel style\u003d\"-fx-font-size: 20; -fx-text-fill: white;\" text\u003d\"Bad\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            \u003cLabel fx:id\u003d\"bad\" style\u003d\"-fx-text-fill: white; -fx-font-size: 16;\" text\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                    \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            \u003cInsets top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "lungsin": 10,
      "sergiovieri": 30
    }
  },
  {
    "path": "src/test/data/JsonCardCollectionStorageTest/invalidAndValidCardCardCollection.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robincyu"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robincyu"
        },
        "content": "  \"flashcards\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": "      \"name\": \"Valid Flashcard\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robincyu"
        },
        "content": "      \"phone\": \"9482424\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": "      \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robincyu"
        },
        "content": "      \"address\": \"4th street\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": "      \"name\": \"Flashcard With Invalid Phone Field\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": "      \"phone\": \"948asdf2424\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": "      \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robincyu"
        },
        "content": "      \"address\": \"4th street\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 16
    }
  },
  {
    "path": "src/test/data/JsonCardCollectionStorageTest/invalidCardCardCollection.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robincyu"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robincyu"
        },
        "content": "  \"flashcards\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": "      \"name\": \"Flashcard with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robincyu"
        },
        "content": "      \"phone\": \"9482424\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": "      \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robincyu"
        },
        "content": "      \"address\": \"4th street\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robincyu"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 10
    }
  },
  {
    "path": "src/test/data/JsonSerializableCardCollectionTest/duplicateCardCardCollection.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robincyu"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robincyu"
        },
        "content": "  \"flashcards\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "      \"frontFace\": \"Hello\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "      \"backFace\": \"Halo\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": "      \"imagePath\": \"\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lungsin"
        },
        "content": "      \"statistics\": \"4 out of 7 attempts.\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lungsin"
        },
        "content": "      \"proficiency\" : \"inactive until 0 proficiency level 3\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robincyu"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        \"indonesian\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "      \"frontFace\": \"Hello\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "      \"backFace\": \"Halo\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": "      \"imagePath\": \"\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lungsin"
        },
        "content": "      \"statistics\": \"4 out of 7 attempts.\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lungsin"
        },
        "content": "      \"proficiency\" : \"inactive until 0 proficiency level 3\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        \"chinese\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robincyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 4,
      "robincyu": 12,
      "sergiovieri": 8
    }
  },
  {
    "path": "src/test/data/JsonSerializableCardCollectionTest/invalidCardCardCollection.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robincyu"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robincyu"
        },
        "content": "  \"flashcards\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": "      \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robincyu"
        },
        "content": "      \"phone\": \"9482424\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": "      \"email\": \"invalid@email!3e\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robincyu"
        },
        "content": "      \"address\": \"4th street\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robincyu"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 10
    }
  },
  {
    "path": "src/test/data/JsonSerializableCardCollectionTest/typicalCardsCardCollection.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robincyu"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robincyu"
        },
        "content": "  \"_comment\": \"CardCollection save file which contains the same Flashcard values as in TypicalFlashcards#getTypicalCardCollection()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robincyu"
        },
        "content": "  \"flashcards\": ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "      \"frontFace\": \"Hello\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "      \"backFace\": \"Halo\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robincyu"
        },
        "content": "      \"imagePath\": \"\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lungsin"
        },
        "content": "      \"statistics\": \"9 out of 10 attempts.\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lungsin"
        },
        "content": "      \"proficiency\" : \"inactive until 0 proficiency level 3\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        \"indonesian\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "      \"frontFace\": \"Hola\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "      \"backFace\": \"Haha\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": "      \"imagePath\": \"\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lungsin"
        },
        "content": "      \"statistics\": \"4 out of 7 attempts.\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lungsin"
        },
        "content": "      \"proficiency\" : \"inactive until 0 proficiency level 3\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        \"spanish\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robincyu"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "      \"frontFace\": \"Eat\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "      \"backFace\": \"吃\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robincyu"
        },
        "content": "      \"imagePath\": \"\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lungsin"
        },
        "content": "      \"statistics\": \"0 out of 0 attempts.\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lungsin"
        },
        "content": "      \"proficiency\" : \"inactive until 0 proficiency level 0\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        \"chinese\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robincyu"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "      \"frontFace\": \"Newton\u0027s 3rd Law\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "      \"backFace\": \"idk\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robincyu"
        },
        "content": "      \"imagePath\": \"\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lungsin"
        },
        "content": "      \"statistics\": \"0 out of 10 attempts.\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lungsin"
        },
        "content": "      \"proficiency\" : \"inactive until 0 proficiency level 0\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "      \"tagged\": ["
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        \"alevel\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        \"physics\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    },"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "      \"frontFace\": \"Robin\u0027s email\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "      \"backFace\": \"robincyu96@gmail.com\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robincyu"
        },
        "content": "      \"imagePath\": \"\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lungsin"
        },
        "content": "      \"statistics\": \"100 out of 100 attempts.\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lungsin"
        },
        "content": "      \"proficiency\" : \"inactive until 0 proficiency level 0\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": "      \"tagged\": []"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robincyu"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robincyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 10,
      "robincyu": 27,
      "sergiovieri": 17
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\": {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\": 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\": 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\": \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\": {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\": 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\": 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\": 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": "  \"cardCollectionFilePath\": \"cardcollection.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\": {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\": 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\": 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\": {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\": 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\": 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": "  \"cardCollectionFilePath\": \"cardcollection.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/data/importCommandTestFiles/flashcards.txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " f/Hellop b/Halo t/indonesian"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " f/Holap b/Haha t/spanish"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " f/Eatp b/吃 t/chinese"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " f/Newton\u0027sp 3rd Law b/idk t/alevel t/physics"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " f/Robin\u0027sp email b/robincyu96@gmail.com"
      }
    ],
    "authorContributionMap": {
      "lucatriglia": 5
    }
  },
  {
    "path": "src/test/data/importCommandTestFiles/flashcardsCorrupted.txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " fs/Hellop b/Halo t/indonesian"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " f/Holap b/Haha t/spanish"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " f/Eatp b/吃 t/chinese"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " f/Newton\u0027sp 3rd Law b/idk t/alevel t/physics"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " f/Robin\u0027sp email b/robincyu96@gmail.com"
      }
    ],
    "authorContributionMap": {
      "lucatriglia": 5
    }
  },
  {
    "path": "src/test/data/importCommandTestFiles/flashcardsDuplicate.txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " f/Hellop b/Halo t/indonesian"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " f/Hola b/Haha t/spanish"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " f/Eatp b/吃 t/chinese"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " f/Newton\u0027sp 3rd Law b/idk t/alevel t/physics"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " f/Robin\u0027sp email b/robincyu96@gmail.com"
      }
    ],
    "authorContributionMap": {
      "lucatriglia": 5
    }
  },
  {
    "path": "src/test/data/shareCommandTestFiles/flashcardsExpected.txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robincyu"
        },
        "content": " f/Hello b/Halo t/indonesian"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robincyu"
        },
        "content": " f/Hola b/Haha t/spanish"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robincyu"
        },
        "content": " f/Eat b/吃 t/chinese"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": " f/Newton\u0027s 3rd Law b/idk t/alevel t/physics"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robincyu"
        },
        "content": " f/Robin\u0027s email b/robincyu96@gmail.com"
      }
    ],
    "authorContributionMap": {
      "robincyu": 5
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CardViewHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " * A handler for the {@code CardView} of the UI."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "public class CardViewHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final String CARD_VIEW_ID \u003d \"#cardPlaceholder\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public CardViewHandle(Node cardViewPaneNode) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        super(cardViewPaneNode);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sergiovieri": 16
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/FlashcardCardViewHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " * Provides a handle to a flashcard card in the flashcard list panel."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "public class FlashcardCardViewHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private static final String FRONTFACE_FIELD_ID \u003d \"#frontFace\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private static final String BACKFACE_FIELD_ID \u003d \"#backFace\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private final Label frontFaceLabel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private final Label backFaceLabel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public FlashcardCardViewHandle(Node cardNode) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        frontFaceLabel \u003d getChildNode(FRONTFACE_FIELD_ID);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        backFaceLabel \u003d getChildNode(BACKFACE_FIELD_ID);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public String getFrontFace() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return frontFaceLabel.getText();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public String getBackFace() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return backFaceLabel.getText();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Returns true if this handle contains {@code flashcard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public boolean equals(Flashcard flashcard) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return getFrontFace().equals(flashcard.getFrontFace().text)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            \u0026\u0026 getBackFace().equals(flashcard.getBackFace().text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sergiovieri": 39
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/FlashcardListCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * Provides a handle to a flashcard card in the flashcard list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "public class FlashcardListCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private static final String FRONTFACE_FIELD_ID \u003d \"#frontFace\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private static final String BACKFACE_FIELD_ID \u003d \"#backFace\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private final Label frontFaceLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private final Label backFaceLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public FlashcardListCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        frontFaceLabel \u003d getChildNode(FRONTFACE_FIELD_ID);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        backFaceLabel \u003d getChildNode(BACKFACE_FIELD_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(Label.class::cast)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public String getFrontFace() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return frontFaceLabel.getText();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public String getBackFace() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return backFaceLabel.getText();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(Label::getText)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns true if this handle contains {@code flashcard}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public boolean equals(Flashcard flashcard) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return getFrontFace().equals(flashcard.getFrontFace().text)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            \u0026\u0026 getBackFace().equals(flashcard.getBackFace().text)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(flashcard.getTags().stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 5,
      "sergiovieri": 14,
      "-": 52
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/FlashcardListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robincyu"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " * Provides a handle for {@code FlashcardListPanel} containing the list of {@code FlashcardListCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robincyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public class FlashcardListPanelHandle extends NodeHandle\u003cListView\u003cFlashcard\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static final String FLASHCARD_LIST_VIEW_ID \u003d \"#flashcardListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private Optional\u003cFlashcard\u003e lastRememberedSelectedFlashcardCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public FlashcardListPanelHandle(ListView\u003cFlashcard\u003e flashcardListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        super(flashcardListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Returns a handle to the selected {@code FlashcardListCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @throws AssertionError        if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public FlashcardListCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        List\u003cFlashcard\u003e selectedFlashcardList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (selectedFlashcardList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            throw new AssertionError(\"Flashcard list size expected 1.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            .map(FlashcardListCardHandle::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            .filter(handle -\u003e handle.equals(selectedFlashcardList.get(0)))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            .findFirst()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        List\u003cFlashcard\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Navigates the listview to display {@code flashcard}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void navigateToCard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (!getRootNode().getItems().contains(flashcard)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            throw new IllegalArgumentException(\"Flashcard does not exist.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        guiRobot.interact(() -\u003e getRootNode().scrollTo(flashcard));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        guiRobot.interact(() -\u003e getRootNode().scrollTo(index));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Selects the {@code FlashcardListCard} at {@code index} in the list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns the flashcard card handle of a flashcard associated with the {@code index} in the list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public FlashcardListCardHandle getFlashcardCardHandle(int index) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            .map(FlashcardListCardHandle::new)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            .filter(handle -\u003e handle.equals(getFlashcard(index)))"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            .findFirst()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private Flashcard getFlashcard(int index) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Remembers the selected {@code FlashcardListCard} in the list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void rememberSelectedFlashcardCard() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        List\u003cFlashcard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            lastRememberedSelectedFlashcardCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            lastRememberedSelectedFlashcardCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Returns true if the selected {@code FlashcardListCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * {@code rememberSelectedFlashcardCard()} call."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public boolean isSelectedFlashcardCardChanged() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        List\u003cFlashcard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            return lastRememberedSelectedFlashcardCard.isPresent();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            return !lastRememberedSelectedFlashcardCard.isPresent()"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                || !lastRememberedSelectedFlashcardCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "robincyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 146,
      "sergiovieri": 11
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private final FlashcardListPanelHandle flashcardListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private final ToolbarHandle toolbar;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private final CardViewHandle cardViewPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        flashcardListPanel \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            new FlashcardListPanelHandle(getChildNode(FlashcardListPanelHandle.FLASHCARD_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        toolbar \u003d new ToolbarHandle(getChildNode(ToolbarHandle.TOOLBAR_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        cardViewPanel \u003d new CardViewHandle(getChildNode(CardViewHandle.CARD_VIEW_ID));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public FlashcardListPanelHandle getFlashcardListPanel() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return flashcardListPanel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public ToolbarHandle getToolbar() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return toolbar;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public CardViewHandle getCardViewPanel() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return cardViewPanel;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 5,
      "sergiovieri": 8,
      "-": 39
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/QuizPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " * Provides a handle to a flashcard card in the flashcard list panel."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "public class QuizPanelHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private static final String CARDS_REMAINING_ID \u003d \"#cardsRemaining\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private static final String GOOD_ID \u003d \"#good\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private static final String BAD_ID \u003d \"#bad\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private final Label cardsRemaining;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private final Label good;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private final Label bad;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public QuizPanelHandle(Node cardNode) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        cardsRemaining \u003d getChildNode(CARDS_REMAINING_ID);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        good \u003d getChildNode(GOOD_ID);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        bad \u003d getChildNode(BAD_ID);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public int getCardsRemaining() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return Integer.valueOf(cardsRemaining.getText());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public int getGood() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return Integer.valueOf(good.getText());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public int getBad() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return Integer.valueOf(bad.getText());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Returns true if this handle displays the correct cardsRemaining, good, and bad."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public boolean equals(int cardsRemaining, int good, int bad) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return getCardsRemaining() \u003d\u003d cardsRemaining"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            \u0026\u0026 getGood() \u003d\u003d good"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            \u0026\u0026 getBad() \u003d\u003d bad;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sergiovieri": 46
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/ToolbarHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " * Provides a handle to the toolbar of the app."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "public class ToolbarHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final String TOOLBAR_ID \u003d \"#toolbar\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public ToolbarHandle(Node toolbarNode) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        super(toolbarNode);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Opens the {@code HelpWindow} using the menu bar in {@code MainWindow}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        guiRobot.clickOn(\"#helpButton\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sergiovieri": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.CardCollection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.ReadOnlyCardCollection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.storage.JsonCardCollectionStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.json\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    protected Supplier\u003cReadOnlyCardCollection\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyCardCollection\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            JsonCardCollectionStorage jsonCardCollectionStorage \u003d new JsonCardCollectionStorage(saveFileLocation);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                jsonCardCollectionStorage.saveCardCollection(initialDataSupplier.get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        userPrefs.setCardCollectionFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns a defensive copy of the card collection data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public CardCollection readStorageCardCollection() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            return new CardCollection(storage.readCardCollection().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            throw new AssertionError(\"Data is not in the CardCollection format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return storage.getCardCollectionFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Model copy \u003d new ModelManager((model.getCardCollection()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public Integer getModelQuizMode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return model.getQuizMode();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public Boolean getModelIsQuizSrs() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return model.getIsQuizSrs().getValue();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public int getModelQuizFlashcardSize() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return model.getQuizFlashcards().size();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 4,
      "robincyu": 15,
      "sergiovieri": 8,
      "-": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateOneBasedFailure(0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateZeroBasedFailure(-1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromZeroBased(int)} with {@code invalidZeroBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateZeroBasedFailure(int invalidZeroBasedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidZeroBasedIndex, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromOneBased(int)} with {@code invalidOneBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateOneBasedFailure(int invalidOneBasedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidOneBasedIndex, false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes either {@code Index#fromZeroBased(int)} (if it is zero based), or {@code Index#fromOneBased(int)}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * (if it is one based), and confirms that an {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateFailure(int invalidIndex, boolean isZeroBased) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isZeroBased) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromZeroBased(invalidIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromOneBased(invalidIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected IndexOutOfBoundsException was not thrown.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behaviour"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        final Index fifthFlashcardIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertTrue(fifthFlashcardIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertTrue(fifthFlashcardIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertTrue(fifthFlashcardIndex.equals(fifthFlashcardIndex));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertFalse(fifthFlashcardIndex.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertFalse(fifthFlashcardIndex.equals(5.0f));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertFalse(fifthFlashcardIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 7,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/ic_launcher/res/mipmap-xxxhdpi/ic_launcher.png\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false, errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sergiovieri": 1,
      "-": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BACKFACE_DESC_GOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FRONTFACE_DESC_GOOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.GOOD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.ReadOnlyCardCollection;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.storage.JsonCardCollectionStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        JsonCardCollectionStorage cardCollectionStorage \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            new JsonCardCollectionStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        StorageManager storage \u003d new StorageManager(cardCollectionStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_EMPTY, model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // Setup LogicManager with JsonCardCollectionIoExceptionThrowingStub"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        JsonCardCollectionStorage cardCollectionStorage \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            new JsonCardCollectionIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        StorageManager storage \u003d new StorageManager(cardCollectionStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + FRONTFACE_DESC_GOOD + BACKFACE_DESC_GOOD;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Flashcard expectedFlashcard \u003d new FlashcardBuilder(GOOD).withTags().build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        expectedModel.addFlashcard(expectedFlashcard);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        expectedModel.commitCardCollection(AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(CommandException.class, addCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(addCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void getFilteredFlashcardList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        logic.getFilteredFlashcardList().remove(0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getCardCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * - {@code expectedModel}\u0027s card collection was saved to the storage file."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                                       String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private static class JsonCardCollectionIoExceptionThrowingStub extends JsonCardCollectionStorage {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        private JsonCardCollectionIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        public void saveCardCollection(ReadOnlyCardCollection cardCollection, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 2,
      "robincyu": 25,
      "sergiovieri": 5,
      "-": 159
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalCardCollection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        model \u003d new ModelManager(getTypicalCardCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void execute_newFlashcard_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Flashcard validFlashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getCardCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        expectedModel.addFlashcard(validFlashcard);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        expectedModel.commitCardCollection(AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCommandSuccess(new AddCommand(validFlashcard), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            String.format(AddCommand.MESSAGE_SUCCESS, validFlashcard), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void execute_duplicateFlashcard_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Flashcard flashcardInList \u003d model.getCardCollection().getFlashcardList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCommandFailure(new AddCommand(flashcardInList), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            AddCommand.MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 1,
      "robincyu": 14,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.CardCollection;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.ReadOnlyCardCollection;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void constructor_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void execute_flashcardAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        ModelStubAcceptingFlashcardAdded modelStub \u003d new ModelStubAcceptingFlashcardAdded();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Flashcard validFlashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validFlashcard).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validFlashcard), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertEquals(Arrays.asList(validFlashcard), modelStub.flashcardsAdded);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void execute_duplicateFlashcard_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Flashcard validFlashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validFlashcard);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithFlashcard(validFlashcard);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Flashcard alice \u003d new FlashcardBuilder().withFrontFace(\"Alice\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Flashcard bob \u003d new FlashcardBuilder().withFrontFace(\"Bob\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        private Integer quizMode \u003d 0;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        public Path getCardCollectionFilePath() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        public void setCardCollectionFilePath(Path cardCollectionFilePath) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        public void addFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        public void setCardCollection(ReadOnlyCardCollection cardCollection) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        public ReadOnlyCardCollection getCardCollection() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        public void deleteFlashcard(Flashcard target) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        public ObservableList\u003cFlashcard\u003e getFilteredFlashcardList() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        public void updateFilteredFlashcardList(Predicate\u003cFlashcard\u003e predicate) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        public boolean canUndoCardCollection() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        public boolean canRedoCardCollection() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        public String undoCardCollection() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        public String redoCardCollection() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        public void commitCardCollection(String commandText) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        public void commitCardCollection() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        public ReadOnlyProperty\u003cFlashcard\u003e selectedFlashcardProperty() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        public Flashcard getSelectedFlashcard() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        public void setSelectedFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        public ReadOnlyProperty\u003cInteger\u003e quizModeProperty() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        public Integer getQuizMode() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            return quizMode;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        public void setQuizMode(Integer quizMode) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            this.quizMode \u003d quizMode;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        public ObservableList\u003cFlashcard\u003e getQuizFlashcards() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        public void setQuizFlashcards(ObservableList\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        public void setIsQuizSrs(Boolean isQuizSrs) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        public void showNextQuizCard() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        public ReadOnlyProperty\u003cInteger\u003e getQuizGood() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        public ReadOnlyProperty\u003cInteger\u003e getQuizBad() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        public ReadOnlyProperty\u003cBoolean\u003e getIsQuizSrs() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        public void resetQuizStat() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        public void addGoodFeedback() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        public void addBadFeedback() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * A Model stub that contains a single flashcard."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private class ModelStubWithFlashcard extends ModelStub {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        private final Flashcard flashcard;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        ModelStubWithFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            this.flashcard \u003d flashcard;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            return this.flashcard.isSameFlashcard(flashcard);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * A Model stub that always accept the flashcard being added."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private class ModelStubAcceptingFlashcardAdded extends ModelStub {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        final ArrayList\u003cFlashcard\u003e flashcardsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            return flashcardsAdded.stream().anyMatch(flashcard::isSameFlashcard);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        public void addFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            requireNonNull(flashcard);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            flashcardsAdded.add(flashcard);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        public void commitCardCollection(String commandText) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        public ReadOnlyCardCollection getCardCollection() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            return new CardCollection();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 10,
      "robincyu": 53,
      "sergiovieri": 29,
      "-": 233
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/BadCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalCardCollection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.commons.core.QuizState;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " * Contains integration tests and unit tests for BadCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "public class BadCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCardCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void execute_bad_success() throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        new QuizCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        new BadCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertEquals((int) model.getQuizBad().getValue(), 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void execute_emptyQuizFlashcards_exitsQuiz() throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        new QuizCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        model.getQuizFlashcards().clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        new BadCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertEquals(QuizState.NOT_QUIZ_MODE, (int) model.getQuizMode());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void execute_notInQuiz_failure() throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertCommandFailure(new BadCommand(), model, commandHistory, BadCommand.MESSAGE_FAILURE_NOT_QUIZ_MODE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sergiovieri": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalCardCollection;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.CardCollection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void execute_emptyCardCollection_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        expectedModel.commitCardCollection(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void execute_nonEmptyCardCollection_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalCardCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalCardCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        expectedModel.setCardCollection(new CardCollection());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        expectedModel.commitCardCollection(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 2,
      "robincyu": 7,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BACK_FACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FRONT_FACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.CardCollection;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.model.flashcard.FlashcardPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.testutil.EditFlashcardDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final String VALID_FRONTFACE_GOOD \u003d \"Good\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final String VALID_BACKFACE_GOOD \u003d \"Anjir\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public static final String VALID_FRONTFACE_DUCK \u003d \"Duck\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final String VALID_FRONTFACE_HITBAG \u003d \"Hit Bag\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final String VALID_BACKFACE_HITBAG \u003d \"打包\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final String VALID_TAG_INDONESIAN \u003d \"indonesian\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final String VALID_TAG_CHINESE \u003d \"chinese\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public static final String VALID_MIN_BOUND_STRING \u003d \"0\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public static final String VALID_MAX_BOUND_STRING \u003d \"100\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public static final double VALID_MIN_BOUND \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public static final double VALID_MAX_BOUND \u003d 100;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public static final double VALID_BOUND_75 \u003d 75;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static final Optional\u003cString\u003e VALID_IMAGE_NONE \u003d Optional.empty();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final String FRONTFACE_DESC_GOOD \u003d \" \" + PREFIX_FRONT_FACE + VALID_FRONTFACE_GOOD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final String BACKFACE_DESC_GOOD \u003d \" \" + PREFIX_BACK_FACE + VALID_BACKFACE_GOOD;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final String FRONTFACE_DESC_HITBAG \u003d \" \" + PREFIX_FRONT_FACE + VALID_FRONTFACE_HITBAG;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final String BACKFACE_DESC_HITBAG \u003d \" \" + PREFIX_BACK_FACE + VALID_BACKFACE_HITBAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public static final String FRONTFACE_DESC_DUCK \u003d \" \" + PREFIX_FRONT_FACE + VALID_FRONTFACE_DUCK;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final String TAG_DESC_INDONESIAN \u003d \" \" + PREFIX_TAG + VALID_TAG_INDONESIAN;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final String TAG_DESC_CHINESE \u003d \" \" + PREFIX_TAG + VALID_TAG_CHINESE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final String INVALID_FRONTFACE_DESC \u003d \" \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        + PREFIX_FRONT_FACE"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        + \" \"; // empty string not allowed for face"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final String INVALID_BACKFACE_DESC \u003d \" \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        + PREFIX_BACK_FACE"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        + \" \"; // empty string not allowed for face"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"physics*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public static final String INVALID_PREFIX_UNDEFINED \u003d \"/a\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final EditCommand.EditFlashcardDescriptor DESC_GOOD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final EditCommand.EditFlashcardDescriptor DESC_HITBAG;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        DESC_GOOD \u003d new EditFlashcardDescriptorBuilder().withFrontFace(VALID_FRONTFACE_GOOD)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            .withBackFace(VALID_BACKFACE_GOOD).withTags(VALID_TAG_INDONESIAN).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        DESC_HITBAG \u003d new EditFlashcardDescriptorBuilder().withFrontFace(VALID_FRONTFACE_HITBAG)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            .withBackFace(VALID_BACKFACE_HITBAG).withTags(VALID_TAG_CHINESE).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                                            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                                            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * - the card collection, filtered flashcard list and selected flashcard in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                                            String expectedMessage) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        CardCollection expectedCardCollection \u003d new CardCollection(actualModel.getCardCollection());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        List\u003cFlashcard\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Flashcard expectedSelectedFlashcard \u003d actualModel.getSelectedFlashcard();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            assertEquals(expectedCardCollection, actualModel.getCardCollection());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            assertEquals(expectedSelectedFlashcard, actualModel.getSelectedFlashcard());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the flashcard at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * {@code model}\u0027s card collection."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static void showFlashcardAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredFlashcardList().size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Flashcard flashcard \u003d model.getFilteredFlashcardList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        final String[] splitFront \u003d flashcard.getFrontFace().text.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        final String[] splitBack \u003d flashcard.getBackFace().text.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d flashcard.getTags();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        ArrayList\u003cString\u003e splitTag \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        for (Tag tag : tagSet) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            splitTag.add(tag.tagName);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        final double[] successRateRange \u003d {VALID_MIN_BOUND, VALID_MAX_BOUND};"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        model.updateFilteredFlashcardList("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            new FlashcardPredicate(Arrays.asList(splitFront), Arrays.asList(splitBack), splitTag, successRateRange));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertEquals(1, model.getFilteredFlashcardList().size());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Deletes the first flashcard in {@code model}\u0027s filtered list from {@code model}\u0027s card collection."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static void deleteFirstFlashcard(Model model) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Flashcard firstFlashcard \u003d model.getFilteredFlashcardList().get(0);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        model.deleteFlashcard(firstFlashcard);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        model.commitCardCollection(\"delete 1\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 1,
      "lucatriglia": 18,
      "robincyu": 24,
      "sergiovieri": 34,
      "-": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showFlashcardAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalCardCollection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCardCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Flashcard flashcardToDelete \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_FLASHCARD_SUCCESS, flashcardToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getCardCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        expectedModel.deleteFlashcard(flashcardToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        expectedModel.commitCardCollection(DeleteCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFlashcardList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Flashcard flashcardToDelete \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_FLASHCARD_SUCCESS, flashcardToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getCardCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        expectedModel.deleteFlashcard(flashcardToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        expectedModel.commitCardCollection(DeleteCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        showNoFlashcard(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of card collection list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getCardCollection().getFlashcardList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Flashcard flashcardToDelete \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getCardCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        expectedModel.deleteFlashcard(flashcardToDelete);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        expectedModel.commitCardCollection(DeleteCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // delete -\u003e first flashcard deleted"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // undo -\u003e reverts cardCollection back to previous state and filtered flashcard list to show all flashcards"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        expectedModel.undoCardCollection();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        String undoMessageSuccess \u003d String.format(UndoCommand.MESSAGE_SUCCESS, DeleteCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, undoMessageSuccess, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // redo -\u003e same first flashcard deleted again"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        expectedModel.redoCardCollection();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        String redoMessageSuccess \u003d String.format(RedoCommand.MESSAGE_SUCCESS, DeleteCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, redoMessageSuccess, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFlashcardList().size() + 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // execution failed -\u003e card collection state not added into model"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // single card collection state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * 1. Deletes a {@code Flashcard} from a filtered list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted flashcard in the"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the flashcard object regardless of indexing."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameFlashcardDeleted() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getCardCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_SECOND_FLASHCARD);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Flashcard flashcardToDelete \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        expectedModel.deleteFlashcard(flashcardToDelete);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        expectedModel.commitCardCollection(DeleteCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // delete -\u003e deletes second flashcard in unfiltered flashcard list / first flashcard in filtered flashcard list"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // undo -\u003e reverts cardCollection back to previous state and filtered flashcard list to show all flashcards"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        expectedModel.undoCardCollection();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        String undoMessageSuccess \u003d String.format(UndoCommand.MESSAGE_SUCCESS, DeleteCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, undoMessageSuccess, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertNotEquals(flashcardToDelete, model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased()));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // redo -\u003e deletes same second flashcard in unfiltered flashcard list"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        expectedModel.redoCardCollection();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        String redoMessageSuccess \u003d String.format(RedoCommand.MESSAGE_SUCCESS, DeleteCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, redoMessageSuccess, expectedModel);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_FLASHCARD);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private void showNoFlashcard(Model model) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        model.updateFilteredFlashcardList(p -\u003e false);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertTrue(model.getFilteredFlashcardList().isEmpty());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 12,
      "robincyu": 60,
      "-": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_GOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_HITBAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BACKFACE_GOOD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FRONTFACE_GOOD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_IMAGE_NONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_INDONESIAN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showFlashcardAtIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalCardCollection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditFlashcardDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.CardCollection;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.testutil.EditFlashcardDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCardCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Flashcard editedFlashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        EditCommand.EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder(editedFlashcard).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_FLASHCARD, descriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FLASHCARD_SUCCESS, editedFlashcard);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new CardCollection(model.getCardCollection()), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        expectedModel.setFlashcard(model.getFilteredFlashcardList().get(0), editedFlashcard);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        expectedModel.commitCardCollection(EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Index indexLastFlashcard \u003d Index.fromOneBased(model.getFilteredFlashcardList().size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Flashcard lastFlashcard \u003d model.getFilteredFlashcardList().get(indexLastFlashcard.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        FlashcardBuilder flashcardInList \u003d new FlashcardBuilder(lastFlashcard);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Flashcard editedFlashcard \u003d flashcardInList.withFrontFace(VALID_FRONTFACE_GOOD).withImagePath(VALID_IMAGE_NONE)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            .withBackFace(VALID_BACKFACE_GOOD).withTags(VALID_TAG_INDONESIAN).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        EditCommand.EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            .withFrontFace(VALID_FRONTFACE_GOOD).withBackFace(VALID_BACKFACE_GOOD).withImagePath(VALID_IMAGE_NONE)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            .withTags(VALID_TAG_INDONESIAN).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastFlashcard, descriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FLASHCARD_SUCCESS, editedFlashcard);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new CardCollection(model.getCardCollection()), new UserPrefs());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        expectedModel.setFlashcard(lastFlashcard, editedFlashcard);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        expectedModel.commitCardCollection(EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_FLASHCARD, new EditFlashcardDescriptor());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Flashcard editedFlashcard \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FLASHCARD_SUCCESS, editedFlashcard);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new CardCollection(model.getCardCollection()), new UserPrefs());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        expectedModel.commitCardCollection(EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Flashcard flashcardInFilteredList \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Flashcard editedFlashcard \u003d new FlashcardBuilder(flashcardInFilteredList)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            .withFrontFace(VALID_FRONTFACE_GOOD).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_FLASHCARD,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            new EditFlashcardDescriptorBuilder().withFrontFace(VALID_FRONTFACE_GOOD).build());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FLASHCARD_SUCCESS, editedFlashcard);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new CardCollection(model.getCardCollection()), new UserPrefs());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        expectedModel.setFlashcard(model.getFilteredFlashcardList().get(0), editedFlashcard);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        expectedModel.commitCardCollection(EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void execute_duplicateFlashcardUnfilteredList_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Flashcard firstFlashcard \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        EditCommand.EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder(firstFlashcard).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_FLASHCARD, descriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void execute_duplicateFlashcardFilteredList_failure() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // edit flashcard in filtered list into a duplicate in card collection"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Flashcard flashcardInList \u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            model.getCardCollection().getFlashcardList().get(INDEX_SECOND_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_FLASHCARD,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            new EditFlashcardDescriptorBuilder(flashcardInList).build());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void execute_invalidFlashcardIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFlashcardList().size() + 1);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        EditCommand.EditFlashcardDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            new EditFlashcardDescriptorBuilder().withFrontFace(VALID_FRONTFACE_GOOD).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * but smaller than size of card collection"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void execute_invalidFlashcardIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of card collection list"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getCardCollection().getFlashcardList().size());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            new EditFlashcardDescriptorBuilder().withFrontFace(VALID_FRONTFACE_GOOD).build());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Flashcard editedFlashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Flashcard flashcardToEdit \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        EditCommand.EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder(editedFlashcard).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_FLASHCARD, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new CardCollection(model.getCardCollection()), new UserPrefs());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        expectedModel.setFlashcard(flashcardToEdit, editedFlashcard);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        expectedModel.commitCardCollection(EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // edit -\u003e first flashcard edited"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // undo -\u003e reverts cardCollection back to previous state and filtered flashcard list to show all flashcards"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        expectedModel.undoCardCollection();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        String undoMessageSuccess \u003d String.format(UndoCommand.MESSAGE_SUCCESS, EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, undoMessageSuccess, expectedModel);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // redo -\u003e same first flashcard edited again"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        expectedModel.redoCardCollection();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        String redoMessageSuccess \u003d String.format(RedoCommand.MESSAGE_SUCCESS, EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, redoMessageSuccess, expectedModel);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFlashcardList().size() + 1);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        EditCommand.EditFlashcardDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            new EditFlashcardDescriptorBuilder().withFrontFace(VALID_FRONTFACE_GOOD).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // execution failed -\u003e card collection state not added into model"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // single card collection state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * 1. Edits a {@code Flashcard} from a filtered list."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited flashcard in the"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the flashcard object regardless of indexing."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameFlashcardEdited() throws Exception {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Flashcard editedFlashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder(editedFlashcard).build();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_FLASHCARD, descriptor);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new CardCollection(model.getCardCollection()), new UserPrefs());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_SECOND_FLASHCARD);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Flashcard flashcardToEdit \u003d model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        expectedModel.setFlashcard(flashcardToEdit, editedFlashcard);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        expectedModel.commitCardCollection(EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // edit -\u003e edits second flashcard in unfiltered flashcard list / first flashcard in filtered flashcard list"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // undo -\u003e reverts cardCollection back to previous state and filtered flashcard list to show all flashcards"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        expectedModel.undoCardCollection();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        String undoMessageSuccess \u003d String.format(UndoCommand.MESSAGE_SUCCESS, EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, undoMessageSuccess, expectedModel);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertNotEquals(model.getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased()), flashcardToEdit);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // redo -\u003e edits same second flashcard in unfiltered flashcard list"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        expectedModel.redoCardCollection();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        String redoMessageSuccess \u003d String.format(RedoCommand.MESSAGE_SUCCESS, EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, redoMessageSuccess, expectedModel);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_FLASHCARD, DESC_GOOD);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        EditCommand.EditFlashcardDescriptor copyDescriptor \u003d new EditFlashcardDescriptor(DESC_GOOD);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_FLASHCARD, copyDescriptor);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_FLASHCARD, DESC_GOOD)));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_FLASHCARD, DESC_HITBAG)));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 14,
      "robincyu": 97,
      "sergiovieri": 18,
      "-": 129
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditFlashcardDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_GOOD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_HITBAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BACKFACE_HITBAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FRONTFACE_HITBAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CHINESE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_INDONESIAN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditFlashcardDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.testutil.EditFlashcardDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public class EditFlashcardDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        EditFlashcardDescriptor descriptorWithSameValues \u003d new EditFlashcardDescriptor(DESC_GOOD);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertTrue(DESC_GOOD.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertTrue(DESC_GOOD.equals(DESC_GOOD));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertFalse(DESC_GOOD.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertFalse(DESC_GOOD.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertFalse(DESC_GOOD.equals(DESC_HITBAG));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        // different frontFace -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        EditFlashcardDescriptor editedGood \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            new EditFlashcardDescriptorBuilder(DESC_GOOD).withFrontFace(VALID_FRONTFACE_HITBAG).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertFalse(DESC_GOOD.equals(editedGood));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        // different backFace -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        editedGood \u003d new EditFlashcardDescriptorBuilder(DESC_GOOD).withBackFace(VALID_BACKFACE_HITBAG).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertFalse(DESC_GOOD.equals(editedGood));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        editedGood \u003d new EditFlashcardDescriptorBuilder(DESC_GOOD)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            .withTags(VALID_TAG_INDONESIAN, VALID_TAG_CHINESE).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertFalse(DESC_GOOD.equals(editedGood));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 3,
      "sergiovieri": 22,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalCardCollection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.commons.core.QuizState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void execute_inQuiz_exitsQuiz() throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Model newModel \u003d new ModelManager(getTypicalCardCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        new QuizCommand().execute(newModel, commandHistory);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        new ExitCommand().execute(newModel, commandHistory);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertEquals(QuizState.NOT_QUIZ_MODE, (int) newModel.getQuizMode());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sergiovieri": 13,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_FLASHCARDS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOUND_75;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAX_BOUND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MIN_BOUND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BACK_FACE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FRONT_FACE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUCCESS_RATE_RANGE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.EAT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.EMAIL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.HELLO;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.HOLA;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.NEWTON;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalCardCollection;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.model.flashcard.Face;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.model.flashcard.FlashcardPredicate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCardCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalCardCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        double[] successRateRange \u003d {VALID_MIN_BOUND, VALID_BOUND_75};"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        FlashcardPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            new FlashcardPredicate(Collections.singletonList(\"firstFront\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                    Collections.singletonList(\"firstBack\"), Collections.singletonList(\"firstTag\"), successRateRange);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        FlashcardPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                new FlashcardPredicate(Collections.singletonList(\"secondFront\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                        Collections.singletonList(\"secondBack\"), Collections.singletonList(\"secondTag\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                        successRateRange);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public void execute_multipleFrontFaceKeywords_multipleFlashcardsFound() throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FLASHCARDS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        FlashcardPredicate predicate \u003d preparePredicate(\" \" + PREFIX_FRONT_FACE"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                + \"Hello Newton\u0027s email\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        expectedModel.updateFilteredFlashcardList(predicate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertEquals(Arrays.asList(HELLO, NEWTON, EMAIL), model.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    // this test does not work on travis for some reason but works locally"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    //Travis"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public void execute_multipleArgumentKeywords_multipleFlashcardsFound() throws ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FLASHCARDS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        FlashcardPredicate predicate \u003d preparePredicate(\" \" + PREFIX_FRONT_FACE"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                + \"Hola \" + PREFIX_BACK_FACE + \"吃 idk \" + PREFIX_TAG + \"indonesian \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                + PREFIX_SUCCESS_RATE_RANGE + \"0 75\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        expectedModel.updateFilteredFlashcardList(predicate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertEquals(Arrays.asList(HOLA, EAT, NEWTON), model.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    // this test does not work on travis for some reason but works locally"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public void execute_onlySuccessRateRange_multipleFlashcardsFound() throws ParseException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FLASHCARDS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        FlashcardPredicate predicate \u003d preparePredicate(\" \" + PREFIX_SUCCESS_RATE_RANGE + \"1 75\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        expectedModel.updateFilteredFlashcardList(predicate);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertEquals(Arrays.asList(HOLA), model.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "     * Parses {@code userInput} into a {@code FlashcardPredicate}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    private FlashcardPredicate preparePredicate(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(userInput, PREFIX_FRONT_FACE, PREFIX_BACK_FACE,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                PREFIX_TAG, PREFIX_SUCCESS_RATE_RANGE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_FRONT_FACE) \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_BACK_FACE)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_TAG)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_SUCCESS_RATE_RANGE)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        Set\u003cFace\u003e frontFaceKeywordSet \u003d ParserUtil.parseFaces(argMultimap.getAllValues(PREFIX_FRONT_FACE));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        Set\u003cFace\u003e backFaceKeywordSet \u003d ParserUtil.parseFaces(argMultimap.getAllValues(PREFIX_BACK_FACE));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        Set\u003cTag\u003e tagKeywordSet \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        double[] statRange \u003d ParserUtil.parseStatRange(argMultimap.getValue(PREFIX_SUCCESS_RATE_RANGE).isPresent()"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                ? argMultimap.getValue(PREFIX_SUCCESS_RATE_RANGE).get() : VALID_MIN_BOUND + \" \" + VALID_MAX_BOUND);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        ArrayList\u003cString\u003e frontFaceKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        ArrayList\u003cString\u003e backFaceKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        ArrayList\u003cString\u003e tagKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        for (Face frontFace : frontFaceKeywordSet) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            String[] frontFaceTextSplit \u003d frontFace.text.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            frontFaceKeywords.addAll(Arrays.asList(frontFaceTextSplit));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        for (Face backFace : backFaceKeywordSet) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            String[] backFaceTextSplit \u003d backFace.text.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            backFaceKeywords.addAll(Arrays.asList(backFaceTextSplit));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        for (Tag tag : tagKeywordSet) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            tagKeywords.add(tag.tagName);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        return new FlashcardPredicate(frontFaceKeywords, backFaceKeywords, tagKeywords, statRange);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucatriglia": 94,
      "robincyu": 8,
      "sergiovieri": 3,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/GoodCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalCardCollection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.commons.core.QuizState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " * Contains integration tests and unit tests for GoodCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "public class GoodCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private CommandHistory commandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        model \u003d new ModelManager(getTypicalCardCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void execute_good_success() throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        new QuizCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        new GoodCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertEquals((int) model.getQuizGood().getValue(), 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void execute_emptyQuizFlashcards_exitsQuiz() throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        new QuizCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        model.getQuizFlashcards().clear();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        new GoodCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertEquals(QuizState.NOT_QUIZ_MODE, (int) model.getQuizMode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void execute_notInQuiz_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertCommandFailure(new GoodCommand(), model, commandHistory, GoodCommand.MESSAGE_FAILURE_NOT_QUIZ_MODE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sergiovieri": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ImageCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robincyu"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.commons.core.Config.IMAGE_DIRECTORY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.logic.commands.ImageCommand.MESSAGE_INVALID_FILE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalCardCollection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robincyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * Contains unit / integration tests for ImageCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robincyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public class ImageCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private CommandHistory commandHistory;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private final String validFlashcard \u003d \"test_image.png\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private final String invalidFlashcard \u003d \"nonexistent_image.png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        model \u003d new ModelManager(getTypicalCardCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    //This test fails on Travis for some reason"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    //It works locally"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void execute_imageCommand_success() throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        File imageToProduce \u003d new File(IMAGE_DIRECTORY.concat(validFlashcard));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        File imageToTest \u003d new File(\"src\\\\test\\\\data\\\\images\\\\\".concat(validFlashcard));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (!imageToTest.exists()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            logger.severe(\"Image \".concat(imageToTest.getAbsolutePath()).concat(\" couldn\u0027t be found.\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (imageToProduce.delete()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            logger.warning(\"Image \".concat(imageToProduce.getAbsolutePath()).concat(\" deleted.\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        ImageCommand command \u003d new ImageCommand(imageToTest);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        command.execute(model, commandHistory);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assert(imageToProduce.exists());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (!imageToProduce.delete()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            logger.severe(\"Image \".concat(imageToProduce.getAbsolutePath()).concat(\" couldn\u0027t be deleted.\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    //This test fails on Travis for some reason"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    //It works locally"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void execute_imageCommand_failDuplicate() throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        File imageToProduce \u003d new File(IMAGE_DIRECTORY.concat(validFlashcard));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        File imageToTest \u003d new File(\"src\\\\test\\\\data\\\\images\\\\\".concat(validFlashcard));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (!imageToTest.exists()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            logger.severe(\"Image \".concat(imageToTest.getAbsolutePath()).concat(\" couldn\u0027t be found.\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (imageToProduce.delete()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            logger.warning(\"Image \".concat(imageToProduce.getAbsolutePath()).concat(\" deleted.\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            if (!imageToProduce.createNewFile()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                //this should not happen, we just deleted the file"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                throw new IOException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            //this should not happen"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            assert(false);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        ImageCommand command \u003d new ImageCommand(imageToTest);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, ImageCommand.MESSAGE_DUPLICATE_NAME);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (!imageToProduce.delete()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            logger.severe(\"Image \".concat(imageToProduce.getAbsolutePath()).concat(\" couldn\u0027t be deleted.\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void execute_imageCommand_failNonExistent() throws CommandException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        File imageToTest \u003d new File(\"src\\\\test\\\\data\\\\images\\\\\".concat(invalidFlashcard));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        if (imageToTest.exists()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            logger.severe(\"Image \".concat(imageToTest.getAbsolutePath()).concat(\" shouldn\u0027t exist.\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        ImageCommand command \u003d new ImageCommand(imageToTest);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, String.format(MESSAGE_INVALID_FILE, imageToTest));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test(expected \u003d NullPointerException.class)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void execute_imageCommand_failNull() throws CommandException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        ImageCommand command \u003d new ImageCommand(null);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        command.execute(model, commandHistory);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "robincyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ImportCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PATH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.commands.ImportCommand.MESSAGE_IMPORT_PARTIAL_SUCCESS_INFO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.commands.ImportCommand.MESSAGE_IMPORT_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalCardCollection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.logic.parser.ImportCommandParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " * Contains unit / integration tests for ImportCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "public class ImportCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    private CommandHistory commandHistory;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    private final String validFile \u003d \"flashcards.txt\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    private final String corruptedFile \u003d \"flashcardsCorrupted.txt\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    private final String duplicateCardFile \u003d \"flashcardsDuplicate.txt\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        model \u003d new ModelManager(getTypicalCardCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public void execute_importCommand_allCardsSuccessfullyImported() throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        File validFileToTest \u003d new File(\"src\\\\test\\\\data\\\\importCommandTestFiles\\\\\".concat(validFile));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        // all flashcards successfully imported"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        ImportCommand command \u003d new ImportCommand(validFileToTest);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertEquals(new CommandResult(\"ALL\" + MESSAGE_IMPORT_SUCCESS),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                command.execute(model, commandHistory));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public void execute_importCommand_oneCardCorrupted() throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        File corruptedFileToTest \u003d new File(\"src\\\\test\\\\data\\\\importCommandTestFiles\\\\\".concat(corruptedFile));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        // 4 cards successfully imported, 1 card unsuccessful"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        ImportCommand command \u003d new ImportCommand(corruptedFileToTest);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertEquals(new CommandResult(String.format(\"4 out of 5\" + MESSAGE_IMPORT_SUCCESS + \" %s\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                corruptedFileToTest.getAbsolutePath() + \"\\n\" + MESSAGE_IMPORT_PARTIAL_SUCCESS_INFO)),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                command.execute(model, commandHistory));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public void execute_importCommand_oneCardAlreadyExists() throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        File corruptedFileToTest \u003d new File(\"src\\\\test\\\\data\\\\importCommandTestFiles\\\\\".concat(duplicateCardFile));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        // 4 cards successfully imported, 1 card unsuccessful"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        ImportCommand command \u003d new ImportCommand(corruptedFileToTest);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertEquals(new CommandResult(String.format(\"4 out of 5\" + MESSAGE_IMPORT_SUCCESS + \" %s\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                corruptedFileToTest.getAbsolutePath() + \"\\n\" + MESSAGE_IMPORT_PARTIAL_SUCCESS_INFO)),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                command.execute(model, commandHistory));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public void parse_invalidPath_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertParseFailure(parser, \"src\\\\test\\\\data\\\\importCommandTestFiles\\\\hello.txt\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                String.format(MESSAGE_INVALID_PATH, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucatriglia": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showFlashcardAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalCardCollection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.model.CardCollection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        model \u003d new ModelManager(getTypicalCardCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getCardCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public void execute_emptyList_emptyMessage() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        model \u003d new ModelManager(new CardCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        expectedModel \u003d new ModelManager(new CardCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_EMPTY, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 9,
      "robincyu": 6,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/QuizCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalCardCollection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.commons.core.QuizState;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " * Contains integration tests and unit tests for QuizCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "public class QuizCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private CommandHistory commandHistory;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        model \u003d new ModelManager(getTypicalCardCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void execute_quiz_success() throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        QuizCommand command \u003d new QuizCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        command.execute(model, commandHistory);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertEquals((int) model.getQuizMode(), QuizState.QUIZ_MODE_FRONT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertEquals(false, model.getIsQuizSrs().getValue());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertEquals(model.getQuizFlashcards().size(), model.getFilteredFlashcardList().size() - 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public void execute_quizReview_success() throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        QuizCommand command \u003d new QuizCommand(false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        command.execute(model, commandHistory);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertEquals((int) model.getQuizMode(), QuizState.QUIZ_MODE_FRONT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertEquals(false, model.getIsQuizSrs().getValue());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertEquals(model.getQuizFlashcards().size(), model.getFilteredFlashcardList().size() - 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public void execute_quizSrs_success() throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        QuizCommand command \u003d new QuizCommand(true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        command.execute(model, commandHistory);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertEquals((int) model.getQuizMode(), QuizState.QUIZ_MODE_FRONT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertEquals(true, model.getIsQuizSrs().getValue());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertEquals(model.getQuizFlashcards().size(), getAvailableSrsFlashcards().size() - 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void execute_inQuizMode_failure() throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        QuizCommand command \u003d new QuizCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        model.setQuizMode(QuizState.QUIZ_MODE_FRONT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, QuizCommand.MESSAGE_QUIZ_FAILURE_IN_QUIZ);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        command \u003d new QuizCommand(true);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        model.setQuizMode(QuizState.QUIZ_MODE_FRONT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, QuizCommand.MESSAGE_QUIZ_FAILURE_IN_QUIZ);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        command \u003d new QuizCommand(false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        model.setQuizMode(QuizState.QUIZ_MODE_FRONT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, QuizCommand.MESSAGE_QUIZ_FAILURE_IN_QUIZ);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void execute_emptyList_failure() throws CommandException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        QuizCommand command \u003d new QuizCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        model.updateFilteredFlashcardList((x) -\u003e false);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, QuizCommand.MESSAGE_QUIZ_FAILURE_EMPTY);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        command \u003d new QuizCommand(false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        model.updateFilteredFlashcardList((x) -\u003e false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, QuizCommand.MESSAGE_QUIZ_FAILURE_EMPTY);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        command \u003d new QuizCommand(true);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        model.updateFilteredFlashcardList((x) -\u003e false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, QuizCommand.MESSAGE_QUIZ_FAILURE_EMPTY);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private List\u003cFlashcard\u003e getAvailableSrsFlashcards() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        List\u003cFlashcard\u003e cards \u003d model.getFilteredFlashcardList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return cards.stream()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                .filter(Flashcard::isIncludedInCurrentQuiz)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 45,
      "sergiovieri": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstFlashcard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalCardCollection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalCardCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalCardCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private final String deleteFirstRedoMessage \u003d String.format(RedoCommand.MESSAGE_SUCCESS, \"delete 1\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        deleteFirstFlashcard(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        deleteFirstFlashcard(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        model.undoCardCollection();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        model.undoCardCollection();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        deleteFirstFlashcard(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        deleteFirstFlashcard(expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        expectedModel.undoCardCollection();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        expectedModel.undoCardCollection();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        expectedModel.redoCardCollection();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, deleteFirstRedoMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        expectedModel.redoCardCollection();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, deleteFirstRedoMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 3,
      "robincyu": 15,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showFlashcardAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalCardCollection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_FLASHCARD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCardCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalCardCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Index lastFlashcardIndex \u003d Index.fromOneBased(model.getFilteredFlashcardList().size());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_FLASHCARD);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertExecutionSuccess(lastFlashcardIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredFlashcardList().size() + 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        showFlashcardAtIndex(expectedModel, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        showFlashcardAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        showFlashcardAtIndex(expectedModel, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of card collection list"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getCardCollection().getFlashcardList().size());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_FLASHCARD);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index},"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * and checks that the model\u0027s selected flashcard is set to the flashcard at {@code index} in the filtered"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * flashcard list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Flashcard flashcard \u003d model.getFilteredFlashcardList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_FLASHCARD_SUCCESS, index.getOneBased(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            flashcard.getSuccessRate(), flashcard.getQuizSrsStatus());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        expectedModel.setSelectedFlashcard(model.getFilteredFlashcardList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 3,
      "robincyu": 29,
      "sergiovieri": 1,
      "-": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ShareCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PATH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalCardCollection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.logic.parser.ShareCommandParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "public class ShareCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private CommandHistory commandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        model \u003d new ModelManager(getTypicalCardCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    // this test does not work on travis but works locally"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public void execute_share_success() throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        File expectedFile \u003d new File(\"src\\\\test\\\\data\\\\shareCommandTestFiles\\\\flashcardsExpected.txt\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        ShareCommand share \u003d new ShareCommand(\"src\\\\test\\\\data\\\\shareCommandTestFiles\\\\\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        share.execute(model, commandHistory);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        File outputFile \u003d new File(\"src\\\\test\\\\data\\\\shareCommandTestFiles\\\\flashcards.txt\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertEquals(expectedFile.length(), outputFile.length());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public void parse_invalidDirectory_failure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        ShareCommandParser parser \u003d new ShareCommandParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertParseFailure(parser, \"src\\\\test\\\\data\\\\importCommandTestFiles\\\\hello.txt\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                String.format(MESSAGE_INVALID_PATH, ShareCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucatriglia": 21,
      "sergiovieri": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ShowCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalCardCollection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.commons.core.QuizState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " * Contains unit tests for ShowCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "public class ShowCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private CommandHistory commandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        model \u003d new ModelManager(getTypicalCardCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void execute_inQuiz_success() throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        new QuizCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        new ShowCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertEquals((int) model.getQuizMode(), QuizState.QUIZ_MODE_BOTH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        new ShowCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertEquals((int) model.getQuizMode(), QuizState.QUIZ_MODE_BOTH);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void execute_notInQuiz_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertCommandFailure(new ShowCommand(), model, commandHistory, ShowCommand.MESSAGE_FAILURE_NOT_QUIZ_MODE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sergiovieri": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SmartCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalCardCollection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.commons.core.QuizState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " * Contains integration tests and unit tests for SmartCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "public class SmartCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private CommandHistory commandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        model \u003d new ModelManager(getTypicalCardCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void execute_inQuiz_success() throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        new QuizCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        new SmartCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertEquals((int) model.getQuizMode(), QuizState.QUIZ_MODE_BOTH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        new SmartCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertEquals((int) model.getQuizMode(), QuizState.QUIZ_MODE_FRONT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void execute_notInQuiz_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertCommandFailure(new SmartCommand(), model, commandHistory, \"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sergiovieri": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/StatsCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lungsin"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAX_BOUND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MIN_BOUND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.logic.commands.StatsCommand.MESSAGE_STATISTICS_FORMAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.HELLO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalCardCollection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.model.flashcard.FlashcardPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.model.flashcard.Statistics;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lungsin"
        },
        "content": "public class StatsCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCardCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalCardCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        // overall flashcards"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        double successRate \u003d getOverallSuccessRateFromModel(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        String feedbackToUser \u003d String.format(MESSAGE_STATISTICS_FORMAT, successRate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandSuccess(new StatsCommand(), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        // run stats command with some predicates."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        double[] successRateRange \u003d {VALID_MIN_BOUND, VALID_MAX_BOUND};"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        FlashcardPredicate predicate \u003d new FlashcardPredicate("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                Arrays.asList(HELLO.getFrontFace().text),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                Arrays.asList(EMAIL.getBackFace().text),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                successRateRange);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        expectedModel.updateFilteredFlashcardList(predicate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        successRate \u003d getFilteredSuccessRateFromModel(expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        feedbackToUser \u003d String.format(MESSAGE_STATISTICS_FORMAT, successRate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        expectedCommandResult \u003d new CommandResult(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandSuccess(new StatsCommand(predicate), model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        StatsCommand command \u003d new StatsCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        // no predicate stats"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertEquals(command, new StatsCommand());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        // with predicate stats"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        double[] successRateRange \u003d {VALID_MIN_BOUND, VALID_MAX_BOUND};"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        FlashcardPredicate predicate1 \u003d new FlashcardPredicate("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                Arrays.asList(\"Klungs\", \"Robin\"), Arrays.asList(\"Sergio\"), Arrays.asList(\"Luca\"), successRateRange"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        );"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertEquals(new StatsCommand(predicate1), new StatsCommand(predicate1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private double getFilteredSuccessRateFromModel(Model model) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Statistics stats \u003d new Statistics();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        for (Flashcard card : model.getFilteredFlashcardList()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            stats \u003d stats.merge(card.getStatistics());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return stats.getSuccessRate() * 100;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private double getOverallSuccessRateFromModel(Model model) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Statistics stats \u003d new Statistics();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        for (Flashcard card : model.getCardCollection().getFlashcardList()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            stats \u003d stats.merge(card.getStatistics());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return stats.getSuccessRate() * 100;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lungsin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 71,
      "lucatriglia": 10,
      "sergiovieri": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstFlashcard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalCardCollection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalCardCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalCardCollection(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private final String deleteFirstUndoMessage \u003d String.format(UndoCommand.MESSAGE_SUCCESS, \"delete 1\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        deleteFirstFlashcard(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        deleteFirstFlashcard(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        deleteFirstFlashcard(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        deleteFirstFlashcard(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        expectedModel.undoCardCollection();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, deleteFirstUndoMessage, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        expectedModel.undoCardCollection();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, deleteFirstUndoMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 3,
      "robincyu": 10,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BACKFACE_DESC_GOOD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FRONTFACE_DESC_GOOD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_BACKFACE_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_FRONTFACE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CHINESE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_INDONESIAN;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BACKFACE_GOOD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FRONTFACE_GOOD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CHINESE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_INDONESIAN;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.GOOD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.flashcard.Face;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Flashcard expectedFlashcard \u003d new FlashcardBuilder(GOOD).withTags(VALID_TAG_CHINESE).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + FRONTFACE_DESC_GOOD + BACKFACE_DESC_GOOD"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            + TAG_DESC_CHINESE, new AddCommand(expectedFlashcard));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Flashcard expectedFlashcardMultipleTags \u003d new FlashcardBuilder(GOOD).withTags(VALID_TAG_INDONESIAN,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            VALID_TAG_CHINESE).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertParseSuccess(parser, FRONTFACE_DESC_GOOD + BACKFACE_DESC_GOOD + TAG_DESC_CHINESE"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            + TAG_DESC_INDONESIAN, new AddCommand(expectedFlashcardMultipleTags));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Flashcard expectedFlashcard \u003d new FlashcardBuilder(GOOD).withTags().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertParseSuccess(parser, FRONTFACE_DESC_GOOD + BACKFACE_DESC_GOOD,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            new AddCommand(expectedFlashcard));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        // missing front prefix"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertParseFailure(parser, VALID_FRONTFACE_GOOD + BACKFACE_DESC_GOOD, expectedMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        // missing back prefix"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertParseFailure(parser, FRONTFACE_DESC_GOOD + VALID_BACKFACE_GOOD, expectedMessage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertParseFailure(parser, VALID_FRONTFACE_GOOD + VALID_BACKFACE_GOOD, expectedMessage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        // invalid frontface"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            INVALID_FRONTFACE_DESC + BACKFACE_DESC_GOOD + TAG_DESC_INDONESIAN, Face.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        // invalid backface"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            FRONTFACE_DESC_GOOD + INVALID_BACKFACE_DESC + TAG_DESC_INDONESIAN, Face.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            FRONTFACE_DESC_GOOD + BACKFACE_DESC_GOOD + INVALID_TAG_DESC + VALID_TAG_CHINESE, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            INVALID_FRONTFACE_DESC + BACKFACE_DESC_GOOD + INVALID_TAG_DESC, Face.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + FRONTFACE_DESC_GOOD + BACKFACE_DESC_GOOD"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            + TAG_DESC_CHINESE, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 3,
      "sergiovieri": 38,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CardCollectionParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOUND_75;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MIN_BOUND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BACK_FACE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FRONT_FACE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUCCESS_RATE_RANGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.logic.commands.BadCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.logic.commands.GoodCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.logic.commands.QuizCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.logic.commands.SmartCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.model.flashcard.FlashcardPredicate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.testutil.EditFlashcardDescriptorBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.testutil.FlashcardUtil;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public class CardCollectionParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private final CardCollectionParser parser \u003d new CardCollectionParser();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Flashcard flashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(FlashcardUtil.getAddCommand(flashcard));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertEquals(new AddCommand(flashcard), command);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FLASHCARD.getOneBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_FLASHCARD), command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Flashcard flashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        EditCommand.EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder(flashcard).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            + INDEX_FIRST_FLASHCARD.getOneBased() + \" \" + FlashcardUtil.getEditFlashcardDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_FLASHCARD, descriptor), command);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        List\u003cString\u003e frontFaceKeywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        List\u003cString\u003e backFaceKeywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        List\u003cString\u003e tagKeywords \u003d Arrays.asList(\"foo\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        double[] successRateRange \u003d {VALID_MIN_BOUND, VALID_BOUND_75};"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            FindCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                    + PREFIX_FRONT_FACE + frontFaceKeywords.stream().collect(Collectors.joining(\" \")) + \" \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                    + PREFIX_BACK_FACE + backFaceKeywords.stream().collect(Collectors.joining(\" \")) + \" \""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                    + PREFIX_TAG + tagKeywords.stream().collect(Collectors.joining(\" \")) + \" \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                    + PREFIX_SUCCESS_RATE_RANGE + VALID_MIN_BOUND + \" \" + VALID_BOUND_75);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertEquals(new FindCommand(new FlashcardPredicate(frontFaceKeywords, backFaceKeywords,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                tagKeywords, successRateRange)), command);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FLASHCARD.getOneBased());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_FLASHCARD), command);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public void parseCommand_statsCommandWord_returnsStatsCommand() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertTrue(parser.parseCommand(StatsCommand.COMMAND_WORD) instanceof StatsCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void parseCommand_quizCommandWord_returnsQuizCommand() throws Exception {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertTrue(parser.parseCommand(QuizCommand.COMMAND_WORD) instanceof QuizCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void parseCommand_goodCommandWord_returnsGoodCommand() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertTrue(parser.parseCommand(GoodCommand.COMMAND_WORD) instanceof GoodCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void parseCommand_badCommandWord_returnsBadCommand() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertTrue(parser.parseCommand(BadCommand.COMMAND_WORD) instanceof BadCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void parseCommand_smartCommandWord_returnSmartCommand() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertTrue(parser.parseCommand(SmartCommand.COMMAND_WORD) instanceof SmartCommand);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void parseCommand_emptyInput_returnSmartCommand() throws Exception {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertTrue(parser.parseCommand(\"\") instanceof SmartCommand);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 5,
      "lucatriglia": 19,
      "robincyu": 18,
      "sergiovieri": 26,
      "-": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_FLASHCARD));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BACKFACE_DESC_GOOD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FRONTFACE_DESC_GOOD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FRONTFACE_DESC_HITBAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_BACKFACE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_FRONTFACE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_INDONESIAN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BACKFACE_GOOD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FRONTFACE_GOOD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_INDONESIAN;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_FLASHCARD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.flashcard.Face;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.testutil.EditFlashcardDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertParseFailure(parser, VALID_FRONTFACE_GOOD, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertParseFailure(parser, \"-5\" + FRONTFACE_DESC_GOOD, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertParseFailure(parser, \"0\" + FRONTFACE_DESC_GOOD, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertParseFailure(parser, \"1 h/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_FRONTFACE_DESC, Face.MESSAGE_CONSTRAINTS); // invalid face"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_BACKFACE_DESC, Face.MESSAGE_CONSTRAINTS); // invalid face"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + FRONTFACE_DESC_GOOD + BACKFACE_DESC_GOOD + TAG_DESC_INDONESIAN;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        EditCommand.EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            .withFrontFace(VALID_FRONTFACE_GOOD).withBackFace(VALID_BACKFACE_GOOD)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            .withTags(VALID_TAG_INDONESIAN).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + FRONTFACE_DESC_GOOD;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        EditCommand.EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            .withFrontFace(VALID_FRONTFACE_GOOD).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + FRONTFACE_DESC_GOOD;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        EditCommand.EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            .withFrontFace(VALID_FRONTFACE_GOOD).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + FRONTFACE_DESC_HITBAG + FRONTFACE_DESC_GOOD;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        EditCommand.EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            .withFrontFace(VALID_FRONTFACE_GOOD).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_FLASHCARD;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        EditCommand.EditFlashcardDescriptor descriptor \u003d new EditFlashcardDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 11,
      "sergiovieri": 28,
      "-": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BACKFACE_DESC_GOOD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FRONTFACE_DESC_DUCK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FRONTFACE_DESC_GOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_BACKFACE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_FRONTFACE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PREFIX_UNDEFINED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CHINESE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_INDONESIAN;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BACKFACE_GOOD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BOUND_75;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FRONTFACE_DUCK;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FRONTFACE_GOOD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAX_BOUND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAX_BOUND_STRING;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MIN_BOUND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MIN_BOUND_STRING;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CHINESE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_INDONESIAN;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUCCESS_RATE_RANGE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.model.flashcard.Face;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.model.flashcard.FlashcardPredicate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public void parse_missingPrefix_throwsParseException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertParseFailure(parser, VALID_FRONTFACE_GOOD, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public void parse_wrongPrefix_throwsParseException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertParseFailure(parser, INVALID_PREFIX_UNDEFINED, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public void parse_multipleTagsUnderSameTagPrefix_throwsParseException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertParseFailure(parser, PREFIX_TAG + VALID_TAG_INDONESIAN + \" \" + VALID_TAG_CHINESE,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        ArrayList\u003cString\u003e frontFaceKeywords \u003d new ArrayList\u003c\u003e(Arrays.asList(VALID_FRONTFACE_GOOD));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        ArrayList\u003cString\u003e backFaceKeywords \u003d new ArrayList\u003c\u003e(Arrays.asList(VALID_BACKFACE_GOOD));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        ArrayList\u003cString\u003e tagKeywords \u003d new ArrayList\u003c\u003e(Arrays.asList(VALID_TAG_INDONESIAN));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        double[] successRateRange \u003d {VALID_MIN_BOUND, VALID_BOUND_75};"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        FlashcardPredicate expectedPredicate \u003d new FlashcardPredicate("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                frontFaceKeywords, backFaceKeywords, tagKeywords, successRateRange);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + FRONTFACE_DESC_GOOD + BACKFACE_DESC_GOOD"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                + TAG_DESC_INDONESIAN + \" \" + PREFIX_SUCCESS_RATE_RANGE + VALID_MIN_BOUND + \" \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                + VALID_BOUND_75, new FindCommand(expectedPredicate));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        // different ordering of args"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertParseSuccess(parser, TAG_DESC_INDONESIAN + \" \" + PREFIX_SUCCESS_RATE_RANGE + VALID_MIN_BOUND"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                + \" \" + VALID_BOUND_75 + BACKFACE_DESC_GOOD + FRONTFACE_DESC_GOOD , new FindCommand(expectedPredicate));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        tagKeywords.add(VALID_TAG_CHINESE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        FlashcardPredicate expectedPredicateMultipleTags \u003d new FlashcardPredicate("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                frontFaceKeywords, backFaceKeywords, tagKeywords, successRateRange);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertParseSuccess(parser, FRONTFACE_DESC_GOOD + BACKFACE_DESC_GOOD"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                + TAG_DESC_INDONESIAN + TAG_DESC_CHINESE + \" \" + PREFIX_SUCCESS_RATE_RANGE + VALID_MIN_BOUND + \" \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                + VALID_BOUND_75, new FindCommand(expectedPredicateMultipleTags));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        tagKeywords.remove(1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        // multiple frontFace keywords under same frontFace prefix"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        frontFaceKeywords.add(VALID_FRONTFACE_DUCK);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        FlashcardPredicate expectedPredicateMultipleFrontfaceKeywords \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                new FlashcardPredicate(frontFaceKeywords, backFaceKeywords, tagKeywords, successRateRange);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertParseSuccess(parser, FRONTFACE_DESC_GOOD + \" \" + VALID_FRONTFACE_DUCK + BACKFACE_DESC_GOOD"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                + TAG_DESC_INDONESIAN + \" \" + PREFIX_SUCCESS_RATE_RANGE + VALID_MIN_BOUND + \" \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                + VALID_BOUND_75, new FindCommand(expectedPredicateMultipleFrontfaceKeywords));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public void parse_optionalFieldMissing_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        ArrayList\u003cString\u003e frontFaceKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        ArrayList\u003cString\u003e backFaceKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        ArrayList\u003cString\u003e tagKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        double[] defaultSuccessRateRange \u003d {VALID_MIN_BOUND, VALID_MAX_BOUND};"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        // only frontFace keyword"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        frontFaceKeywords.add(VALID_FRONTFACE_GOOD);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        FlashcardPredicate expectedPredicateFrontFaceOnly \u003d new FlashcardPredicate("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                frontFaceKeywords, backFaceKeywords, tagKeywords, defaultSuccessRateRange);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertParseSuccess(parser, FRONTFACE_DESC_GOOD, new FindCommand(expectedPredicateFrontFaceOnly));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        frontFaceKeywords.remove(0);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        // only backFace keyword with whitespace preamble"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        backFaceKeywords.add(VALID_BACKFACE_GOOD);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        FlashcardPredicate expectedPredicateBackFaceOnly \u003d new FlashcardPredicate("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                frontFaceKeywords, backFaceKeywords, tagKeywords, defaultSuccessRateRange);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + BACKFACE_DESC_GOOD,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                new FindCommand(expectedPredicateBackFaceOnly));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        backFaceKeywords.remove(0);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        // only tag keyword"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        tagKeywords.add(VALID_TAG_CHINESE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        FlashcardPredicate expectedPredicateTagOnly \u003d new FlashcardPredicate("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                frontFaceKeywords, backFaceKeywords, tagKeywords, defaultSuccessRateRange);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertParseSuccess(parser, TAG_DESC_CHINESE, new FindCommand(expectedPredicateTagOnly));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        tagKeywords.remove(0);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        // only tag and frontFace"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        tagKeywords.add(VALID_TAG_CHINESE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        frontFaceKeywords.add(VALID_FRONTFACE_DUCK);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        FlashcardPredicate expectedPredicateTagAndFrontFaceOnly \u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                new FlashcardPredicate(frontFaceKeywords, backFaceKeywords, tagKeywords, defaultSuccessRateRange);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertParseSuccess(parser, TAG_DESC_CHINESE + FRONTFACE_DESC_DUCK,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                new FindCommand(expectedPredicateTagAndFrontFaceOnly));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        tagKeywords.remove(0);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        frontFaceKeywords.remove(0);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        // only success rate range as integer"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        FlashcardPredicate expectedPredicateIntegerRangeOnly \u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                new FlashcardPredicate(frontFaceKeywords, backFaceKeywords, tagKeywords, defaultSuccessRateRange);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_SUCCESS_RATE_RANGE + VALID_MIN_BOUND_STRING + \" \""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                + VALID_MAX_BOUND_STRING, new FindCommand(expectedPredicateIntegerRangeOnly));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        // only success rate range as double"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        double[] decimalSuccessRateRange \u003d {20.5, 70.5};"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        FlashcardPredicate expectedPredicateDoubleRangeOnly \u003d"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                new FlashcardPredicate(frontFaceKeywords, backFaceKeywords, tagKeywords, decimalSuccessRateRange);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_SUCCESS_RATE_RANGE + \"20.5 70.5\","
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                new FindCommand(expectedPredicateDoubleRangeOnly));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        // multiple success rate ranges specified (picks second one)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        FlashcardPredicate expectedPredicateMultipleSuccessRate \u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                new FlashcardPredicate(frontFaceKeywords, backFaceKeywords, tagKeywords, decimalSuccessRateRange);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_SUCCESS_RATE_RANGE + \"0 100\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                + \" \" + PREFIX_SUCCESS_RATE_RANGE + \"20.5 70.5\","
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                new FindCommand(expectedPredicateMultipleSuccessRate));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        // invalid frontFace"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                INVALID_FRONTFACE_DESC + BACKFACE_DESC_GOOD + TAG_DESC_INDONESIAN, Face.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        // invalid backFace"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                FRONTFACE_DESC_GOOD + INVALID_BACKFACE_DESC + TAG_DESC_INDONESIAN, Face.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertParseFailure(parser, FRONTFACE_DESC_GOOD + BACKFACE_DESC_GOOD + INVALID_TAG_DESC"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                + VALID_TAG_CHINESE, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        // invalid success rate range (lower bound \u003e upper bound)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_SUCCESS_RATE_RANGE + \"50.5 20\","
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                ParserUtil.MESSAGE_INVALID_RANGE);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        // invalid success rate range (lower bound \u003c 0)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_SUCCESS_RATE_RANGE + \"-0.1 50\","
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                ParserUtil.MESSAGE_INVALID_RANGE);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        // invalid success rate range (upper bound \u003e 1000)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_SUCCESS_RATE_RANGE + \"0 100.1\","
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                ParserUtil.MESSAGE_INVALID_RANGE);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        // invalid success rate format (text as value)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_SUCCESS_RATE_RANGE + \"hello 100.1\","
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                ParserUtil.MESSAGE_INVALID_RANGE_FORMAT);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        // invalid success rate format (3 values in range)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_SUCCESS_RATE_RANGE + \"0 50 100\","
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                ParserUtil.MESSAGE_INVALID_RANGE_FORMAT);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + FRONTFACE_DESC_GOOD + BACKFACE_DESC_GOOD"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                + TAG_DESC_CHINESE, String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucatriglia": 180,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.flashcard.Face;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private static final String INVALID_FACE \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private static final String VALID_FACE \u003d \"Hello\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertEquals(INDEX_FIRST_FLASHCARD, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertEquals(INDEX_FIRST_FLASHCARD, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void parseFace_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseFace(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void parseFace_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseFace(INVALID_FACE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void parseFace_validValueWithoutWhitespace_returnsFace() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Face expectedFace \u003d new Face(VALID_FACE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertEquals(expectedFace, ParserUtil.parseFace(VALID_FACE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void parseFace_validValueWithWhitespace_returnsTrimmedFace() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        String faceWithWhitespace \u003d WHITESPACE + VALID_FACE + WHITESPACE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Face expectedFace \u003d new Face(VALID_FACE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertEquals(expectedFace, ParserUtil.parseFace(faceWithWhitespace));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 3,
      "sergiovieri": 14,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/QuizCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lungsin"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.logic.commands.QuizCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lungsin"
        },
        "content": "public class QuizCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private QuizCommandParser parser \u003d new QuizCommandParser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public void parse_validField_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        // review mode"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertParseSuccess(parser, \"\", new QuizCommand());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertParseSuccess(parser, QuizCommand.REVIEW_MODE, new QuizCommand());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        // mixed case"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertParseSuccess(parser, \"ReViEw\", new QuizCommand());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        // srs mode"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertParseSuccess(parser, QuizCommand.SRS_MODE, new QuizCommand(true));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        // mixed case"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertParseSuccess(parser, \"SRS\", new QuizCommand(true));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertParseSuccess(parser, \"SrS\", new QuizCommand(true));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public void parse_invalidField_fail() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        // both mode"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertParseFailure(parser, \"srs review\", QuizCommand.MESSAGE_QUIZ_FAILURE_UNKNOWN_MODE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        // invalid mode"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertParseFailure(parser, \"advanced\", QuizCommand.MESSAGE_QUIZ_FAILURE_UNKNOWN_MODE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertParseFailure(parser, \"srs srs srs\", QuizCommand.MESSAGE_QUIZ_FAILURE_UNKNOWN_MODE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertParseFailure(parser, \"acquizition is the best\", QuizCommand.MESSAGE_QUIZ_FAILURE_UNKNOWN_MODE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lungsin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_FLASHCARD));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 3,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/StatsCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lungsin"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BACKFACE_DESC_GOOD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FRONTFACE_DESC_DUCK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FRONTFACE_DESC_GOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_BACKFACE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_FRONTFACE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PREFIX_UNDEFINED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CHINESE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_INDONESIAN;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BACKFACE_GOOD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FRONTFACE_DUCK;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FRONTFACE_GOOD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAX_BOUND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MIN_BOUND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CHINESE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_INDONESIAN;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.model.flashcard.Face;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.model.flashcard.FlashcardPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lungsin"
        },
        "content": "public class StatsCommandParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private StatsCommandParser parser \u003d new StatsCommandParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public void parse_missingPrefix_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertParseFailure(parser, VALID_FRONTFACE_GOOD, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                StatsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public void parse_wrongPrefix_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertParseFailure(parser, INVALID_PREFIX_UNDEFINED, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                StatsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public void parse_multipleTagsUnderSameTagPrefix_throwsParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertParseFailure(parser, PREFIX_TAG + VALID_TAG_INDONESIAN + \" \" + VALID_TAG_CHINESE,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        ArrayList\u003cString\u003e frontFaceKeywords \u003d new ArrayList\u003c\u003e(Arrays.asList(VALID_FRONTFACE_GOOD));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        ArrayList\u003cString\u003e backFaceKeywords \u003d new ArrayList\u003c\u003e(Arrays.asList(VALID_BACKFACE_GOOD));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        ArrayList\u003cString\u003e tagKeywords \u003d new ArrayList\u003c\u003e(Arrays.asList(VALID_TAG_INDONESIAN));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        double[] successRateRange \u003d {VALID_MIN_BOUND, VALID_MAX_BOUND};"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        FlashcardPredicate expectedPredicate \u003d new FlashcardPredicate("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                frontFaceKeywords, backFaceKeywords, tagKeywords, successRateRange);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        // whitespace only"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE , new StatsCommand());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + FRONTFACE_DESC_GOOD + BACKFACE_DESC_GOOD"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                + TAG_DESC_INDONESIAN, new StatsCommand(expectedPredicate));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        // different ordering of args"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertParseSuccess(parser, TAG_DESC_INDONESIAN + BACKFACE_DESC_GOOD"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                + FRONTFACE_DESC_GOOD, new StatsCommand(expectedPredicate));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        tagKeywords.add(VALID_TAG_CHINESE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        FlashcardPredicate expectedPredicateMultipleTags \u003d new FlashcardPredicate("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                frontFaceKeywords, backFaceKeywords, tagKeywords, successRateRange);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertParseSuccess(parser, FRONTFACE_DESC_GOOD + BACKFACE_DESC_GOOD"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                + TAG_DESC_INDONESIAN + TAG_DESC_CHINESE, new StatsCommand(expectedPredicateMultipleTags));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        tagKeywords.remove(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        // multiple frontFace keywords under same frontFace prefix"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        frontFaceKeywords.add(VALID_FRONTFACE_DUCK);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        FlashcardPredicate expectedPredicateMultipleFrontfaceKeywords \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                new FlashcardPredicate(frontFaceKeywords, backFaceKeywords, tagKeywords, successRateRange);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertParseSuccess(parser, FRONTFACE_DESC_GOOD + \" \" + VALID_FRONTFACE_DUCK + BACKFACE_DESC_GOOD"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                + TAG_DESC_INDONESIAN, new StatsCommand(expectedPredicateMultipleFrontfaceKeywords));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public void parse_optionalFieldMissing_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        ArrayList\u003cString\u003e frontFaceKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        ArrayList\u003cString\u003e backFaceKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        ArrayList\u003cString\u003e tagKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        double[] successRateRange \u003d {VALID_MIN_BOUND, VALID_MAX_BOUND};"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        // only frontFace keyword"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        frontFaceKeywords.add(VALID_FRONTFACE_GOOD);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        FlashcardPredicate expectedPredicateFrontFaceOnly \u003d new FlashcardPredicate("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                frontFaceKeywords, backFaceKeywords, tagKeywords, successRateRange);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertParseSuccess(parser, FRONTFACE_DESC_GOOD, new StatsCommand(expectedPredicateFrontFaceOnly));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        frontFaceKeywords.remove(0);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        // only backFace keyword with whitespace preamble"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        backFaceKeywords.add(VALID_BACKFACE_GOOD);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        FlashcardPredicate expectedPredicateBackFaceOnly \u003d new FlashcardPredicate("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                frontFaceKeywords, backFaceKeywords, tagKeywords, successRateRange);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + BACKFACE_DESC_GOOD,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                new StatsCommand(expectedPredicateBackFaceOnly));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        backFaceKeywords.remove(0);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        // only tag keyword"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        tagKeywords.add(VALID_TAG_CHINESE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        FlashcardPredicate expectedPredicateTagOnly \u003d new FlashcardPredicate("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                frontFaceKeywords, backFaceKeywords, tagKeywords, successRateRange);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertParseSuccess(parser, TAG_DESC_CHINESE, new StatsCommand(expectedPredicateTagOnly));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        tagKeywords.remove(0);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        // only tag and frontFace"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        tagKeywords.add(VALID_TAG_CHINESE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        frontFaceKeywords.add(VALID_FRONTFACE_DUCK);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        FlashcardPredicate expectedPredicateTagAndFrontFaceOnly \u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                new FlashcardPredicate(frontFaceKeywords, backFaceKeywords, tagKeywords, successRateRange);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertParseSuccess(parser, TAG_DESC_CHINESE + FRONTFACE_DESC_DUCK,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                new StatsCommand(expectedPredicateTagAndFrontFaceOnly));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        // invalid frontFace"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                INVALID_FRONTFACE_DESC + BACKFACE_DESC_GOOD + TAG_DESC_INDONESIAN, Face.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        // invalid backFace"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                FRONTFACE_DESC_GOOD + INVALID_BACKFACE_DESC + TAG_DESC_INDONESIAN, Face.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertParseFailure(parser, FRONTFACE_DESC_GOOD + BACKFACE_DESC_GOOD + INVALID_TAG_DESC"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                + VALID_TAG_CHINESE, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + FRONTFACE_DESC_GOOD + BACKFACE_DESC_GOOD"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                + TAG_DESC_CHINESE, String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lungsin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 133,
      "lucatriglia": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/CardCollectionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robincyu"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CHINESE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.GOOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalCardCollection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.exceptions.DuplicateFlashcardException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public class CardCollectionTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private final CardCollection cardCollection \u003d new CardCollection();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertEquals(Collections.emptyList(), cardCollection.getFlashcardList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        cardCollection.resetData(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void resetData_withValidReadOnlyCardCollection_replacesData() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        CardCollection newData \u003d getTypicalCardCollection();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        cardCollection.resetData(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertEquals(newData, cardCollection);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void resetData_withDuplicateFlashcards_throwsDuplicateFlashcardException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // Two flashcards with the same identity fields"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Flashcard editedGood \u003d new FlashcardBuilder(GOOD).withTags(VALID_TAG_CHINESE)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        List\u003cFlashcard\u003e newFlashcards \u003d Arrays.asList(GOOD, editedGood);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        CardCollectionStub newData \u003d new CardCollectionStub(newFlashcards);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        thrown.expect(DuplicateFlashcardException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        cardCollection.resetData(newData);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void hasFlashcard_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        cardCollection.hasFlashcard(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void hasFlashcard_flashcardNotInCardCollection_returnsFalse() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertFalse(cardCollection.hasFlashcard(GOOD));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void hasFlashcard_flashcardInCardCollection_returnsTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        cardCollection.addFlashcard(GOOD);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertTrue(cardCollection.hasFlashcard(GOOD));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void hasFlashcard_flashcardWithSameIdentityFieldsInCardCollection_returnsTrue() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        cardCollection.addFlashcard(GOOD);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Flashcard editedGood \u003d new FlashcardBuilder(GOOD).withTags(VALID_TAG_CHINESE)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertTrue(cardCollection.hasFlashcard(editedGood));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void getFlashcardList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        cardCollection.getFlashcardList().remove(0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        cardCollection.addListener(listener);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        cardCollection.addFlashcard(GOOD);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        cardCollection.addListener(listener);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        cardCollection.removeListener(listener);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        cardCollection.addFlashcard(GOOD);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * A stub ReadOnlyCardCollection whose flashcards list can violate interface constraints."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private static class CardCollectionStub implements ReadOnlyCardCollection {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        private final ObservableList\u003cFlashcard\u003e flashcards \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        CardCollectionStub(Collection\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            this.flashcards.setAll(flashcards);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        public ObservableList\u003cFlashcard\u003e getFlashcardList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            return flashcards;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "robincyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 127,
      "sergiovieri": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FRONTFACE_HITBAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MAX_BOUND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MIN_BOUND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.GOOD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.HITBAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.model.flashcard.FlashcardPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.exceptions.FlashcardNotFoundException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.testutil.CardCollectionBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertEquals(new CardCollection(), new CardCollection(modelManager.getCardCollection()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertEquals(null, modelManager.getSelectedFlashcard());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        userPrefs.setCardCollectionFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        userPrefs.setCardCollectionFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void setCardCollectionFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        modelManager.setCardCollectionFilePath(null);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void setCardCollectionFilePath_validPath_setsCardCollectionFilePath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        modelManager.setCardCollectionFilePath(path);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertEquals(path, modelManager.getCardCollectionFilePath());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void hasFlashcard_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        modelManager.hasFlashcard(null);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void hasFlashcard_flashcardNotInCardCollection_returnsFalse() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertFalse(modelManager.hasFlashcard(GOOD));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void hasFlashcard_flashcardInCardCollection_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        modelManager.addFlashcard(GOOD);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertTrue(modelManager.hasFlashcard(GOOD));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void deleteFlashcard_flashcardIsSelectedAndFirstFlashcardInFilteredFlashcardList_selectionCleared() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        modelManager.addFlashcard(GOOD);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        modelManager.setSelectedFlashcard(GOOD);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        modelManager.deleteFlashcard(GOOD);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertEquals(null, modelManager.getSelectedFlashcard());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void deleteFlashcard_flashcardIsSelectedAndSecondFlashcardInFilteredFlashcardList_firstFlashcardSelected() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        modelManager.addFlashcard(GOOD);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        modelManager.addFlashcard(HITBAG);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertEquals(Arrays.asList(GOOD, HITBAG), modelManager.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        modelManager.setSelectedFlashcard(HITBAG);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        modelManager.deleteFlashcard(HITBAG);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertEquals(GOOD, modelManager.getSelectedFlashcard());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void setFlashcard_flashcardIsSelected_selectedFlashcardUpdated() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        modelManager.addFlashcard(GOOD);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        modelManager.setSelectedFlashcard(GOOD);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Flashcard updatedAlice \u003d new FlashcardBuilder(GOOD).withFrontFace(VALID_FRONTFACE_HITBAG).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        modelManager.setFlashcard(GOOD, updatedAlice);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertEquals(updatedAlice, modelManager.getSelectedFlashcard());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void getFilteredFlashcardList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        modelManager.getFilteredFlashcardList().remove(0);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void setSelectedFlashcard_flashcardNotInFilteredFlashcardList_throwsFlashcardNotFoundException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        thrown.expect(FlashcardNotFoundException.class);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        modelManager.setSelectedFlashcard(GOOD);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void setSelectedFlashcard_flashcardInFilteredFlashcardList_setsSelectedFlashcard() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        modelManager.addFlashcard(GOOD);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertEquals(Collections.singletonList(GOOD), modelManager.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        modelManager.setSelectedFlashcard(GOOD);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertEquals(GOOD, modelManager.getSelectedFlashcard());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        CardCollection cardCollection \u003d new CardCollectionBuilder().withFlashcard(GOOD).withFlashcard(HITBAG).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        CardCollection differentCardCollection \u003d new CardCollection();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        modelManager \u003d new ModelManager(cardCollection, userPrefs);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(cardCollection, userPrefs);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // different cardCollection -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentCardCollection, userPrefs)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        String[] frontFaceKeywords \u003d GOOD.getFrontFace().text.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        String[] backFaceKeywords \u003d GOOD.getBackFace().text.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d GOOD.getTags();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        ArrayList\u003cString\u003e tagKeywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        for (Tag tag : tagSet) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "            tagKeywords.add(tag.tagName);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        double[] successRateRange \u003d {VALID_MIN_BOUND, VALID_MAX_BOUND};"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        modelManager.updateFilteredFlashcardList(new FlashcardPredicate("
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                Arrays.asList(frontFaceKeywords), Arrays.asList(backFaceKeywords), tagKeywords, successRateRange));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(cardCollection, userPrefs)));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        modelManager.updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        differentUserPrefs.setCardCollectionFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(cardCollection, differentUserPrefs)));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucatriglia": 18,
      "robincyu": 37,
      "sergiovieri": 25,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void setCardCollectionFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPrefs.setCardCollectionFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedCardCollectionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robincyu"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.GOOD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.HITBAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.testutil.CardCollectionBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public class VersionedCardCollectionTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private final ReadOnlyCardCollection cardCollectionWithGood \u003d new CardCollectionBuilder()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        .withFlashcard(GOOD).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private final ReadOnlyCardCollection cardCollectionWithHitbag \u003d new CardCollectionBuilder()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        .withFlashcard(HITBAG).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private final ReadOnlyCardCollection cardCollectionWithEmail \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        new CardCollectionBuilder().withFlashcard(EMAIL).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private final ReadOnlyCardCollection emptyCardCollection \u003d new CardCollectionBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void commit_singleCardCollection_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        VersionedCardCollection versionedCardCollection \u003d prepareCardCollectionList(emptyCardCollection);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        versionedCardCollection.commit();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCardCollectionListStatus(versionedCardCollection,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            Collections.singletonList(emptyCardCollection),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            emptyCardCollection,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            Collections.emptyList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void commit_multipleCardCollectionPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        VersionedCardCollection versionedCardCollection \u003d prepareCardCollectionList("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            emptyCardCollection, cardCollectionWithGood, cardCollectionWithHitbag);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        versionedCardCollection.commit();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCardCollectionListStatus(versionedCardCollection,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            Arrays.asList(emptyCardCollection, cardCollectionWithGood, cardCollectionWithHitbag),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            cardCollectionWithHitbag,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            Collections.emptyList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void commit_multipleCardCollectionPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        VersionedCardCollection versionedCardCollection \u003d prepareCardCollectionList("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            emptyCardCollection, cardCollectionWithGood, cardCollectionWithHitbag);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedCardCollection, 2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        versionedCardCollection.commit();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCardCollectionListStatus(versionedCardCollection,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            Collections.singletonList(emptyCardCollection),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            emptyCardCollection,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            Collections.emptyList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void canUndo_multipleCardCollectionPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        VersionedCardCollection versionedCardCollection \u003d prepareCardCollectionList("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            emptyCardCollection, cardCollectionWithGood, cardCollectionWithHitbag);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertTrue(versionedCardCollection.canUndo());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void canUndo_multipleCardCollectionPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        VersionedCardCollection versionedCardCollection \u003d prepareCardCollectionList("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            emptyCardCollection, cardCollectionWithGood, cardCollectionWithHitbag);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedCardCollection, 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertTrue(versionedCardCollection.canUndo());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void canUndo_singleCardCollection_returnsFalse() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        VersionedCardCollection versionedCardCollection \u003d prepareCardCollectionList(emptyCardCollection);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertFalse(versionedCardCollection.canUndo());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void canUndo_multipleCardCollectionPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        VersionedCardCollection versionedCardCollection \u003d prepareCardCollectionList("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            emptyCardCollection, cardCollectionWithGood, cardCollectionWithHitbag);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedCardCollection, 2);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertFalse(versionedCardCollection.canUndo());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void canRedo_multipleCardCollectionPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        VersionedCardCollection versionedCardCollection \u003d prepareCardCollectionList("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            emptyCardCollection, cardCollectionWithGood, cardCollectionWithHitbag);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedCardCollection, 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertTrue(versionedCardCollection.canRedo());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void canRedo_multipleCardCollectionPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        VersionedCardCollection versionedCardCollection \u003d prepareCardCollectionList("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            emptyCardCollection, cardCollectionWithGood, cardCollectionWithHitbag);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedCardCollection, 2);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertTrue(versionedCardCollection.canRedo());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void canRedo_singleCardCollection_returnsFalse() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        VersionedCardCollection versionedCardCollection \u003d prepareCardCollectionList(emptyCardCollection);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertFalse(versionedCardCollection.canRedo());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void canRedo_multipleCardCollectionPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        VersionedCardCollection versionedCardCollection \u003d prepareCardCollectionList("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            emptyCardCollection, cardCollectionWithGood, cardCollectionWithHitbag);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertFalse(versionedCardCollection.canRedo());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void undo_multipleCardCollectionPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        VersionedCardCollection versionedCardCollection \u003d prepareCardCollectionList("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            emptyCardCollection, cardCollectionWithGood, cardCollectionWithHitbag);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        versionedCardCollection.undo();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCardCollectionListStatus(versionedCardCollection,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            Collections.singletonList(emptyCardCollection),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            cardCollectionWithGood,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            Collections.singletonList(cardCollectionWithHitbag));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void undo_multipleCardCollectionPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        VersionedCardCollection versionedCardCollection \u003d prepareCardCollectionList("
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            emptyCardCollection, cardCollectionWithGood, cardCollectionWithHitbag);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedCardCollection, 1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        versionedCardCollection.undo();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCardCollectionListStatus(versionedCardCollection,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            Collections.emptyList(),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            emptyCardCollection,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            Arrays.asList(cardCollectionWithGood, cardCollectionWithHitbag));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void undo_singleCardCollection_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        VersionedCardCollection versionedCardCollection \u003d prepareCardCollectionList(emptyCardCollection);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertThrows(VersionedCardCollection.NoUndoableStateException.class, versionedCardCollection::undo);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void undo_multipleCardCollectionPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        VersionedCardCollection versionedCardCollection \u003d prepareCardCollectionList("
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            emptyCardCollection, cardCollectionWithGood, cardCollectionWithHitbag);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedCardCollection, 2);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertThrows(VersionedCardCollection.NoUndoableStateException.class, versionedCardCollection::undo);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void redo_multipleCardCollectionPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        VersionedCardCollection versionedCardCollection \u003d prepareCardCollectionList("
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            emptyCardCollection, cardCollectionWithGood, cardCollectionWithHitbag);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedCardCollection, 1);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        versionedCardCollection.redo();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCardCollectionListStatus(versionedCardCollection,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            Arrays.asList(emptyCardCollection, cardCollectionWithGood),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            cardCollectionWithHitbag,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            Collections.emptyList());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void redo_multipleCardCollectionPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        VersionedCardCollection versionedCardCollection \u003d prepareCardCollectionList("
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            emptyCardCollection, cardCollectionWithGood, cardCollectionWithHitbag);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedCardCollection, 2);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        versionedCardCollection.redo();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCardCollectionListStatus(versionedCardCollection,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            Collections.singletonList(emptyCardCollection),"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            cardCollectionWithGood,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            Collections.singletonList(cardCollectionWithHitbag));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void redo_singleCardCollection_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        VersionedCardCollection versionedCardCollection \u003d prepareCardCollectionList(emptyCardCollection);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertThrows(VersionedCardCollection.NoRedoableStateException.class, versionedCardCollection::redo);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void redo_multipleCardCollectionPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        VersionedCardCollection versionedCardCollection \u003d prepareCardCollectionList("
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            emptyCardCollection, cardCollectionWithGood, cardCollectionWithHitbag);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertThrows(VersionedCardCollection.NoRedoableStateException.class, versionedCardCollection::redo);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        VersionedCardCollection versionedCardCollection \u003d prepareCardCollectionList(cardCollectionWithGood,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            cardCollectionWithHitbag);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        VersionedCardCollection copy \u003d prepareCardCollectionList(cardCollectionWithGood, cardCollectionWithHitbag);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertTrue(versionedCardCollection.equals(copy));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertTrue(versionedCardCollection.equals(versionedCardCollection));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertFalse(versionedCardCollection.equals(null));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertFalse(versionedCardCollection.equals(1));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        VersionedCardCollection differentCardCollectionList \u003d prepareCardCollectionList(cardCollectionWithHitbag,"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            cardCollectionWithEmail);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertFalse(versionedCardCollection.equals(differentCardCollectionList));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        VersionedCardCollection differentCurrentStatePointer \u003d prepareCardCollectionList("
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            cardCollectionWithGood, cardCollectionWithHitbag);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedCardCollection, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertFalse(versionedCardCollection.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Asserts that {@code versionedCardCollection} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * states before {@code versionedCardCollection#currentStatePointer} is equal to {@code"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * and states after {@code versionedCardCollection#currentStatePointer} is equal to {@code"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private void assertCardCollectionListStatus(VersionedCardCollection versionedCardCollection,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                                                List\u003cReadOnlyCardCollection\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                                                ReadOnlyCardCollection expectedCurrentState,"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                                                List\u003cReadOnlyCardCollection\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertEquals(new CardCollection(versionedCardCollection), expectedCurrentState);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        while (versionedCardCollection.canUndo()) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            versionedCardCollection.undo();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        for (ReadOnlyCardCollection expectedCardCollection : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            assertEquals(expectedCardCollection, new CardCollection(versionedCardCollection));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            versionedCardCollection.redo();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        for (ReadOnlyCardCollection expectedCardCollection : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            versionedCardCollection.redo();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            assertEquals(expectedCardCollection, new CardCollection(versionedCardCollection));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertFalse(versionedCardCollection.canRedo());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedCardCollection.undo());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Creates and returns a {@code VersionedCardCollection} with the {@code cardCollectionStates} added into it, and"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * the"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * {@code VersionedCardCollection#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private VersionedCardCollection prepareCardCollectionList(ReadOnlyCardCollection... cardCollectionStates) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertFalse(cardCollectionStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        VersionedCardCollection versionedCardCollection \u003d new VersionedCardCollection(cardCollectionStates[0]);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        for (int i \u003d 1; i \u003c cardCollectionStates.length; i++) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            versionedCardCollection.resetData(cardCollectionStates[i]);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            versionedCardCollection.commit();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return versionedCardCollection;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Shifts the {@code versionedCardCollection#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedCardCollection versionedCardCollection, int count) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            versionedCardCollection.undo();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "robincyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 267,
      "sergiovieri": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/flashcard/FaceContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.model.flashcard.FlashcardPredicate.IS_FRONT_FACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "public class FaceContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        FaceContainsKeywordsPredicate firstPredicate \u003d new FaceContainsKeywordsPredicate(firstPredicateKeywordList,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                IS_FRONT_FACE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        FaceContainsKeywordsPredicate secondPredicate \u003d new FaceContainsKeywordsPredicate(secondPredicateKeywordList,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                IS_FRONT_FACE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        FaceContainsKeywordsPredicate firstPredicateCopy \u003d new FaceContainsKeywordsPredicate(firstPredicateKeywordList,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                IS_FRONT_FACE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        FaceContainsKeywordsPredicate frontFacePredicate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        FaceContainsKeywordsPredicate backFacePredicate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        frontFacePredicate \u003d new FaceContainsKeywordsPredicate(Collections.singletonList(\"Hello\"), IS_FRONT_FACE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertTrue(frontFacePredicate.test(new FlashcardBuilder().withFrontFace(\"Hello\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        // Substring keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        backFacePredicate \u003d new FaceContainsKeywordsPredicate(Arrays.asList(\"Hell\"), !IS_FRONT_FACE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        frontFacePredicate \u003d new FaceContainsKeywordsPredicate(Arrays.asList(\"Hell\"), IS_FRONT_FACE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertTrue(frontFacePredicate.test(new FlashcardBuilder().withFrontFace(\"Hello Hola\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertTrue(backFacePredicate.test(new FlashcardBuilder().withBackFace(\"Hello Hola\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        backFacePredicate \u003d new FaceContainsKeywordsPredicate(Arrays.asList(\"Hello\", \"Hola\"), !IS_FRONT_FACE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        frontFacePredicate \u003d new FaceContainsKeywordsPredicate(Arrays.asList(\"Hello\", \"Hola\"), IS_FRONT_FACE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertTrue(frontFacePredicate.test(new FlashcardBuilder().withFrontFace(\"Hello Hola\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertTrue(backFacePredicate.test(new FlashcardBuilder().withBackFace(\"Hello Hola\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertTrue(frontFacePredicate.test(new FlashcardBuilder().withFrontFace(\"Halo Hola\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertTrue(backFacePredicate.test(new FlashcardBuilder().withBackFace(\"Halo Hola\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        frontFacePredicate \u003d new FaceContainsKeywordsPredicate(Arrays.asList(\"hEllO\", \"hOla\"), IS_FRONT_FACE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        backFacePredicate \u003d new FaceContainsKeywordsPredicate(Arrays.asList(\"hEllO\", \"hOla\"), !IS_FRONT_FACE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertTrue(frontFacePredicate.test(new FlashcardBuilder().withFrontFace(\"Hello Holla\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertTrue(backFacePredicate.test(new FlashcardBuilder().withBackFace(\"Hello Holla\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        FaceContainsKeywordsPredicate predicate \u003d new FaceContainsKeywordsPredicate(Collections.emptyList(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "                IS_FRONT_FACE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withFrontFace(\"Good\").build()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        predicate \u003d new FaceContainsKeywordsPredicate(Collections.singletonList(\"Bad\"), IS_FRONT_FACE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        assertFalse(predicate.test(new FlashcardBuilder().withFrontFace(\"Good\").build()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 11,
      "lucatriglia": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/model/flashcard/FaceTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "public class FaceTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Face(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void constructor_invalidFace_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        String invalidFace \u003d \" \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Face(invalidFace));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void isValidFace() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        // null face"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Face.isValidFace(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        // invalid faces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertFalse(Face.isValidFace(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertFalse(Face.isValidFace(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertTrue(Face.isValidFace(\"Hello\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertTrue(Face.isValidFace(\"你好\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Face face \u003d new Face(\"Hello\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        // same object equals"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertTrue(face.equals(face));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        // null object false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertFalse(face.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        // different class false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertFalse(face.equals(1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        // same text true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertTrue(face.equals(new Face(\"Hello\")));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sergiovieri": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/model/flashcard/FlashcardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robincyu"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BACKFACE_GOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FRONTFACE_GOOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FRONTFACE_HITBAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CHINESE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_INDONESIAN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.EMAIL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.HELLO;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public class FlashcardTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Flashcard flashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        flashcard.getTags().remove(0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void isSameFlashcard() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertTrue(HELLO.isSameFlashcard(HELLO));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertFalse(HELLO.isSameFlashcard(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        // different frontFace -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Flashcard editedHello \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            new FlashcardBuilder(HELLO).withFrontFace(VALID_FRONTFACE_GOOD).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertFalse(HELLO.isSameFlashcard(editedHello));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        // different backFace -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        editedHello \u003d new FlashcardBuilder(HELLO).withBackFace(VALID_BACKFACE_GOOD).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertFalse(HELLO.isSameFlashcard(editedHello));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        // same face, different tags -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        editedHello \u003d new FlashcardBuilder(HELLO).withTags(VALID_TAG_INDONESIAN, VALID_TAG_CHINESE).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertTrue(HELLO.isSameFlashcard(editedHello));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Flashcard helloCopy \u003d new FlashcardBuilder(HELLO).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertEquals(HELLO, helloCopy);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertEquals(HELLO, HELLO);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertFalse(HELLO.equals(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertFalse(HELLO.equals(5));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertFalse(HELLO.equals(EMAIL));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        // different frontFace -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Flashcard editedHello \u003d new FlashcardBuilder(HELLO).withFrontFace(VALID_FRONTFACE_HITBAG).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertFalse(HELLO.equals(editedHello));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        // different backFace -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        editedHello \u003d new FlashcardBuilder(HELLO).withBackFace(VALID_BACKFACE_GOOD).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertFalse(HELLO.equals(editedHello));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        editedHello \u003d new FlashcardBuilder(HELLO).withTags(VALID_TAG_CHINESE, VALID_TAG_INDONESIAN).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertFalse(HELLO.equals(editedHello));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 7,
      "sergiovieri": 37,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/flashcard/ProficiencyTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lungsin"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.model.flashcard.Proficiency.ACTIVE_IN_UNDER_A_MINUTE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.model.flashcard.Proficiency.INACTIVE_UNTIL_IN_DAYS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.model.flashcard.Proficiency.INACTIVE_UNTIL_IN_HOURS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.model.flashcard.Proficiency.INACTIVE_UNTIL_IN_MINUTES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.model.flashcard.Proficiency.NOW_ACTIVE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lungsin"
        },
        "content": "public class ProficiencyTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private long halfMinute \u003d TimeUnit.SECONDS.toMillis(30);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private Calendar now \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private Calendar yesterday \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private Calendar tomorrow \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private Calendar twoDaysFromNow \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        tomorrow.add(Calendar.DATE, 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        twoDaysFromNow.add(Calendar.DATE, 2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        yesterday.add(Calendar.DATE, -1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public void constructor_successLessThanAttempt_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Proficiency(yesterday, -32));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Proficiency(now, -1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public void isIncludedInCurrentQuiz() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertFalse(new Proficiency(tomorrow, 31).isIncludedInCurrentQuiz());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertFalse(new Proficiency(tomorrow, 1).isIncludedInCurrentQuiz());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertTrue(new Proficiency().isIncludedInCurrentQuiz());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertTrue(new Proficiency(yesterday, 100).isIncludedInCurrentQuiz());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public void quizAttempt() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Proficiency proficiency \u003d new Proficiency(now, 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Proficiency result \u003d proficiency.quizAttempt(true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertEquals(new Proficiency(twoDaysFromNow, 2), result);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        proficiency \u003d new Proficiency(yesterday, 3);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        result \u003d proficiency.quizAttempt(false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertEquals(new Proficiency(), result);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public void isValidProficiency() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        // null proficiency"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Statistics.isValidStatistics(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        // blank proficiency"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertFalse(Proficiency.isValidProficiency(\"\")); // empty string"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertFalse(Proficiency.isValidProficiency(\" \")); // spaces only"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertFalse(Proficiency.isValidProficiency(\"inactive until 2 proficiency level\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertFalse(Proficiency.isValidProficiency(\"inactive until 2 proficiency 3\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertFalse(Proficiency.isValidProficiency(\"inactive until 2 level 3\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertFalse(Proficiency.isValidProficiency(\"inactive until proficiency level 3\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertFalse(Proficiency.isValidProficiency(\"inactive 2 proficiency level 3\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertFalse(Proficiency.isValidProficiency(\"until 2 proficiency level 3\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        // negative proficiency level"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertFalse(Proficiency.isValidProficiency(\"inactive until 5 proficiency level -1\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        // extra character(s)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertFalse(Proficiency.isValidProficiency(\"inactive until 2 proficiency level 3 \"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertFalse(Proficiency.isValidProficiency(\"inactive until 2 proficiency level 3  \"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertFalse(Proficiency.isValidProficiency(\"inactive until 2 proficiency level 3.  I am good at this.\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        // valid Proficiency"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertTrue(Proficiency.isValidProficiency(\"inactive until 202 proficiency level 3\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertTrue(Proficiency.isValidProficiency(\"inactive until 10230 proficiency level 100\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertTrue(Proficiency.isValidProficiency(\"inactive until 202 proficiency level 30\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertTrue(Proficiency.isValidProficiency(\"inactive until 12338 proficiency level 3392\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public void getQuizSrsStatus() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertQuizStatus(-TimeUnit.MINUTES.toMillis(1), NOW_ACTIVE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertQuizStatus(TimeUnit.SECONDS.toMillis(1), ACTIVE_IN_UNDER_A_MINUTE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertQuizStatus(TimeUnit.MINUTES.toMillis(2), String.format(INACTIVE_UNTIL_IN_MINUTES, 2));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertQuizStatus(TimeUnit.MINUTES.toMillis(59), String.format(INACTIVE_UNTIL_IN_MINUTES, 59));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertQuizStatus(TimeUnit.HOURS.toMillis(1), String.format(INACTIVE_UNTIL_IN_HOURS, 1));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertQuizStatus(TimeUnit.HOURS.toMillis(23), String.format(INACTIVE_UNTIL_IN_HOURS, 23));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertQuizStatus(TimeUnit.DAYS.toMillis(1), String.format(INACTIVE_UNTIL_IN_DAYS, 1));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertQuizStatus(TimeUnit.DAYS.toMillis(20), String.format(INACTIVE_UNTIL_IN_DAYS, 20));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * Create a Proficiency that inactive until `millis` milli seconds from now. Test if the expected message is"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * printed."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private void assertQuizStatus(long millis, String expectedMessage) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        millis +\u003d halfMinute;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Calendar now \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        now.add(Calendar.MILLISECOND, (int) millis);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertEquals(expectedMessage, new Proficiency(now, 0).getQuizSrsStatus());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lungsin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/model/flashcard/StatisticsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lungsin"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lungsin"
        },
        "content": "public class StatisticsTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public void constructor_successLessThanAttempt_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Statistics(10, 9));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Statistics(1, 0));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public void getSuccessRate() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        double epsilon \u003d 1e-9;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertEquals((double) 17 / 31, new Statistics(17, 31).getSuccessRate(), epsilon);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertEquals((double) 11 / 50, new Statistics(11, 50).getSuccessRate(), epsilon);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertEquals(0, new Statistics(0, 0).getSuccessRate(), epsilon);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertEquals(0, new Statistics().getSuccessRate(), epsilon);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public void quizAttempt() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Statistics stats \u003d new Statistics(1, 3);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Statistics result \u003d stats.quizAttempt(true);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertEquals(new Statistics(2, 4), result);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertEquals(new Statistics(1, 3), stats);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        result \u003d stats.quizAttempt(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertEquals(new Statistics(1, 4), result);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertEquals(new Statistics(1, 3), stats);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public void merge() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Statistics stats1 \u003d new Statistics(11, 30);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Statistics stats2 \u003d new Statistics(101, 301);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Statistics stats3 \u003d new Statistics();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertEquals(new Statistics(101 + 11, 301 + 30), stats1.merge(stats2));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertEquals(new Statistics(101, 301), stats2.merge(stats3));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertEquals(new Statistics(11, 30), stats1.merge(stats3));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public void isValidStatistics() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        // null statistics"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Statistics.isValidStatistics(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        // blank statistics"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertFalse(Statistics.isValidStatistics(\"\")); // empty string"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertFalse(Statistics.isValidStatistics(\" \")); // spaces only"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertFalse(Statistics.isValidStatistics(\"2 success out 3 attempts.\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertFalse(Statistics.isValidStatistics(\"2 success of 3 attempts.\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertFalse(Statistics.isValidStatistics(\"2 out of 3 attempt.\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertFalse(Statistics.isValidStatistics(\"out of 3 attempts.\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertFalse(Statistics.isValidStatistics(\"out of attempts.\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertFalse(Statistics.isValidStatistics(\"2 success out of 3 attempt.\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertFalse(Statistics.isValidStatistics(\"2 success out of 3 attempts\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertFalse(Statistics.isValidStatistics(\"2 success out of 3 \"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        // success greater than attempt"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertFalse(Statistics.isValidStatistics(\"5 success out of 3 attempts.\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        // extra character(s)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertFalse(Statistics.isValidStatistics(\"2 success out of 3 attempts. \"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertFalse(Statistics.isValidStatistics(\"2 success out of 3 attempts.   \"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertFalse(Statistics.isValidStatistics(\"3 success out of 3 attempts. I am good at this.\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        // valid Statistics"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertTrue(Statistics.isValidStatistics(\"2 out of 3 attempts.\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertTrue(Statistics.isValidStatistics(\"100 out of 100 attempts.\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertTrue(Statistics.isValidStatistics(\"20 out of 30 attempts.\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertTrue(Statistics.isValidStatistics(\"1238 out of 3392 attempts.\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lungsin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/model/flashcard/UniqueFlashcardListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robincyu"
        },
        "content": "package seedu.address.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CHINESE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_INDONESIAN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.GOOD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.HITBAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.exceptions.DuplicateFlashcardException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.exceptions.FlashcardNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public class UniqueFlashcardListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private final UniqueFlashcardList uniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void contains_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        uniqueFlashcardList.contains(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void contains_flashcardNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertFalse(uniqueFlashcardList.contains(GOOD));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void contains_flashcardInList_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        uniqueFlashcardList.add(GOOD);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertTrue(uniqueFlashcardList.contains(GOOD));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void contains_flashcardWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        uniqueFlashcardList.add(GOOD);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Flashcard editedGood \u003d new FlashcardBuilder(GOOD).withTags(VALID_TAG_INDONESIAN).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertTrue(uniqueFlashcardList.contains(editedGood));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void add_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        uniqueFlashcardList.add(null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void add_duplicateFlashcard_throwsDuplicateFlashcardException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        uniqueFlashcardList.add(GOOD);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        thrown.expect(DuplicateFlashcardException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        uniqueFlashcardList.add(GOOD);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void setFlashcard_nullTargetFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        uniqueFlashcardList.setFlashcard(null, GOOD);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void setFlashcard_nullEditedFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        uniqueFlashcardList.setFlashcard(GOOD, null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void setFlashcard_targetFlashcardNotInList_throwsFlashcardNotFoundException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        thrown.expect(FlashcardNotFoundException.class);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        uniqueFlashcardList.setFlashcard(GOOD, GOOD);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void setFlashcard_editedFlashcardIsSameFlashcard_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        uniqueFlashcardList.add(GOOD);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        uniqueFlashcardList.setFlashcard(GOOD, GOOD);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        expectedUniqueFlashcardList.add(GOOD);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void setFlashcard_editedFlashcardHasSameIdentity_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        uniqueFlashcardList.add(GOOD);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Flashcard editedAlice \u003d new FlashcardBuilder(GOOD).withTags(VALID_TAG_CHINESE)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        uniqueFlashcardList.setFlashcard(GOOD, editedAlice);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        expectedUniqueFlashcardList.add(editedAlice);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void setFlashcard_editedFlashcardHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        uniqueFlashcardList.add(GOOD);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        uniqueFlashcardList.setFlashcard(GOOD, HITBAG);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        expectedUniqueFlashcardList.add(HITBAG);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void setFlashcard_editedFlashcardHasNonUniqueIdentity_throwsDuplicateFlashcardException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        uniqueFlashcardList.add(GOOD);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        uniqueFlashcardList.add(HITBAG);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        thrown.expect(DuplicateFlashcardException.class);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        uniqueFlashcardList.setFlashcard(GOOD, HITBAG);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void remove_nullFlashcard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        uniqueFlashcardList.remove(null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void remove_flashcardDoesNotExist_throwsFlashcardNotFoundException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        thrown.expect(FlashcardNotFoundException.class);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        uniqueFlashcardList.remove(GOOD);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void remove_existingFlashcard_removesFlashcard() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        uniqueFlashcardList.add(GOOD);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        uniqueFlashcardList.remove(GOOD);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void setFlashcards_nullUniqueFlashcardList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        uniqueFlashcardList.setFlashcards((UniqueFlashcardList) null);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void setFlashcards_uniqueFlashcardList_replacesOwnListWithProvidedUniqueFlashcardList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        uniqueFlashcardList.add(GOOD);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        expectedUniqueFlashcardList.add(HITBAG);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        uniqueFlashcardList.setFlashcards(expectedUniqueFlashcardList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void setFlashcards_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        uniqueFlashcardList.setFlashcards((List\u003cFlashcard\u003e) null);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void setFlashcards_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        uniqueFlashcardList.add(GOOD);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        List\u003cFlashcard\u003e flashcardList \u003d Collections.singletonList(HITBAG);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        uniqueFlashcardList.setFlashcards(flashcardList);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        UniqueFlashcardList expectedUniqueFlashcardList \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        expectedUniqueFlashcardList.add(HITBAG);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertEquals(expectedUniqueFlashcardList, uniqueFlashcardList);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void setFlashcards_listWithDuplicateFlashcards_throwsDuplicateFlashcardException() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        List\u003cFlashcard\u003e listWithDuplicateFlashcards \u003d Arrays.asList(GOOD, GOOD);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        thrown.expect(DuplicateFlashcardException.class);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        uniqueFlashcardList.setFlashcards(listWithDuplicateFlashcards);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        uniqueFlashcardList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "robincyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 147,
      "sergiovieri": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedFlashcardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.storage.JsonAdaptedFlashcard.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.GOOD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.HELLO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.flashcard.Face;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.model.flashcard.Proficiency;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.model.flashcard.Statistics;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public class JsonAdaptedFlashcardTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private static final String INVALID_FRONTFACE \u003d \" \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private static final String INVALID_BACKFACE \u003d \" \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#lol\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private static final String INVALID_STATISTICS \u003d \"2 out of 3\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private static final String INVALID_PROFICIENCY \u003d \"2 reviews 3 level\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private static final String VALID_FRONTFACE \u003d HELLO.getFrontFace().text;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private static final String VALID_BACKFACE \u003d HELLO.getBackFace().text;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private static final String VALID_IMAGE \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private static final String VALID_STATISTICS \u003d HELLO.getStatistics().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private static final String VALID_PROFICIENCY \u003d HELLO.getProficiency().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d HELLO.getTags().stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void toModelType_validFlashcardDetails_returnsFlashcard() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(GOOD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertEquals(GOOD, flashcard.toModelType());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void toModelType_invalidFontFace_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                new JsonAdaptedFlashcard(INVALID_FRONTFACE, VALID_BACKFACE, VALID_IMAGE, VALID_STATISTICS,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                        VALID_PROFICIENCY, VALID_TAGS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        String expectedMessage \u003d Face.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void toModelType_nullFrontFace_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(null, VALID_BACKFACE, VALID_IMAGE,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                VALID_STATISTICS, VALID_PROFICIENCY, VALID_TAGS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Face.class.getSimpleName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void toModelType_invalidBackFace_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                new JsonAdaptedFlashcard(VALID_FRONTFACE, INVALID_BACKFACE, VALID_IMAGE, VALID_STATISTICS,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                        VALID_PROFICIENCY, VALID_TAGS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        String expectedMessage \u003d Face.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void toModelType_nullBackFace_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(VALID_FRONTFACE, null, VALID_IMAGE,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                VALID_STATISTICS, VALID_PROFICIENCY, VALID_TAGS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Face.class.getSimpleName());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public void toModelType_invalidStatistics_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                new JsonAdaptedFlashcard(VALID_FRONTFACE, VALID_BACKFACE, VALID_IMAGE, INVALID_STATISTICS,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                        VALID_PROFICIENCY, VALID_TAGS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        String expectedMessage \u003d Statistics.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public void toModelType_nullStatistics_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(VALID_FRONTFACE, VALID_BACKFACE, VALID_IMAGE,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                null, VALID_PROFICIENCY, VALID_TAGS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Statistics.class.getSimpleName());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public void toModelType_invalidProficiency_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                new JsonAdaptedFlashcard(VALID_FRONTFACE, VALID_BACKFACE, VALID_IMAGE, VALID_STATISTICS,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                        INVALID_PROFICIENCY, VALID_TAGS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        String expectedMessage \u003d Proficiency.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public void toModelType_nullProficiency_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d new JsonAdaptedFlashcard(VALID_FRONTFACE, VALID_BACKFACE, VALID_IMAGE,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                VALID_STATISTICS, null, VALID_TAGS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Proficiency.class.getSimpleName());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        JsonAdaptedFlashcard flashcard \u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                new JsonAdaptedFlashcard(VALID_FRONTFACE, VALID_BACKFACE, VALID_IMAGE, VALID_STATISTICS,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                        VALID_PROFICIENCY, invalidTags);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, flashcard::toModelType);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 48,
      "robincyu": 14,
      "sergiovieri": 19,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonCardCollectionStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robincyu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.HELLO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalCardCollection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.CardCollection;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.ReadOnlyCardCollection;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public class JsonCardCollectionStorageTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonCardCollectionStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void readCardCollection_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        readCardCollection(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private java.util.Optional\u003cReadOnlyCardCollection\u003e readCardCollection(String filePath) throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return new JsonCardCollectionStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            .readCardCollection(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertFalse(readCardCollection(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        readCardCollection(\"notJsonFormatCardCollection.json\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void readCardCollection_invalidCardCardCollection_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        readCardCollection(\"invalidCardCardCollection.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void readCardCollection_invalidAndValidCardCardCollection_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        readCardCollection(\"invalidAndValidCardCardCollection.json\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void readAndSaveCardCollection_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempCardCollection.json\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        CardCollection original \u003d getTypicalCardCollection();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        JsonCardCollectionStorage jsonCardCollectionStorage \u003d new JsonCardCollectionStorage(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        jsonCardCollectionStorage.saveCardCollection(original, filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        ReadOnlyCardCollection readBack \u003d jsonCardCollectionStorage.readCardCollection(filePath).get();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertEquals(original, new CardCollection(readBack));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        original.removeFlashcard(HELLO);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        jsonCardCollectionStorage.saveCardCollection(original, filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        readBack \u003d jsonCardCollectionStorage.readCardCollection(filePath).get();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertEquals(original, new CardCollection(readBack));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        original.addFlashcard(HELLO);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        jsonCardCollectionStorage.saveCardCollection(original); // file path not specified"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        readBack \u003d jsonCardCollectionStorage.readCardCollection().get(); // file path not specified"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertEquals(original, new CardCollection(readBack));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void saveCardCollection_nullCardCollection_throwsNullPointerException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        saveCardCollection(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Saves {@code cardCollection} at the specified {@code filePath}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private void saveCardCollection(ReadOnlyCardCollection cardCollection, String filePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            new JsonCardCollectionStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                .saveCardCollection(cardCollection, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void saveCardCollection_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        saveCardCollection(new CardCollection(), null);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "robincyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 119,
      "sergiovieri": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableCardCollectionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robincyu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.CardCollection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.testutil.TypicalFlashcards;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public class JsonSerializableCardCollectionTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableCardCollectionTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private static final Path TYPICAL_FLASHCARDS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalCardsCardCollection.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private static final Path INVALID_FLASHCARD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidCardCardCollection.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private static final Path DUPLICATE_FLASHCARD_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateCardCardCollection.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void toModelType_typicalFlashcardsFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        JsonSerializableCardCollection dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_FLASHCARDS_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            JsonSerializableCardCollection.class).get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        CardCollection cardCollectionFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        CardCollection typicalFlashcardsCardCollection \u003d TypicalFlashcards.getTypicalCardCollection();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertEquals(cardCollectionFromFile, typicalFlashcardsCardCollection);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void toModelType_invalidFlashcardFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        JsonSerializableCardCollection dataFromFile \u003d JsonUtil.readJsonFile(INVALID_FLASHCARD_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            JsonSerializableCardCollection.class).get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void toModelType_duplicateFlashcards_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        JsonSerializableCardCollection dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_FLASHCARD_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            JsonSerializableCardCollection.class).get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        thrown.expectMessage(JsonSerializableCardCollection.MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robincyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        userPrefs.setCardCollectionFilePath(Paths.get(\"cardcollection.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 2,
      "-": 134
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalCardCollection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.CardCollection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.ReadOnlyCardCollection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        JsonCardCollectionStorage cardCollectionStorage \u003d new JsonCardCollectionStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        storageManager \u003d new StorageManager(cardCollectionStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void cardCollectionReadSave() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robincyu"
        },
        "content": "         * {@link JsonCardCollectionStorage} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robincyu"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonCardCollectionStorageTest} class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        CardCollection original \u003d getTypicalCardCollection();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        storageManager.saveCardCollection(original);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        ReadOnlyCardCollection retrieved \u003d storageManager.readCardCollection().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertEquals(original, new CardCollection(retrieved));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void getCardCollectionFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertNotNull(storageManager.getCardCollectionFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 14,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/CardCollectionBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robincyu"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.CardCollection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * A utility class to help with building CardCollection objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * {@code CardCollection ab \u003d new CardCollectionBuilder().withFlashcard(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public class CardCollectionBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private CardCollection cardCollection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public CardCollectionBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        cardCollection \u003d new CardCollection();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public CardCollectionBuilder(CardCollection cardCollection) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        this.cardCollection \u003d cardCollection;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Adds a new {@code Flashcard} to the {@code CardCollection} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public CardCollectionBuilder withFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        cardCollection.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public CardCollection build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return cardCollection;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robincyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditFlashcardDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robincyu"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditFlashcardDescriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.flashcard.Face;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.ImagePath;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * A utility class to help with building EditFlashcardDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public class EditFlashcardDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private EditCommand.EditFlashcardDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public EditFlashcardDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        descriptor \u003d new EditFlashcardDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public EditFlashcardDescriptorBuilder(EditFlashcardDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        this.descriptor \u003d new EditCommand.EditFlashcardDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns an {@code EditFlashcardDescriptor} with fields containing {@code flashcard}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public EditFlashcardDescriptorBuilder(Flashcard flashcard) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        descriptor \u003d new EditFlashcardDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        descriptor.setFrontFace(flashcard.getFrontFace());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        descriptor.setBackFace(flashcard.getBackFace());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        descriptor.setImagePath(flashcard.getImagePath());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        descriptor.setTags(flashcard.getTags());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Sets the {@code FrontFace} of the {@code EditFlashcardDescriptor} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public EditFlashcardDescriptorBuilder withFrontFace(String frontFace) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        descriptor.setFrontFace(new Face(frontFace));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Sets the {@code BackFace} of the {@code EditFlashcardDescriptor} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public EditFlashcardDescriptorBuilder withBackFace(String backFace) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        descriptor.setBackFace(new Face(backFace));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Sets the {@code BackFace} of the {@code EditFlashcardDescriptor} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public EditFlashcardDescriptorBuilder withImagePath(Optional\u003cString\u003e imagePath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        descriptor.setImagePath(new ImagePath(imagePath));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditFlashcardDescriptor}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public EditFlashcardDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public EditFlashcardDescriptor build() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "robincyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 69,
      "sergiovieri": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/FlashcardBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robincyu"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.flashcard.Face;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.ImagePath;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.model.flashcard.Proficiency;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.model.flashcard.Statistics;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * A utility class to help with building Flashcard objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public class FlashcardBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final String DEFAULT_FRONTFACE \u003d \"Lorem\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final String DEFAULT_BACKFACE \u003d \"Ipsum\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private Face frontFace;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private Face backFace;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private ImagePath imagePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private Statistics statistics;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private Proficiency proficiency;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public FlashcardBuilder() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        frontFace \u003d new Face(DEFAULT_FRONTFACE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        backFace \u003d new Face(DEFAULT_BACKFACE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        imagePath \u003d new ImagePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        statistics \u003d new Statistics();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        proficiency \u003d new Proficiency();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Initializes the FlashcardBuilder with the data of {@code flashcardToCopy}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public FlashcardBuilder(Flashcard flashcardToCopy) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        frontFace \u003d flashcardToCopy.getFrontFace();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        backFace \u003d flashcardToCopy.getBackFace();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        imagePath \u003d flashcardToCopy.getImagePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(flashcardToCopy.getTags());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        statistics \u003d flashcardToCopy.getStatistics();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        proficiency \u003d flashcardToCopy.getProficiency();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Sets the {@code frontFace} of the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public FlashcardBuilder withFrontFace(String frontFace) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        this.frontFace \u003d new Face(frontFace);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Sets the {@code backFace} of the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public FlashcardBuilder withBackFace(String backFace) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        this.backFace \u003d new Face(backFace);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Sets the {@code imagePath} of the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public FlashcardBuilder withImagePath(Optional\u003cString\u003e imagePath) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        this.imagePath \u003d new ImagePath(imagePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public FlashcardBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * Sets the {@code statistics} of the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public FlashcardBuilder withStatistics(int success, int attempts) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        this.statistics \u003d new Statistics(success, attempts);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * Sets the {@code proficiency} of the {@code Flashcard} that we are building."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public FlashcardBuilder withProficiency(int daysLeftToReview, int proficiencyLevel) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Calendar timeLeftToReview \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        timeLeftToReview.add(Calendar.DATE, daysLeftToReview);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        this.proficiency \u003d new Proficiency(timeLeftToReview, proficiencyLevel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public Flashcard build() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return new Flashcard(frontFace, backFace, imagePath, statistics, proficiency, tags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "robincyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 28,
      "robincyu": 61,
      "sergiovieri": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/FlashcardUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BACK_FACE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FRONT_FACE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditFlashcardDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * A utility class for Flashcard."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public class FlashcardUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns an add command string for adding the {@code flashcard}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static String getAddCommand(Flashcard flashcard) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getFlashcardDetails(flashcard);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns the part of command string for the given {@code flashcard}\u0027s details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static String getFlashcardDetails(Flashcard flashcard) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        sb.append(PREFIX_FRONT_FACE + flashcard.getFrontFace().text + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        sb.append(PREFIX_BACK_FACE + flashcard.getBackFace().text + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        flashcard.getTags().stream().forEach("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns the part of command string for the given {@code EditFlashcardDescriptor}\u0027s details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static String getEditFlashcardDescriptorDetails(EditFlashcardDescriptor descriptor) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        descriptor.getFrontFace().ifPresent(face -\u003e sb.append(PREFIX_FRONT_FACE).append(face.text).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        descriptor.getBackFace().ifPresent(face -\u003e sb.append(PREFIX_BACK_FACE).append(face.text).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 12,
      "sergiovieri": 6,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns the middle index of the flashcard in the {@code model}\u0027s flashcard list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return Index.fromOneBased(model.getFilteredFlashcardList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns the last index of the flashcard in the {@code model}\u0027s flashcard list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return Index.fromOneBased(model.getFilteredFlashcardList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns the flashcard in the {@code model}\u0027s flashcard list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static Flashcard getFlashcard(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return model.getFilteredFlashcardList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalFlashcards.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robincyu"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BACKFACE_GOOD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BACKFACE_HITBAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FRONTFACE_GOOD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FRONTFACE_HITBAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CHINESE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_INDONESIAN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.CardCollection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * A utility class containing a list of {@code Flashcard} objects to be used in tests."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robincyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public class TypicalFlashcards {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final Flashcard HELLO \u003d new FlashcardBuilder().withFrontFace(\"Hello\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            .withBackFace(\"Halo\").withTags(\"indonesian\").withStatistics(9, 10).withProficiency(3, 5).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final Flashcard HOLA \u003d new FlashcardBuilder().withFrontFace(\"Hola\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            .withBackFace(\"Haha\").withTags(\"spanish\").withStatistics(4, 7).withProficiency(1, 1).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final Flashcard EAT \u003d new FlashcardBuilder().withFrontFace(\"Eat\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            .withBackFace(\"吃\").withTags(\"chinese\").withProficiency(0, 0).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final Flashcard NEWTON \u003d new FlashcardBuilder().withFrontFace(\"Newton\u0027s 3rd Law\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            .withBackFace(\"idk\").withTags(\"alevel\", \"physics\").withStatistics(0, 10).withProficiency(0, 1).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final Flashcard EMAIL \u003d new FlashcardBuilder().withFrontFace(\"Robin\u0027s email\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            .withBackFace(\"robincyu96@gmail.com\").withStatistics(100, 100).withProficiency(2, 3).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    // Manually added - Flashcard\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final Flashcard GOOD \u003d new FlashcardBuilder().withFrontFace(VALID_FRONTFACE_GOOD)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            .withBackFace(VALID_BACKFACE_GOOD).withTags(VALID_TAG_INDONESIAN).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final Flashcard HITBAG \u003d new FlashcardBuilder().withFrontFace(VALID_FRONTFACE_HITBAG)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            .withBackFace(VALID_BACKFACE_HITBAG).withTags(VALID_TAG_CHINESE).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final String KEYWORD_MATCHING_GOOD \u003d \"Good\"; // A keyword that matches Good"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static final String KEYWORD_MATCHING_HELLO \u003d \"Hello\"; // A keyword that matches Hello"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private TypicalFlashcards() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns an {@code CardCollection} with all the typical flashcards."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static CardCollection getTypicalCardCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        CardCollection ab \u003d new CardCollection();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        for (Flashcard flashcard : getTypicalFlashcards()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            ab.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static List\u003cFlashcard\u003e getTypicalFlashcards() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(HELLO, HOLA, EAT, NEWTON, EMAIL));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robincyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 5,
      "robincyu": 36,
      "sergiovieri": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static final Index INDEX_FIRST_FLASHCARD \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static final Index INDEX_SECOND_FLASHCARD \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static final Index INDEX_THIRD_FLASHCARD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/FlashcardCardViewTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardViewDisplaysFlashcard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import guitests.guihandles.FlashcardCardViewHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "public class FlashcardCardViewTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Flashcard flashcardWithNoTags \u003d new FlashcardBuilder().withTags().build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        FlashcardCardView flashcardCardView \u003d new FlashcardCardView(flashcardWithNoTags, 0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        uiPartRule.setUiPart(flashcardCardView);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertCardDisplay(flashcardCardView, flashcardWithNoTags);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Flashcard flashcardWithTags \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        flashcardCardView \u003d new FlashcardCardView(flashcardWithTags, 0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        uiPartRule.setUiPart(flashcardCardView);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertCardDisplay(flashcardCardView, flashcardWithTags);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Flashcard flashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        FlashcardCardView flashcardCardView \u003d new FlashcardCardView(flashcard, 0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        // same flashcard -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        FlashcardCardView copy \u003d new FlashcardCardView(flashcard, 0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertTrue(flashcardCardView.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertTrue(flashcardCardView.equals(flashcardCardView));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertFalse(flashcardCardView.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertFalse(flashcardCardView.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        // same flashcard, different tags -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Flashcard flashCardNoTag \u003d new FlashcardBuilder().withTags().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertTrue(flashcardCardView.equals(new FlashcardCardView(flashCardNoTag, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Asserts that {@code flashcardCardView} displays the details of {@code expectedFlashcard} correctly and matches"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private void assertCardDisplay(FlashcardCardView flashcardCardView, Flashcard expectedFlashcard) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        FlashcardCardViewHandle flashcardCardViewHandle \u003d new FlashcardCardViewHandle(flashcardCardView.getRoot());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        // verify flashcard details are displayed correctly"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertCardViewDisplaysFlashcard(expectedFlashcard, flashcardCardViewHandle);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 5,
      "sergiovieri": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/FlashcardListCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListCardDisplaysFlashcard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import guitests.guihandles.FlashcardListCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "public class FlashcardListCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Flashcard flashcardWithNoTags \u003d new FlashcardBuilder().withTags().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        FlashcardListCard flashcardListCard \u003d new FlashcardListCard(flashcardWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        uiPartRule.setUiPart(flashcardListCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertCardDisplay(flashcardListCard, flashcardWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Flashcard flashcardWithTags \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        flashcardListCard \u003d new FlashcardListCard(flashcardWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        uiPartRule.setUiPart(flashcardListCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertCardDisplay(flashcardListCard, flashcardWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Flashcard flashcard \u003d new FlashcardBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        FlashcardListCard flashcardListCard \u003d new FlashcardListCard(flashcard, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        // same flashcard, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        FlashcardListCard copy \u003d new FlashcardListCard(flashcard, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertTrue(flashcardListCard.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertTrue(flashcardListCard.equals(flashcardListCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertFalse(flashcardListCard.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertFalse(flashcardListCard.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        // different flashcard, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Flashcard differentFlashcard \u003d new FlashcardBuilder().withFrontFace(\"differentName\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertFalse(flashcardListCard.equals(new FlashcardListCard(differentFlashcard, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        // same flashcard, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertFalse(flashcardListCard.equals(new FlashcardListCard(flashcard, 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Asserts that {@code flashcardListCard} displays the details of {@code expectedFlashcard} correctly and matches"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private void assertCardDisplay(FlashcardListCard flashcardListCard, Flashcard expectedFlashcard, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        FlashcardListCardHandle flashcardListCardHandle \u003d new FlashcardListCardHandle(flashcardListCard.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertEquals(expectedId + \". \", flashcardListCardHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        // verify flashcard details are displayed correctly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertListCardDisplaysFlashcard(expectedFlashcard, flashcardListCardHandle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sergiovieri": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/FlashcardListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robincyu"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalFlashcards;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListCardDisplaysFlashcard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import guitests.guihandles.FlashcardListCardHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import guitests.guihandles.FlashcardListPanelHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.flashcard.Face;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.model.flashcard.Proficiency;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.model.flashcard.Statistics;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public class FlashcardListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private static final ObservableList\u003cFlashcard\u003e TYPICAL_FLASHCARDS \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            FXCollections.observableList(getTypicalFlashcards());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private final SimpleObjectProperty\u003cFlashcard\u003e selectedFlashcard \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private FlashcardListPanelHandle flashcardListPanelHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        initUi(TYPICAL_FLASHCARDS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_FLASHCARDS.size(); i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            flashcardListPanelHandle.navigateToCard(TYPICAL_FLASHCARDS.get(i));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            Flashcard expectedFlashcard \u003d TYPICAL_FLASHCARDS.get(i);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            FlashcardListCardHandle actualCard \u003d flashcardListPanelHandle.getFlashcardCardHandle(i);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            assertListCardDisplaysFlashcard(expectedFlashcard, actualCard);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            assertEquals((i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void selection_modelSelectedFlashcardChanged_selectionChanges() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        initUi(TYPICAL_FLASHCARDS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Flashcard secondFlashcard \u003d TYPICAL_FLASHCARDS.get(INDEX_SECOND_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        guiRobot.interact(() -\u003e selectedFlashcard.set(secondFlashcard));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        FlashcardListCardHandle expectedFlashcard \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                flashcardListPanelHandle.getFlashcardCardHandle(INDEX_SECOND_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        FlashcardListCardHandle selectedFlashcard \u003d flashcardListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCardEquals(expectedFlashcard, selectedFlashcard);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Verifies that creating and deleting large number of flashcards in {@code FlashcardListPanel} requires lesser than"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        ObservableList\u003cFlashcard\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }, \"Creation and deletion of flashcard cards exceeded time limit\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns a list of flashcards containing {@code flashcardCount} flashcards that is used to populate the"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * {@code FlashcardListPanel}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private ObservableList\u003cFlashcard\u003e createBackingList(int flashcardCount) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        ObservableList\u003cFlashcard\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        for (int i \u003d 0; i \u003c flashcardCount; i++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            Face frontFace \u003d new Face(\"a\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            Face backFace \u003d new Face(\"b\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            Statistics statistics \u003d new Statistics();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            Proficiency proficiency \u003d new Proficiency();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            Flashcard flashcard \u003d new Flashcard(frontFace, backFace, statistics, proficiency, Collections.emptySet());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            backingList.add(flashcard);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Initializes {@code flashcardListPanelHandle} with a {@code FlashcardListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code FlashcardListPanel}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private void initUi(ObservableList\u003cFlashcard\u003e backingList) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        FlashcardListPanel flashcardListPanel \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                new FlashcardListPanel(backingList, selectedFlashcard, selectedFlashcard::set);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        uiPartRule.setUiPart(flashcardListPanel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "robincyu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        flashcardListPanelHandle \u003d new FlashcardListPanelHandle(getChildNode(flashcardListPanel.getRoot(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                FlashcardListPanelHandle.FLASHCARD_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "robincyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 5,
      "robincyu": 90,
      "sergiovieri": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * A GUI unit test class for CardCollection."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 1,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.storage.JsonCardCollectionStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        JsonCardCollectionStorage jsonCardCollectionStorage \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            new JsonCardCollectionStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager(jsonCardCollectionStorage, jsonUserPrefsStorage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new LogicManager(new ModelManager(), storageManager));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            mainWindow.setupListeners();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_allWindowsClosed() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuHelpButton();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            guiRobot.clickOn(\"#closeButton\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * Opens the {@code HelpWindow} by clicking on the menu bar\u0027s help button."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuHelpButton() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            guiRobot.clickOn(\"#helpButton\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 4,
      "sergiovieri": 3,
      "-": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/QuizPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.getTypicalFlashcards;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import guitests.guihandles.QuizPanelHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "public class QuizPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private static final ObservableValue\u003cInteger\u003e INTEGER_ZERO \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        new SimpleObjectProperty\u003c\u003e(0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private static final ObservableValue\u003cInteger\u003e INTEGER_ONE \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        new SimpleObjectProperty\u003c\u003e(1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private static final ObservableValue\u003cBoolean\u003e BOOLEAN_TRUE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            new SimpleObjectProperty\u003c\u003e(true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private static final ObservableValue\u003cBoolean\u003e BOOLEAN_FALSE \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            new SimpleObjectProperty\u003c\u003e(true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        ObservableList\u003cFlashcard\u003e typicalFlashcards \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            FXCollections.observableList(getTypicalFlashcards());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        QuizPanel panel \u003d new QuizPanel(typicalFlashcards, INTEGER_ONE, INTEGER_ZERO, BOOLEAN_FALSE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        uiPartRule.setUiPart(panel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertCorrectDisplay(panel, typicalFlashcards.size() + 1, 1, 0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        guiRobot.interact(() -\u003e typicalFlashcards.remove(0));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertCorrectDisplay(panel, typicalFlashcards.size() + 1, 1, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Checks whether the panel given displays the expected numbers."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * @param panel the QuizPanel to check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * @param size  the expected size of remaining cards"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * @param good  the expected number of good feedback"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * @param bad   the expected number of bad feedback"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    private void assertCorrectDisplay(QuizPanel panel, int size, int good, int bad) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        QuizPanelHandle handle \u003d new QuizPanelHandle(panel.getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertTrue(handle.equals(size, good, bad));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 7,
      "sergiovieri": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.HELLO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.CardCollection;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private final CardCollection cardCollection \u003d new CardCollection();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, cardCollection);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        // after card collection is updated"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        guiRobot.interact(() -\u003e cardCollection.addFlashcard(HELLO));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 4,
      "sergiovieri": 2,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/TestFxmlObject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public TestFxmlObject() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import guitests.guihandles.FlashcardCardViewHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import guitests.guihandles.FlashcardListCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import guitests.guihandles.FlashcardListPanelHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static void assertCardEquals(FlashcardListCardHandle expectedCard, FlashcardListCardHandle actualCard) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertEquals(expectedCard.getFrontFace(), actualCard.getFrontFace());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertEquals(expectedCard.getBackFace(), actualCard.getBackFace());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedCard}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static void assertListCardDisplaysFlashcard(Flashcard expectedCard, FlashcardListCardHandle actualCard) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertEquals(expectedCard.getFrontFace().text, actualCard.getFrontFace());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertEquals(expectedCard.getBackFace().text, actualCard.getBackFace());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertEquals(expectedCard.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            actualCard.getTags());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedFlashcard}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public static void assertCardViewDisplaysFlashcard(Flashcard expectedCard, FlashcardCardViewHandle actualCard) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertEquals(expectedCard.getFrontFace().text, actualCard.getFrontFace());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertEquals(expectedCard.getBackFace().text, actualCard.getBackFace());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Asserts that the list in {@code flashcardListPanelHandle} displays the details of {@code flashcards} correctly"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * and"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static void assertListMatching(FlashcardListPanelHandle flashcardListPanelHandle, Flashcard... flashcards) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        for (int i \u003d 0; i \u003c flashcards.length; i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            flashcardListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            assertListCardDisplaysFlashcard(flashcards[i], flashcardListPanelHandle.getFlashcardCardHandle(i));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Asserts that the list in {@code flashcardListPanelHandle} displays the details of {@code flashcards} correctly"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * and"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static void assertListMatching(FlashcardListPanelHandle flashcardListPanelHandle,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robincyu"
        },
        "content": "                                          List\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertListMatching(flashcardListPanelHandle, flashcards.toArray(new Flashcard[0]));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Asserts the size of the list in {@code flashcardListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static void assertListSize(FlashcardListPanelHandle flashcardListPanelHandle, int size) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        int numberOfPeople \u003d flashcardListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 15,
      "sergiovieri": 18,
      "-": 49
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BACKFACE_DESC_GOOD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BACKFACE_DESC_HITBAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FRONTFACE_DESC_GOOD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FRONTFACE_DESC_HITBAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CHINESE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_INDONESIAN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FRONTFACE_HITBAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.GOOD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.HITBAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.HOLA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.KEYWORD_MATCHING_GOOD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.NEWTON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.testutil.FlashcardUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public class AddCommandSystemTest extends CardCollectionSystemTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: add a flashcard without tags to a non-empty card collection, command with leading spaces and trailing"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robincyu"
        },
        "content": "         * spaces"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Flashcard toAdd \u003d GOOD;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        String command \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            \"   \" + AddCommand.COMMAND_WORD + \"  \" + FRONTFACE_DESC_GOOD + \"  \" + BACKFACE_DESC_GOOD + \" \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                + TAG_DESC_INDONESIAN + \" \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        /* Case: undo adding Good to the list -\u003e Good deleted */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        String expectedResultMessage \u003d String.format(UndoCommand.MESSAGE_SUCCESS, AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        /* Case: redo adding Good to the list -\u003e Good added again */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        model.addFlashcard(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        expectedResultMessage \u003d String.format(RedoCommand.MESSAGE_SUCCESS, AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: add a flashcard with all fields same as another flashcard in the card collection except name -\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        added */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        toAdd \u003d new FlashcardBuilder(GOOD).withFrontFace(VALID_FRONTFACE_HITBAG).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + FRONTFACE_DESC_HITBAG + BACKFACE_DESC_GOOD + TAG_DESC_INDONESIAN;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: add to empty card collection -\u003e added */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        deleteAllFlashcards();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertCommandSuccess(GOOD);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: add a flashcard with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        toAdd \u003d HITBAG;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_CHINESE + BACKFACE_DESC_HITBAG + FRONTFACE_DESC_HITBAG;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: filters the flashcard list before adding -\u003e added */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        showFlashcardsWithName(KEYWORD_MATCHING_GOOD);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertCommandSuccess(HOLA);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* ------------------------ Perform add operation while a flashcard card is selected"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        --------------------------- */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: selects first card in the flashcard list, add a flashcard -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        selectFlashcard(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertCommandSuccess(NEWTON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: add a duplicate flashcard -\u003e rejected */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        command \u003d FlashcardUtil.getAddCommand(GOOD);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * 4. {@code Storage} and {@code FlashcardListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * {@code CardCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @see CardCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private void assertCommandSuccess(Flashcard toAdd) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCommandSuccess(FlashcardUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Flashcard)}. Executes {@code command}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Flashcard)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private void assertCommandSuccess(String command, Flashcard toAdd) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        expectedModel.addFlashcard(toAdd);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Flashcard)} except asserts that"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * 2. {@code Storage} and {@code FlashcardListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Flashcard)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * 4. {@code Storage} and {@code FlashcardListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * {@code CardCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @see CardCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 2,
      "robincyu": 38,
      "sergiovieri": 27,
      "-": 96
    }
  },
  {
    "path": "src/test/java/systemtests/CardCollectionSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FRONT_FACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import guitests.guihandles.CardViewHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import guitests.guihandles.FlashcardListPanelHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import guitests.guihandles.ToolbarHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.CardCollection;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.testutil.TypicalFlashcards;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robincyu"
        },
        "content": " * A system test class for CardCollection, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public abstract class CardCollectionSystemTest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    protected CardCollection getInitialData() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return TypicalFlashcards.getTypicalCardCollection();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public FlashcardListPanelHandle getFlashcardListPanel() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return mainWindowHandle.getFlashcardListPanel();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public ToolbarHandle getToolbar() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return mainWindowHandle.getToolbar();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public CardViewHandle getCardViewPanel() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return mainWindowHandle.getCardViewPanel();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    protected void showAllFlashcards() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertEquals(getModel().getCardCollection().getFlashcardList().size(),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            getModel().getFilteredFlashcardList().size());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    protected void showFlashcardsWithName(String keyword) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + PREFIX_FRONT_FACE + keyword);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertTrue(getModel().getFilteredFlashcardList().size() \u003c getModel().getCardCollection()"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            .getFlashcardList().size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    protected void selectFlashcard(Index index) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertEquals(index.getZeroBased(), getFlashcardListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    protected void deleteAllFlashcards() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertEquals(0, getModel().getCardCollection().getFlashcardList().size());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                                                     Model expectedModel) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertEquals(new CardCollection(expectedModel.getCardCollection()), testApp.readStorageCardCollection());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertListMatching(getFlashcardListPanel(), expectedModel.getFilteredFlashcardList());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Calls {@code FlashcardListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        getFlashcardListPanel().rememberSelectedFlashcardCard();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Asserts that the previously selected card is now deselected."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertFalse(getFlashcardListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @see FlashcardListPanelHandle#isSelectedFlashcardCardChanged()"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        getFlashcardListPanel().navigateToCard(getFlashcardListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getFlashcardListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "     * Asserts that the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @see FlashcardListPanelHandle#isSelectedFlashcardCardChanged()"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertFalse(getFlashcardListPanel().isSelectedFlashcardCardChanged());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertListMatching(getFlashcardListPanel(), getModel().getFilteredFlashcardList());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    Integer getModelQuizMode() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return testApp.getModelQuizMode();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    Boolean getModelIsQuizSrs() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        return testApp.getModelIsQuizSrs();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    int getModelQuizFlashcardSize() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        return testApp.getModelQuizFlashcardSize();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 4,
      "lucatriglia": 2,
      "robincyu": 31,
      "sergiovieri": 17,
      "-": 228
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.KEYWORD_MATCHING_GOOD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public class ClearCommandSystemTest extends CardCollectionSystemTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: clear non-empty card collection, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: undo clearing card collection -\u003e original card collection restored */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        String expectedResultMessage \u003d String.format(UndoCommand.MESSAGE_SUCCESS, ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandSuccess(\"ClEaR\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        /* Case: undo clearing card collection -\u003e original card collection restored */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        expectedResultMessage \u003d String.format(UndoCommand.MESSAGE_SUCCESS, ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: redo clearing card collection -\u003e cleared */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        expectedResultMessage \u003d String.format(RedoCommand.MESSAGE_SUCCESS, ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: selects first card in flashcard list and clears card collection -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original card collection"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        selectFlashcard(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: filters the flashcard list before clearing -\u003e entire card collection cleared */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original card collection"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        showFlashcardsWithName(KEYWORD_MATCHING_GOOD);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: clear empty card collection -\u003e cleared */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * {@code CardCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @see CardCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * {@code CardCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @see CardCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 12,
      "robincyu": 17,
      "sergiovieri": 2,
      "-": 80
    }
  },
  {
    "path": "src/test/java/systemtests/ClockRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * This rule makes the time stamp in the status bar predictable during a test."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Before the test starts, the rule replaces the clock in the status bar with a fixed clock."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * At the end of the test, the rule restores the original clock."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robincyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Clock#fixed(Instant, ZoneId)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClockRule implements TestRule {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Clock injectedClock;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Clock getInjectedClock() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return injectedClock;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the clock in the status bar with a fixed clock having the current time as its instance."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setInjectedClockToCurrentTime() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BACKFACE_DESC_GOOD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FRONTFACE_DESC_GOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_FLASHCARD_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.testutil.TestUtil.getFlashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.KEYWORD_MATCHING_GOOD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public class DeleteCommandSystemTest extends CardCollectionSystemTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        /* Case: delete the first flashcard in the list, command with leading spaces and trailing spaces and mixed case"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lungsin"
        },
        "content": "         * -\u003e deleted */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        String command \u003d \"     \" + \"DeLetE\" + \"      \" + INDEX_FIRST_FLASHCARD.getOneBased() + \"   \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            + \"    \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Flashcard deletedFlashcard \u003d removeFlashcard(expectedModel, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_FLASHCARD_SUCCESS, deletedFlashcard);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: delete the last flashcard in the list -\u003e deleted */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Index lastFlashcardIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCommandSuccess(lastFlashcardIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: undo deleting the last flashcard in the list -\u003e last flashcard restored */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        expectedResultMessage \u003d String.format(UndoCommand.MESSAGE_SUCCESS, DeleteCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: redo deleting the last flashcard in the list -\u003e last flashcard deleted again */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        removeFlashcard(modelBeforeDeletingLast, lastFlashcardIndex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        expectedResultMessage \u003d String.format(RedoCommand.MESSAGE_SUCCESS, DeleteCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: delete the middle flashcard in the list -\u003e deleted */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Index middleFlashcardIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCommandSuccess(middleFlashcardIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: filtered flashcard list, delete index within bounds of card collection and flashcard list -\u003e deleted */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        executeCommand(AddCommand.COMMAND_WORD + FRONTFACE_DESC_GOOD + BACKFACE_DESC_GOOD);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        showFlashcardsWithName(KEYWORD_MATCHING_GOOD);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Index index \u003d INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredFlashcardList().size());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: filtered flashcard list, delete index within bounds of card collection but out of bounds of"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        flashcard list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        showFlashcardsWithName(KEYWORD_MATCHING_GOOD);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        int invalidIndex \u003d getModel().getCardCollection().getFlashcardList().size();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* --------------------- Performing delete operation while a flashcard card is selected"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        ------------------------ */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: delete the selected flashcard -\u003e flashcard list panel selects the flashcard before the deleted"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        flashcard */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        showAllFlashcards();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        selectFlashcard(selectedIndex);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        deletedFlashcard \u003d removeFlashcard(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_FLASHCARD_SUCCESS, deletedFlashcard);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            getModel().getCardCollection().getFlashcardList().size() + 1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Removes the {@code Flashcard} at the specified {@code index} in {@code model}\u0027s card collection."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @return the removed flashcard"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private Flashcard removeFlashcard(Model model, Index index) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Flashcard targetFlashcard \u003d getFlashcard(model, index);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        model.deleteFlashcard(targetFlashcard);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return targetFlashcard;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Deletes the flashcard at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Flashcard deletedFlashcard \u003d removeFlashcard(expectedModel, toDelete);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_FLASHCARD_SUCCESS, deletedFlashcard);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * {@code CardCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @see CardCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @see CardCollectionSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * {@code CardCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @see CardCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 6,
      "robincyu": 54,
      "sergiovieri": 7,
      "-": 138
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BACKFACE_DESC_GOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BACKFACE_DESC_HITBAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FRONTFACE_DESC_GOOD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FRONTFACE_DESC_HITBAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_BACKFACE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_FRONTFACE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CHINESE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_INDONESIAN;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BACKFACE_HITBAG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FRONTFACE_HITBAG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_CHINESE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.GOOD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.KEYWORD_MATCHING_GOOD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.model.flashcard.Face;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.testutil.FlashcardBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.testutil.FlashcardUtil;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public class EditCommandSystemTest extends CardCollectionSystemTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Index index \u003d INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        String command \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + FRONTFACE_DESC_GOOD + \"  \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "                + BACKFACE_DESC_GOOD + \" \" + TAG_DESC_CHINESE + \" \";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        Flashcard editedFlashcard \u003d new FlashcardBuilder(GOOD).withTags(VALID_TAG_CHINESE).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCommandSuccess(command, index, editedFlashcard);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: undo editing the last flashcard in the list -\u003e last flashcard restored */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        String expectedResultMessage \u003d String.format(UndoCommand.MESSAGE_SUCCESS, EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: redo editing the last flashcard in the list -\u003e last flashcard edited again */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        expectedResultMessage \u003d String.format(RedoCommand.MESSAGE_SUCCESS, EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        model.setFlashcard(getModel().getFilteredFlashcardList().get(INDEX_FIRST_FLASHCARD.getZeroBased()),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            editedFlashcard);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: edit a flashcard with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + FRONTFACE_DESC_GOOD + BACKFACE_DESC_GOOD"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            + TAG_DESC_INDONESIAN;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertCommandSuccess(command, index, GOOD);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: edit a flashcard with new values same as another flashcard\u0027s values but with different name -\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        edited */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertTrue(getModel().getCardCollection().getFlashcardList().contains(GOOD));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        index \u003d INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertNotEquals(getModel().getFilteredFlashcardList().get(index.getZeroBased()), GOOD);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + FRONTFACE_DESC_HITBAG + BACKFACE_DESC_GOOD"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            + TAG_DESC_INDONESIAN;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        editedFlashcard \u003d new FlashcardBuilder(GOOD).withFrontFace(VALID_FRONTFACE_HITBAG).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCommandSuccess(command, index, editedFlashcard);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        index \u003d INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Flashcard flashcardToEdit \u003d getModel().getFilteredFlashcardList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        editedFlashcard \u003d new FlashcardBuilder(flashcardToEdit).withTags().build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCommandSuccess(command, index, editedFlashcard);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: filtered flashcard list, edit index within bounds of card collection and flashcard list -\u003e edited */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        for (Flashcard i : getModel().getCardCollection().getFlashcardList()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            System.out.println(i);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        showFlashcardsWithName(KEYWORD_MATCHING_GOOD);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        index \u003d INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredFlashcardList().size());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + BACKFACE_DESC_HITBAG;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        flashcardToEdit \u003d getModel().getFilteredFlashcardList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        editedFlashcard \u003d new FlashcardBuilder(flashcardToEdit).withBackFace(VALID_BACKFACE_HITBAG).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCommandSuccess(command, index, editedFlashcard);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: filtered flashcard list, edit index within bounds of card collection but out of bounds of flashcard"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "         * list -\u003e rejected"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        showFlashcardsWithName(KEYWORD_MATCHING_GOOD);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        int invalidIndex \u003d getModel().getCardCollection().getFlashcardList().size();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + FRONTFACE_DESC_GOOD,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        /* --------------------- Performing edit operation while a flashcard card is selected ----------------------- */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        /* Case: selects first card in the flashcard list, edit a flashcard -\u003e edited, card selection remains unchanged"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        showAllFlashcards();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        index \u003d INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        selectFlashcard(index);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + FRONTFACE_DESC_GOOD + BACKFACE_DESC_GOOD"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            + TAG_DESC_INDONESIAN;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertCommandSuccess(command, index, GOOD, index);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + FRONTFACE_DESC_GOOD,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + FRONTFACE_DESC_GOOD,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredFlashcardList().size() + 1;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + FRONTFACE_DESC_GOOD,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + FRONTFACE_DESC_GOOD,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FLASHCARD.getOneBased(),"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        /* Case: invalid frontFace -\u003e rejected */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FLASHCARD.getOneBased() + INVALID_FRONTFACE_DESC,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            Face.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        /* Case: invalid backFace -\u003e rejected */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertCommandFailure("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FLASHCARD.getOneBased() + INVALID_BACKFACE_DESC,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            Face.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FLASHCARD.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: edit a flashcard with new values same as another flashcard\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        executeCommand(FlashcardUtil.getAddCommand(GOOD));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertTrue(getModel().getCardCollection().getFlashcardList().contains(GOOD));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        index \u003d INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertFalse(getModel().getFilteredFlashcardList().get(index.getZeroBased() + 1).equals(GOOD));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + (index.getOneBased() + 1) + FRONTFACE_DESC_GOOD + BACKFACE_DESC_GOOD;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Flashcard, Index)} except that"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Flashcard, Index)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedFlashcard, null);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the flashcard at index {@code toEdit} being"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * updated to values specified {@code editedFlashcard}.\u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Flashcard editedFlashcard,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        expectedModel.setFlashcard(expectedModel.getFilteredFlashcardList().get(toEdit.getZeroBased()),"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            editedFlashcard);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        expectedModel.updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            String.format(EditCommand.MESSAGE_EDIT_FLASHCARD_SUCCESS, editedFlashcard), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * {@code CardCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @see CardCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @see CardCollectionSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        expectedModel.updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * {@code CardCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @see CardCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 2,
      "robincyu": 62,
      "sergiovieri": 56,
      "-": 140
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_FLASHCARDS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FRONT_FACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.EAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.GOOD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.HELLO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.KEYWORD_MATCHING_GOOD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.NEWTON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public class FindCommandSystemTest extends CardCollectionSystemTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: find multiple flashcards in card collection, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robincyu"
        },
        "content": "         * -\u003e 2 flashcards found"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + PREFIX_FRONT_FACE + KEYWORD_MATCHING_GOOD + \"   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, GOOD);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: repeat previous find command where flashcard list is displaying the flashcards we are finding"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robincyu"
        },
        "content": "         * -\u003e 2 flashcards found"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_FRONT_FACE + KEYWORD_MATCHING_GOOD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: find flashcard where flashcard list is not displaying the flashcard we are finding -\u003e 1 flashcard"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        found */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_FRONT_FACE + \" Eat\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, EAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: find multiple flashcards in card collection, 2 keywords -\u003e 2 flashcards found */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_FRONT_FACE + \"Eat Newton\u0027s\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, EAT, NEWTON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: find multiple flashcards in card collection, 2 keywords in reversed order -\u003e 2 flashcards found */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_FRONT_FACE + \"Newton\u0027s Eat\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: find multiple flashcards in card collection, 2 keywords with 1 repeat -\u003e 2 flashcards found */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_FRONT_FACE + \"Newton\u0027s Eat Newton\u0027s\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: find multiple flashcards in card collection, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robincyu"
        },
        "content": "         * -\u003e 2 flashcards found"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_FRONT_FACE + \"Newton\u0027s Eat Cow\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: find same flashcards in card collection after deleting 1 of them -\u003e 1 flashcard found */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + PREFIX_FRONT_FACE + \" Newton\u0027s\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertFalse(getModel().getCardCollection().getFlashcardList().contains(NEWTON));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_FRONT_FACE + KEYWORD_MATCHING_GOOD;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, GOOD);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: find flashcard in card collection, keyword is same as name but of different case -\u003e 1 flashcard"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        found */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_FRONT_FACE + \" GoOd\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        /* Case: find flashcard in card collection, keyword is substring of name -\u003e 1 flashcards found */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_FRONT_FACE + \" Hell\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, HELLO);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: find flashcard in card collection, name is substring of keyword -\u003e 0 flashcards found */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_FRONT_FACE + \" Hellow\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: find flashcard not in card collection -\u003e 0 flashcards found */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_FRONT_FACE + \" LUL\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: find while a flashcard is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        showAllFlashcards();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        selectFlashcard(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertFalse(getFlashcardListPanel().getHandleToSelectedCard().getFrontFace().equals(GOOD.getFrontFace().text));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_FRONT_FACE + \" Good\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, GOOD);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: find flashcard in empty card collection -\u003e 0 flashcards found */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        deleteAllFlashcards();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lucatriglia"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_FRONT_FACE + KEYWORD_MATCHING_GOOD;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, GOOD);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        command \u003d \"FiNd Hello\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * box displays {@code Messages#MESSAGE_FLASHCARDS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * {@code CardCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @see CardCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            MESSAGE_FLASHCARDS_LISTED_OVERVIEW, expectedModel.getFilteredFlashcardList().size());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * {@code CardCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @see CardCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 5,
      "lucatriglia": 16,
      "robincyu": 31,
      "sergiovieri": 13,
      "-": 112
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public class HelpCommandSystemTest extends CardCollectionSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        getToolbar().openHelpWindow();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FLASHCARD.getOneBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertListMatching(getFlashcardListPanel(), getModel().getFilteredFlashcardList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FLASHCARD.getOneBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        getToolbar().openHelpWindow();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        getToolbar().openHelpWindow();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 5,
      "sergiovieri": 3,
      "-": 71
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private static final Predicate\u003cFlashcard\u003e PREDICATE_MATCHING_NO_FLASHCARDS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cFlashcard\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Optional\u003cPredicate\u003cFlashcard\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        model.updateFilteredFlashcardList(predicate.orElse(PREDICATE_MATCHING_NO_FLASHCARDS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public static void setFilteredList(Model model, Flashcard... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Flashcard} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    private static Predicate\u003cFlashcard\u003e getPredicateMatching(Flashcard other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        return flashcard -\u003e flashcard.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 9,
      "-": 30
    }
  },
  {
    "path": "src/test/java/systemtests/QuizCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import seedu.address.commons.core.QuizState;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "public class QuizCommandSystemTest extends CardCollectionSystemTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    public void quiz() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        executeCommand(\"quiz\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertEquals(QuizState.QUIZ_MODE_FRONT, (int) getModelQuizMode());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertEquals(false, getModelIsQuizSrs());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        executeCommand(\"show\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertEquals(QuizState.QUIZ_MODE_BOTH, (int) getModelQuizMode());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        int size \u003d getModelQuizFlashcardSize();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        executeCommand(\"good\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertEquals(size - 1, getModelQuizFlashcardSize());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        executeCommand(\"exit\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        assertEquals(QuizState.NOT_QUIZ_MODE, (int) getModelQuizMode());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public void quizReview() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        executeCommand(\"quiz review\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertEquals(QuizState.QUIZ_MODE_FRONT, (int) getModelQuizMode());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertEquals(false, getModelIsQuizSrs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        executeCommand(\"show\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertEquals(QuizState.QUIZ_MODE_BOTH, (int) getModelQuizMode());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        int size \u003d getModelQuizFlashcardSize();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        executeCommand(\"good\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertEquals(size - 1, getModelQuizFlashcardSize());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        executeCommand(\"exit\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertEquals(QuizState.NOT_QUIZ_MODE, (int) getModelQuizMode());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public void quizSrs() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        executeCommand(\"quiz srs\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertEquals(QuizState.QUIZ_MODE_FRONT, (int) getModelQuizMode());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertEquals(true, getModelIsQuizSrs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        executeCommand(\"show\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertEquals(QuizState.QUIZ_MODE_BOTH, (int) getModelQuizMode());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        int size \u003d getModelQuizFlashcardSize();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        executeCommand(\"good\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertEquals(size - 1, getModelQuizFlashcardSize());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        executeCommand(\"exit\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertEquals(QuizState.NOT_QUIZ_MODE, (int) getModelQuizMode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        executeCommand(\"quiz srs\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertEquals(size - 1, getModelQuizFlashcardSize());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 31,
      "sergiovieri": 22
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.CardCollection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public class SampleDataTest extends CardCollectionSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    protected CardCollection getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public void cardCollection_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Flashcard[] expectedList \u003d SampleDataUtil.getSampleFlashcards();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertListMatching(getFlashcardListPanel(), expectedList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 7,
      "-": 44
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_FLASHCARD_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.KEYWORD_MATCHING_HELLO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robincyu"
        },
        "content": "public class SelectCommandSystemTest extends CardCollectionSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: select the first card in the flashcard list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FLASHCARD.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: select the last card in the flashcard list -\u003e selected */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        Index flashcardCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + flashcardCount.getOneBased();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCommandSuccess(command, flashcardCount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: select the middle card in the flashcard list -\u003e selected */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        /* Case: mixed case command word -\u003e selected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        command \u003d \"SelEcT\" + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: filtered flashcard list, select index within bounds of card collection but out of bounds of"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        flashcard list"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "        showFlashcardsWithName(KEYWORD_MATCHING_HELLO);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        int invalidIndex \u003d getModel().getCardCollection().getFlashcardList().size();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: filtered flashcard list, select index within bounds of card collection and flashcard list -\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        selected */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredFlashcardList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredFlashcardList().size() + 1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        /* Case: select from empty card collection -\u003e rejected */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        deleteAllFlashcards();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FLASHCARD.getOneBased(),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected flashcard.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * 4. {@code Storage} and {@code FlashcardListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * {@code CardCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @see CardCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @see CardCollectionSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Flashcard flashcard \u003d expectedModel.getFilteredFlashcardList().get(expectedSelectedCardIndex.getZeroBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "            MESSAGE_SELECT_FLASHCARD_SUCCESS, expectedSelectedCardIndex.getOneBased(),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lungsin"
        },
        "content": "            flashcard.getSuccessRate(), flashcard.getQuizSrsStatus());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "robincyu"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getFlashcardListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * 4. {@code Storage} and {@code FlashcardListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * {@code CardCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "robincyu"
        },
        "content": "     * @see CardCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 7,
      "robincyu": 38,
      "sergiovieri": 3,
      "-": 115
    }
  },
  {
    "path": "src/test/java/systemtests/StatsCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lungsin"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FRONT_FACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.EAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.GOOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.HELLO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.KEYWORD_MATCHING_GOOD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import static seedu.address.testutil.TypicalFlashcards.NEWTON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lungsin"
        },
        "content": "import seedu.address.model.flashcard.Statistics;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lungsin"
        },
        "content": "public class StatsCommandSystemTest extends CardCollectionSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    public void stats() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        /* Case: find statistics of multiple flashcards in card collection, command with leading spaces and"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lungsin"
        },
        "content": "         * trailing spaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lungsin"
        },
        "content": "         */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        String command \u003d \"   \" + StatsCommand.COMMAND_WORD + \" \" + PREFIX_FRONT_FACE + KEYWORD_MATCHING_GOOD + \"   \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, GOOD);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        /* Case: repeat previous stats command where flashcard list is displaying the flashcards we are finding */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        command \u003d StatsCommand.COMMAND_WORD + \" \" + PREFIX_FRONT_FACE + KEYWORD_MATCHING_GOOD;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        /* Case: find statistics of flashcard where flashcard list is not displaying the flashcard we are finding */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        command \u003d StatsCommand.COMMAND_WORD + \" \" + PREFIX_FRONT_FACE + \" Eat\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, EAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        /* Case: find statistics of multiple flashcards in card collection, 2 keywords */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        command \u003d StatsCommand.COMMAND_WORD + \" \" + PREFIX_FRONT_FACE + \"Eat Newton\u0027s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, EAT, NEWTON);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        /* Case: find statistics of multiple flashcards in card collection, 2 keywords in reversed order */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        command \u003d StatsCommand.COMMAND_WORD + \" \" + PREFIX_FRONT_FACE + \"Newton\u0027s Eat\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        /* Case: find statistics of multiple flashcards in card collection, 2 keywords with 1 repeat */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        command \u003d StatsCommand.COMMAND_WORD + \" \" + PREFIX_FRONT_FACE + \"Newton\u0027s Eat Newton\u0027s\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        /* Case: find statistics of multiple flashcards in card collection, 2 matching keywords and"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lungsin"
        },
        "content": "         * 1 non-matching keyword"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lungsin"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        command \u003d StatsCommand.COMMAND_WORD + \" \" + PREFIX_FRONT_FACE + \"Newton\u0027s Eat Cow\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        /* Case: undo previous stats command -\u003e rejected */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        /* Case: redo previous stats command -\u003e rejected */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        /* Case: find statistics of same flashcards in card collection after deleting 1 of them */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        executeCommand(StatsCommand.COMMAND_WORD + \" \" + PREFIX_FRONT_FACE + \" Newton\u0027s\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertFalse(getModel().getCardCollection().getFlashcardList().contains(NEWTON));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        command \u003d StatsCommand.COMMAND_WORD + \" \" + PREFIX_FRONT_FACE + KEYWORD_MATCHING_GOOD;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, GOOD);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        /* Case: find statistics of flashcard in card collection, keyword is same as name but of different case */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        command \u003d StatsCommand.COMMAND_WORD + \" \" + PREFIX_FRONT_FACE + \" GoOd\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        /* Case: find statistics of flashcard in card collection, keyword is substring of name */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        command \u003d StatsCommand.COMMAND_WORD + \" \" + PREFIX_FRONT_FACE + \" Hell\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, HELLO);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        /* Case: find statistics of flashcard in card collection, name is substring of keyword */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        command \u003d StatsCommand.COMMAND_WORD + \" \" + PREFIX_FRONT_FACE + \" Hellow\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        /* Case: find statistics of flashcard not in card collection */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        command \u003d StatsCommand.COMMAND_WORD + \" \" + PREFIX_FRONT_FACE + \" LUL\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        /* Case: find statistics of while a flashcard is selected */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        showAllFlashcards();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        selectFlashcard(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertFalse(getFlashcardListPanel().getHandleToSelectedCard().getFrontFace().equals(GOOD.getFrontFace().text));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        command \u003d StatsCommand.COMMAND_WORD + \" \" + PREFIX_FRONT_FACE + \" Good\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, GOOD);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        /* Case: find statistics of flashcard in empty card collection */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        deleteAllFlashcards();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        command \u003d StatsCommand.COMMAND_WORD + \" \" + PREFIX_FRONT_FACE + KEYWORD_MATCHING_GOOD;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, GOOD);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        command \u003d \"StaTs Hello\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * box displays {@code Messages#MESSAGE_FLASHCARDS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * {@code CardCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * @see CardCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                StatsCommand.MESSAGE_STATISTICS_FORMAT,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                expectedModel.getFilteredFlashcardList()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                        .map(Flashcard::getStatistics)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                        .reduce(Statistics::merge)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                        .map(s -\u003e s.getSuccessRate() * 100)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lungsin"
        },
        "content": "                        .orElse(0.0)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        );"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * {@code CardCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     * @see CardCollectionSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lungsin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lungsin"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lungsin"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lungsin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lungsin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lungsin": 181
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robincyu"
        },
        "content": "import seedu.address.model.ReadOnlyCardCollection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robincyu"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyCardCollection\u003e cardCollection, Path saveFileLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robincyu"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(cardCollection, saveFileLocation));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robincyu": 3,
      "-": 71
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sergiovieri"
        },
        "content": "\u003c?import seedu.address.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"seedu.address.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "sergiovieri": 1,
      "-": 6
    }
  }
]
