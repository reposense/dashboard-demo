[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003d SSENISUB"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S1-T13-2/main[image:https://travis-ci.org/CS2103-AY1819S1-T13-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://ci.appveyor.com/project/DanKhoo/main/branch/master[image:https://ci.appveyor.com/api/projects/status/pw5iprwm6q97wbo0/branch/master?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S1-T13-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S1-T13-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://www.codacy.com/app/DanKhoo/main?utm_source\u003dgithub.com\u0026amp;utm_medium\u003dreferral\u0026amp;utm_content\u003dCS2103-AY1819S1-T13-2/main\u0026amp;utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/f88a4818748d488192c6ab654eb1caba[Codacy Badge]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "* SSENISUB is a desktop application to assist the HR department of a company to manage its staff. On top of just assisting HR, this application also allows the staff themselves to view their workplace performance and improve themselves."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "* It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "* SSENISUB also doubles as a contacts manager to allow staff to easily find the contact information of their superior or colleagues."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "* Features of SSENISUB:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "** Allows a staff to view contact information of their superiors and coworkers."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "** Allow managers to rate and feedback on their staff\u0027s performance."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "** Allows a HR staff to upload/edit contact information."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* Original source code was adopted from https://github.com/se-edu/ (addressbook-level4)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 8,
      "DanKhoo": 5,
      "-": 26
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "      \"githubId\": \"DanKhoo\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "      \"displayName\": \"Daniel Khoo\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "      \"authorNames\": [\"DanKhoo\", \"Daniel Khoo\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "      \"githubId\": \"IamRENCE\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "      \"displayName\": \"Terence Goh\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "      \"authorNames\": [\"Terence Goh\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "      \"githubId\": \"valensia0711\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "      \"displayName\": \"Valensia Sebastiani\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "      \"authorNames\": [\"Valensia Sebastiani\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "      \"githubId\": \"NgeowXiuQi\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "      \"displayName\": \"Ngeow Xiu Qi\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "      \"authorNames\": [\"NgeowXiuQi\", \"Xiu Qi\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "      \"githubId\": \"abtyx\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "      \"displayName\": \"Ashburn Tan\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "      \"authorNames\": [\"abtyx\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanKhoo": 30
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    archiveName \u003d \u0027SSENISUB.jar\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u0027site-name\u0027: \u0027SSENISUB\u0027,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S1-T13-2/main\u0027,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 3,
      "-": 244
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "SSENISUB was developed by Team https://github.com/CS2103-AY1819S1-T13-2[T13-2] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003d\u003d\u003d Khoo Jin Zheng Daniel"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "image::dankhoo.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "{empty}[https://github.com/DanKhoo[github]] [\u003c\u003cdankhoo#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "Role: Developer"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003d\u003d\u003d Valensia Sebastiani"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "image::valensia0711.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "{empty}[https://github.com/valensia0711[github]] [\u003c\u003cvalensia0711#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003d\u003d\u003d Goh Yang Yu, Terence"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "image::iamrence.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "{empty}[https://github.com/IamRENCE[github]] [\u003c\u003ciamrence#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003d\u003d\u003d Ngeow Xiu Qi"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "image::ngeowxiuqi.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "{empty}[https://github.com/NgeowXiuQi[github]] [\u003c\u003cngeowxiuqi#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003d\u003d\u003d Tan Yuxuan"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "image::abtyx.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "{empty}[https://github.com/abtyx[github]] [\u003c\u003cabtyx#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 3,
      "IamRENCE": 1,
      "DanKhoo": 15,
      "-": 32
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103-AY1819S1-T13-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* *Email us* : You can also reach us at `e0254012 [at] comp.nus.edu.sg`"
      }
    ],
    "authorContributionMap": {
      "DanKhoo": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "\u003d SSENISUB - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-T13-2/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "By: `Team T13-2`      Since: `Oct 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "Note how the `Model` simply raises a `SsenisubChangedEvent` when SSENISUB data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "`StatusBarFooter`, `StaffPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ".  `Logic` uses the `SsenisubParser` class to parse the user command."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a staff) and/or raise events."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "* stores SSENISUB data."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `SSENISUB`, which `Person` can reference. This would allow `SSENISUB` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "* can save SSENISUB data in xml format and read it back."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// tag::addcommand[]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Add Feature"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "The `add` command allows HR users to add staff into SSENISSUB. It will ensure that there will be no duplicate with"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "any existing staff."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "The following sequence diagram shows the sequence flow from the `LogicManager` to the `ModelManager` when a HR user"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "enter a `add` command:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "image::AddSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Figure 3.4.1.1 Sequence Diagram for `add` command"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "From the sequence diagram:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "1. When `Logic Manager` receives the `execute` command from the app, it calls the parseCommand method in"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "`SsenisubParser`."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "2. `SsenisubParser` will receive add as the command and instantiate `AddCommandParser` to parse the rest of the"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "command."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "3. If the arguments specified are valid, a `AddCommand` would be created and returned by to the `LogicManager`."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "4. `LogicManager` would proceed to call `execute` of the `AddCommand`."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "5. A new staff would be added and a successful `CommandResult` would be returned and displayed."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "SSENISSUB\u0027s staff is stored with name, phone, email address, home address, department, manager name and can"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "be search and listed only with names."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "All fields are checked against respective validations with each model. If the provided command either does not have"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "any field, or field with invalid input, a `ParseException` would be thrown."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation of `AddCommandParser`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* ** Alternative 1 (current choice):** `add` is parsed first, then the rest of the arguments as `AddCommandParser`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Pros: Better modularization for commands"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Cons: More classes will be needed \u003d more code to be written"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* ** Alternative 2:** `add` is parsed straight from `SsenisubParser`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Pros: Reduces the number of classes needed \u003d less code to be written"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Cons: Poor modularization for commands"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// end::addcommand[]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// tag::salaryfunction[]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Salary, OT Hours, OT Rate and Pay Deductibles For Staff"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "\u003d\u003d\u003d\u003d Introduction"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "We have introduced four new fields to a staff namely the salary, overtime(OT) hours, OT rate and Pay deductibles"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "for a staff. This is to allow the HR department of the company to keep track of individual staff\u0027s details."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "The current implementation of this feature is embedded into a Person object together with the other information"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "that was originally in the Person object. Prefixes for the respective fields were also created to allow the HR user"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "to edit the necessary information whenever needed."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "A newly added staff into SSENISUB would be assigned the default values of 0 for all four fields. This is to better"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "allow the HR staff to manage the information of the staff. Naturally, when a person first joins the company, he would"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "not have raked up any OT hours and the rate is dependent on the job of the individual."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Should the user now want to edit a staff\u0027s salary, OT hours, OT rate or pay deductibles, the user can now simply"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "input the prefixes followed by the numerals of each field to edit in the edit command. The fields would then be"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "edited depending if the prefixes were there or not (similar to the edit command)."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* ** Alternative 1 (First Implementation):** Merging the OT hours, OT rate and pay deductibles within a Salary class"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Pros: Easier to calculate net pay"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Cons: Harder to implement and would result in many conflicts within the software itself. Harder to debug"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "image::FirstImplementation.png[height\u003d\"450\"]"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Figure 3.9.3.1 Idea of First Implementation"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* **Alternative 2 (Current Implementation):** Separating out each field to their own classes"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Pros: Easier to implement and allows for more flexibility if the fields are required to be computed/used for other"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " information, easier to identify issues when something goes wrong"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Cons: Does not seem intuitive to separate it out since OT hours, OT rate and pay deductibles are used to compute salary"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "image::SecondImplementation.png[height\u003d\"450\"]"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Figure 3.9.3.2 Idea of Second Implementation"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// end::salaryfunction[]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "// tag::feedbackcommand[]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "\u003d\u003d\u003d Feedback command feature"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "\u003d\u003d\u003d\u003d Introduction"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "Similar to the rate command, we have implemented a feedback command feature as an enhancement, which also focuses on the"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "`Logic` component. A `Feedback` class is implemented to support this, which the `Person` class is dependent on. This"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "command allows users, especially for managers, to give feedback to their employees within an organisation for them to"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "know what to look out for in their performance and improve themselves."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "This command also differs from the add and edit command, because users cannot simply add an employee with a feedback"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "through the add command or edit an employee\u0027s feedback through the edit command. Every employee added will start off"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "without any feedback assigned to him/her."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "[CAUTION]"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "Any updates to an employee\u0027s feedback should only"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "be done by a *person of authority*, i.e. `Manager`."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "The feedback command, like the rate command, executes nonparallel to the add and edit command. Upon adding an employee,"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "a `FEEDBACK.DEFAULT_INITIAL_FEEDBACK` with a default value of \"-NO FEEDBACK YET-\", is initialised on the `Person` and"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "then saved."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "Given below is a sequence diagram shows how the feedback operation works:"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "image::FeedbackSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "A simple profanity is implemented in the `Feedback` class, which checks for any profanity found within the feedback"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "input (Adapted from https://gist.github.com/PimDeWitte/c04cc17bc5fa9d7e3aee6670d4105941[Simple Profanity Filter])."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "The list of English and Singlish profanities (https://github.com/CS2103-AY1819S1-T13-2/main/blob/master/src/main/resources/words%20to%20ban/Bad_Words_List.txt[Profanity List])"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "used can be subjected to expansion and modification. The filter works by iterating through the whole input to find any possible"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "sequence of words (no re-ordering) that match any profanity found within the profanity list. As such, runtime will be"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "dependent on input length rather than profanity list length."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "Given below is a sequence diagram to show how the profanity filter operation works (This extends from the previous diagram,"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "which omitted the part where `Feedback` is called by `FeedbackCommandParser`):"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "image::FeedbackProfanitySequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "[[Feedback-Features]]"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "\u003d\u003d\u003d\u003d Noteworthy Features:"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "* The filter is case insensitive."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "* In the profanity list, profanities are separated into rows with the format: `[THE_BAD_WORD]`, `[IGNORE_IN_COMBINATION_WITH]`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** `[THE_BAD_WORD]` is the profanity to filter out."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** `[IGNORE_IN_COMBINATION_WITH]` can be empty, or contain a series of 1 or more words (separated by commas) that"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "`[THE_BAD_WORD]` can be used with, e.g. paki, pakistan. \"paki\" is a racial slur and will be rejected, but if \"pakistan\", a"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "country name, is entered, \"pakistan\" will be accepted even though it contains \"paki\"."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** Each iteration ends when the end of the string is reached or the length of the current substring checked reaches the longest profanity"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "string length within the profanity list (For increased performance)."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "* Any leetspeak in the input will be replaced by its appropriate characters before the check, i.e. \"H3ll0\" will be"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "corrected to \"Hello\"."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "[CAUTION]"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "This profanity filter is quite basic and can be bypassed because of replacing leetspeak. For example, \"2 girls 1 cup\" is"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "considered as inappropriate, but the replacement of \"1\" to \"i\" will cause the input to be accepted. An easy solution is"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "to hard code the check of this input, but there will be many other examples like this that we would have to hard code for."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "As such, we have decided to accept this as a minor shortfall of this implementation."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "Given below is a sample run of the profanity filter with a feedback input of \"u suckz\":"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "* Iteration 1:"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** 1a: \"u\": Not a profanity (No match with line in profanity list)."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** 1b: \"u \": Not a profanity (No match with line in profanity list)."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** ..."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** 1g: \"u suckz\": Not a profanity (No match with line in profanity list)."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "* Iteration 2:"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** 2a: \" \": Not a profanity (No match with line in profanity list)."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** 2b: \"  s\": Not a profanity (No match with line in profanity list)."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** ..."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** 2f: \" suckz\": Not a profanity (No match with line in profanity list)."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "* Iteration 3:"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** 3a: \"s\": Not a profanity (No match with line in profanity list)."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** 3b: \"su\": Not a profanity (No match with line in profanity list)."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** 3c: \"suc\": Not a profanity (No match with line in profanity list)."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** 3d: \"suck\": *Profanity*! (Matches with a line in profanity list). Added to a list of bad words found."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** 3e: \"suckz\": Not a profanity (No match with line in profanity list)."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "* Iteration 7:"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** 7a: \"z\": Not a profanity (No match with line in profanity list)."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "* The resulting list has only 1 value: \"suck\" and the input will be rejected since there is at least 1 profanity found."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d How to implement the profanity filter"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "To ensure **fast retrieval**, a HashMap is used to store profanities to be rejected from the data file before using it to check if the"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "input contains any profanities inside."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "* **Alternative 1 (current choice):** Check every substring of the input to see if it matches any profanity-to-reject"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "within the HashMap."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** Pros: **O(1)** runtime per substring when checking whether a particular substring of the input."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** Cons: Runs for **O(n^2^)** time, where n is the number of characters in the input."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "*** While this may look daunting, we have a character input limit on `Person` attributes (feedback included) of 50."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "As such, there is an imposed upper bound on the performance time, preventing any significant decline in performance."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "*** Also, one optimisation method implemented (mentioned in \u003c\u003cFeedback-Features, Feedback noteworthy features\u003e\u003e) is"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "ending the iteration when the length of the longest string within the profanities-to-reject is reached. This"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "improves the performance time to **O(ln)**, where l is length of the longest profanity-to-reject."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "* **Alternative 2 :** Check every element in HashMap to see if it is contained within the input."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** Pros: Runs for **O(n)** time per element in HashMap using the String.contains() method, where n is the number of"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "characters in the input, and is capped at n ≤ 50 (Mentioned in Alternative 1)."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** Cons: Runs for **O(nm)** time, where m is the number of elements in the HashMap. m can increase infinitely by"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "extending the list of profanities-to-reject (i.e. Adding profanities of other languages, adding newly created profanities,"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "adding profanities that have been overlooked, etc.)"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "*** Hence, this alternative is not as efficient as **O(lm)** in Alternative 1 as l can be capped but m may not."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "// end::feedbackcommand[]"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// tag::ratecommand[]"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Rate command feature"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d\u003d Introduction"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "We have implemented a rate command feature as an enhancement, which focuses on the `Logic` component."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "A `Rating` class is implemented to support this, which the `Person` class is dependent on. This command"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "allows users, especially for managers to update ratings of employees within an organisation."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "This command differs from the add and edit command, because users cannot simply add an employee with a rating through"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "the add command or edit an employee\u0027s rating through the edit command."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "[CAUTION]"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Any updates to an employee\u0027s rating should only"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "be done by a *person of authority*, i.e. `Manager`."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "The rate command, as mentioned, executes asynchronous to the add and edit command. Upon adding an employee, a `Rating.DEFAULT_INITIAL_RATING`"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "with a default value of 0, is initialised on the `Person` and then saved."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "There are 2 validation regular expressions found in the `Rating` class:"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* `VALIDATION_REGEX` which checks for integer values from 0 - 10 of `Rating` which have already been added. 0 is included"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "as there may be a case when a `Person` has already been added but his/her `Rating` has yet to be updated."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "* `VALIDATION_INPUT_REGEX` which checks for integer values from 1 - 10 of `Rating` to be added by users with the rate"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "command."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Given below is a sequence diagram shows how the rate operation works:"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "image::RateSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// end::ratecommand[]"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "abtyx"
        },
        "content": "// tag::privacycommand[]"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "abtyx"
        },
        "content": "\u003d\u003d\u003d Privacy Feature"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "abtyx"
        },
        "content": "\u003d\u003d\u003d\u003d Introduction"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "abtyx"
        },
        "content": "We have implemented a privacy feature to fields that we deem to have importance in having an option to be"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "abtyx"
        },
        "content": "made private. A Privacy Command is implemented to be able to set the privacy values of the information of"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "abtyx"
        },
        "content": "the selected person."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "abtyx"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "abtyx"
        },
        "content": "The privacy feature is currently implemented as a boolean field under information classes that can be made private"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "abtyx"
        },
        "content": "(Phone, Email, Address as of v1.4)."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "abtyx"
        },
        "content": "A new command PrivacyCommand is implemented to be able to change the Privacy values of classes that have a Privacy field."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "abtyx"
        },
        "content": "The add command can also add a Staff with private fields directly."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "abtyx"
        },
        "content": "The GUI will also display private fields as private."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "abtyx"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "abtyx"
        },
        "content": "This command can only change fields that can be made private, and will throw an exception otherwise."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "abtyx"
        },
        "content": "Coming in v2.0: +"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "abtyx"
        },
        "content": "To change a field to private or not private, a \u0027y\u0027 or \u0027n\u0027 is the expected input respectively. This is planned to"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "abtyx"
        },
        "content": "change in future updates where there can be different levels of privacy for different fields."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "abtyx"
        },
        "content": "Given below is an activity diagram that shows how the Privacy command works:"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "abtyx"
        },
        "content": "image::PrivacyCommandActivityDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "abtyx"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "abtyx"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d How to implement Privacy"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "abtyx"
        },
        "content": "* **Alternative 1 (current choice):** Use privacy as a boolean value"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "abtyx"
        },
        "content": "** Pros: Easy to implement as there is only 2 values to take note off"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "abtyx"
        },
        "content": "** Cons: Restrictive in what it can do looking at a future aspect where different level of privacy may be required"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "abtyx"
        },
        "content": "* **Alternative 2:** Implement Privacy as a Enum class"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "abtyx"
        },
        "content": "** Pros: Able to have different level of Privacy and prevents wrong input automatically"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "abtyx"
        },
        "content": "** Cons: Harder to implement and extra work not required in current stage of project"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "abtyx"
        },
        "content": "// end::privacycommand[]"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// tag::sortcommand[]"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Sort Feature"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "abtyx"
        },
        "content": "\u003d\u003d\u003d\u003d Introduction"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "We have implemented a sort command that focuses on the `Logic` component. A `SortCommand` class is added."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "This `sort` command sorts the staff list by name in lexicographical order."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Given below is a sequence diagram that shows how the sort command works:"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "image::SortSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation of sort command"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* ** Alternative 1 (current choice):** Sorts by favourite then by name"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Pros: Favourited staff stays on top of the list, favourited staff still easier to find"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Cons: The overall list is not 100% sorted by name"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* ** Alternative 2:** Sorts by name then by favourite"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Pros: Overall list sorted wholly by name, easier to find a specific person when not known whether favourited or not"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Cons: Favourited person scattered all over in the list, defeats the purpose of having favourited staff"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// end::sortcommand[]"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// tag::sortdeptcommand[]"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Sort By Department Feature"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d\u003d Introduction"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "This sort by department command is a further enhancement to the sort command that also focuses on the `Logic` component. A `SortDeptCommand` class is added."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "This `sortDept` command sorts the staff list by department in lexicographical order."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Given below is a sequence diagram that shows how the sortDept command works:"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "image::SortDeptSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation of sortDept command"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* ** Alternative 1 (current choice):** Sorts by department then by favourite then by name"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Pros: Easier to go through the different departments without a hassle"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Cons: Favourited staff does not stay on top of the list"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* ** Alternative 2:** Sorts by favourite then by department then by name"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Pros: Favourited staff stay on top of the list"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Cons: The main purpose of sorting by department is to group the staff by the different department, so there is no point in putting the favourites on top of the list"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// end::sortdeptcommand[]"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// tag::sortratingdowncommand[]"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Sort By Rating From Highest To Lowest Feature"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d\u003d Introduction"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "This sort by rating command is a further enhancement to the sort command that also focuses on the `Logic` component. A `SortRatingDownCommand` class is added."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "This `sortRatingDown` command sorts the staff list by rating from highest to lowest."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Given below is a sequence diagram that shows how the sortRatingDown command works:"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "image::SortRatingDownSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation of sortRatingDown command"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* ** Alternative 1 (current choice):** Sorts by rating down then by favourite then by name"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Pros: Staff list is sorted wholly by their ratings, easier to process for the case of staff performance review as being favourited or not should not affect its rating ranking"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Cons: Favourited staff does not stay on top of the list"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* ** Alternative 2:** Sorts by favourite then by rating down then by name"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Pros: Favourited staff stay on top of the list"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Cons: As rating by rating is intended for the use of staff performance review, it would not be helpful to do it this way"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d The use of sortRatingDown when command alias `sortRating` is called"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* ** Alternative 1 (current choice):** Inputting sortRating sorts the staff list by rating from highest to lowest"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Pros: This alternative is chosen as it is believed that there are more cases that make use of sorting from highest rating, e.g. job promotion review, performance-related additional wage"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Cons: Some people might expect the default sort by rating to sort the list from lowest to highest"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* ** Alternative 2:** Inputting sortRating sorts the staff list by rating from lowest to highest"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Pros: There are cases where sort rating from lowest is needed, e.g. the need to let go of staff due to budget cuts"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Cons: Some people might expect the default sort by rating to sort the list from highest to lowest"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// end::sortratingdowncommand[]"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// tag::sortratingupcommand[]"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Sort By Rating From Lowest To Highest Feature"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d\u003d Introduction"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "This sort by rating command is a further enhancement to the sort command that also focuses on the `Logic` component. A `SortRatingDownCommand` class is added."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "This `sortRatingUp` command sorts the staff list by rating from lowest to highest."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Given below is a sequence diagram that shows how the sortRatingUp command works:"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "image::SortRatingUpSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation of sortRatingUp command"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* ** Alternative 1 (current choice):** Sorts by rating up then by favourite then by name"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Pros: Staff list is sorted wholly by their ratings, easier to process for the case of staff performance review as being favourited or not should not affect its rating ranking"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Cons: Favourited staff does not stay on top of the list"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* ** Alternative 2:** Sorts by favourite then by rating up then by name"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Pros: Favourited staff stay on top of the list"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Cons: As rating by rating is intended for the use of staff performance review, it would not be helpful to do it this way"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// end::sortratingupcommand[]"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// tag::favouritecommand[]"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Favourite Feature"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d\u003d Introduction"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "We have implemented a favourite command that focuses on the `Logic` component. A \u0027FavouriteCommand` class is added."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "This `favourite` command allows contacts to be added to a favourite list and moves the contact to the top of the list."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Given below is a sequence diagram that shows how the favourite command works:"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "image::FavouriteSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation of favourite command"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* ** Alternative 1 (current choice):** Favourite command can be called using a command alias \u0027fav\u0027"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Pros: Easier and faster command calling"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Cons: Ambiguity in choosing command alias (can be either fave or fav)"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* ** Alternative 2:** Favourite command takes in command word \u0027favourite\u0027"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Pros: Clear command word taken in"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Cons: Slower command calling"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// end::favouritecommand[]"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// tag::unfavouritecommand[]"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Unfavourite Feature"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d\u003d Introduction"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "As we have implemented a favourite command, we also have implemented an unfavourite command that focuses on the `Logic` component. An \u0027UnfavouriteCommand` class is added."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "This `unfavourite` command allows contacts to be removed from the favourite list."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Given below is a sequence diagram that shows how the unfavourite command works:"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "image::UnfavouriteSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation of unfavourite command"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* ** Alternative 1 (current choice):** Using a separate unfavourite command"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Pros: Clear use of command"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Cons: Adds yet another command to command list"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* ** Alternative 2:** Doing a favourite command on a favourited person will unfavourite them instead"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Pros: Easier implementation"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Cons: Ambiguous use of this feature as the command is a favourite command"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// end::unfavouritecommand[]"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedSsenisub`."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "It extends `SSENISUB` with an undo/redo history, stored internally as an `SsenisubStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* `VersionedSsenisub#commit()` -- Saves the current SSENISUB state in its history."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* `VersionedSsenisub#undo()` -- Restores the previous SSENISUB state from its history."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* `VersionedSsenisub#redo()` -- Restores a previously undone SSENISUB state from its history."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitSsenisub()`, `Model#undoSsenisub()` and `Model#redoSsenisub()` respectively."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedSsenisub` will be initialized with the initial SSENISUB state, and the `currentStatePointer` pointing to that single SSENISUB state."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th staff in SSENISUB. The `delete` command calls `Model#commitSsenisub()`, causing the modified state of SSENISUB after the `delete 5` command executes to be saved in the `SsenisubStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new staff. The `add` command also calls `Model#commitSsenisub()`, causing another modified address book state to be saved into the `SsenisubStateList`."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "If a command fails its execution, it will not call `Model#commitSsenisub()`, so SSENISUB state will not be saved into the `SsenisubStateList`."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Step 4. The user now decides that adding the staff was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoSsenisub()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores SSENISUB to that state."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoSsenisub()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoSsenisub()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores SSENISUB to that state."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "If the `currentStatePointer` is at index `SsenisubStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoSsenisub()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify SSENISUB, such as `list`, will usually not call `Model#commitSsenisub()`, `Model#undoSsenisub()` or `Model#redoSsenisub()`. Thus, the `SsenisubStateList` remains unchanged."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitSsenisub()`. Since the `currentStatePointer` is not pointing at the end of the `SsenisubStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the staff being deleted)."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedSsenisub`."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// tag::lockunlockcommand[]"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Lock and Unlock Feature (coming in v2.0)"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d\u003d Introduction"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "We will implement an unlock command that focuses on the `Storage` component. An `UnlockCommand` class is added"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "and an `UnlockEvent` event is also added."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "The `unlock` command allows changes made to be saved to SSENISUB."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Without the correct (for now hardcoded) password, all the changes made (add, edit, delete)during the session"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "will not be saved and will not be shown once the window is closed and reopened."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "The following activity diagram shows how the current `Unlock` command works:"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Given below is an activity diagram that shows how the unlock command is intended to work:"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "image::UnlockActivityDiagram.png[height\u003d\"650\"]"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation of unlock"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* ** Alternative 1 (current choice):** Unlocking is handled as an event rather than a command."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Pros: Unlocking can be done at any time and event handler is used"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Cons: Does not resemble a real unlocking function, minimal functionality"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* ** Alternative 2:** Unlocking is a command that overrides all other commands"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Pros: Makes more sense as an unlock function"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Cons: Harder to implement"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// end::lockunlockcommand[]"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// tag::login[]"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d [Proposed] Login Feature"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "\u003d\u003d\u003d\u003d Introduction"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "The login feature will be implemented together with an authorization level feature. Based on the login credentials, the staff"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "using the SSENISUB will have varying levels of access to the various features offered."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "The idea and motivation behind this is that as we plan for SSENISUB to be used as a central database and can be used by any"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "staff, not all commands and features should be utilized by a typical staff, such as `delete`. Only a HR Manager should have the"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "authorization to be able to `delete` or `add` staff."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "With the implementation of authorization levels, we will then be able to categorize the other features based on authority required"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "to access them, and also affect the visibility state of private information."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "A Logout feature will also be implemented for the case of a shared device, which multiple staff can be using throughout the day."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Given below is an activity diagram that shows how this feature works when a user wants to use the `Delete` command."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "image::LoginLogoutActivityDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// end::login[]"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "A project often depends on third-party libraries. For example, SSENISUB depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all staff in the list."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/SsenisubParser.java[`SsenisubParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/SsenisubParser.java[`SsenisubParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in SSENISUB, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in SSENISUB."
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/Ssenisub.java[`Ssenisub`] API need to be updated."
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/Ssenisub.java[`Ssenisub`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/Ssenisub.java[`Ssenisub`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/Ssenisub.java[`Ssenisub`]. Loop through each staff, and remove the `tag` from each staff."
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `Ssenisub#removeTag(Tag)`."
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/SsenisubSystemTest.java[`SsenisubSystemTest#assertCommandBoxShowsDefaultStyle() and SsenisubSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in SSENISUB."
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever SSENISUB is updated."
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleSsenisubChangedEvent(SsenisubChangedEvent)`] to update the number of persons whenever there are new changes to SSENISUB."
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/SsenisubSystemTest.java[`SsenisubSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving SSENISUB to the cloud. However, the current implementation of the application constantly saves SSENISUB after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for SSENISUB storage."
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ". Add a new method `backupSsenisub(ReadOnlySsenisub)`, so that SSENISUB can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/SsenisubStorage.java[`SsenisubStorage`] interface."
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlSsenisubStorage.java[`XmlSsenisubStorage`] class."
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "*Scenario:* You are a software maintainer for `SSENISUB`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/SsenisubParser.java[`SsenisubParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/SsenisubParserTest.java[`SsenisubParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/SsenisubParser.java[`SsenisubParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/SsenisubParserTest.java[`SsenisubParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `ssenisub.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new Xml field for `Remark`."
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ". Fix `invalidAndValidPersonSsenisub.xml`, `typicalPersonsSsenisub.xml`, `validSsenisub.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "* For organisations to maintain a hierarchical form of managing manpower within the organisation itself"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "* Has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "* Prefer desktop apps over other types"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "* Prefers typing over mouse input"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "* Is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "*Value proposition*: This software allows the organisation to manage their staff and details, improving work productivity."
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "| Priority | As a ... | I want to be able to …                                                                                         | So that I can ...                                                        |"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * * *      | Staff    | Log in                                                                                                         | Access the system                                                         |"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * * *      | Staff    | Log out                                                                                                        | Safely log out of the system and prevent others from accessing my account |"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * * *      | Staff    | Edit my profile                                                                                                | Update personal information                                               |"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * * *      | Staff    | See a help page                                                                                                | Know what is the functionality of the software                            |"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * * *      | Staff    | Have my personal information set to private                                                                    | Continue working in peace                                                 |"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * * *      | Staff    | View current personal ratings and feedbacks                                                                    | Improve myself to work better                                             |"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * * *      | Staff    | Find staff by name                                                                                             | I can find his/her contact information                                    |"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * *       | Staff    | Undo my last command                                                                                           | I can undo my mistakes                                                    |"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " *        | Staff    | View past personal ratings and feedbacks                                                                       | Look at my progress performance                                           |"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " *        | Staff    | Be able to give my manager feedback                                                                            | Allow my manager to improve on himself/herself                            |"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " *        | Staff    | Receive an email if rating fall before average                                                                 | Track my work progress and set reminder to myself to work harder          |"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " *        | Staff    | Set a rating goal                                                                                              | Strive to work harder to hit my promotion                                 |"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " *        | Staff    | Change command keywords                                                                                        | Use words i prefer                                                        |"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " *        | Staff    | Upload a display picture                                                                                       | Allow other users of the system to identify who I am                      |"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " *        | Staff    | Arrange for meetings with other staff                                                                          | Discuss project details with the other core members                       |"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * * *      | HR User  | Add a new staff                                                                                                | Update the organisation’s structure appropriately                         |"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * * *      | HR User  | Delete a staff                                                                                                 | Remove entries that no longer work here                                   |"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * * *      | HR User  | Edit staff details                                                                                             | Update the staff position if he/she is promoted                           |"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " * *       | HR User  | Have different authorization settings for people                                                               | Staff can only use commands they should be able to                    |"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * * *      | HR User  | Allocate staff to a department                                                                                 | Manage the manpower within the organization                               |"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * * *      | HR User  | Allocate staff to a manager                                                                                    | Manage staff to manager                                                   |"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " * *       | HR User  | Set a salary for a staff                                                                                   | Maintain a record of the staff’s payroll                               |"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * *       | HR User  | Know the number of staff in each department                                                                    | Plan for activities                                                       |"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * * *      | Manager  | Be able to look for a particular staff information from a particular department                                | Search a list of contacts by tags                                         |"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * * *      | Manager  | Be able to list the staff                                                                                      | View all the staff under my supervision                                   |"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " * *       | Manager  | Set work ratings \u0026 feedback for certain staff                                                                  | Evaluate the staff under me                                           |"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " * *       | Manager  | Update work ratings \u0026 feedback for certain staff                                                               | Edit the staff’s rating under me                                       |"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * *       | Manager  | Sort by ratings                                                                                                | Reward the highly rated performers and identify the weaker ones           |"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " * *       | Manager  | Search by staff tags                                                                                        | Find the people I require more conveniently                               |"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " *        | Manager  | Receive notification to rate staff                                                                             | Remember to rate my staff and give timely feedback                        |"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " *        | Manager  | Receive notification of staff whose rating falls below average for 3 months consecutively under my supervision | Better manage my staff and find out if they need any help             |"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "(For all use cases below, the *System* is the `Ssenisub` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Use case: view help page"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "1. A user logs into SSENISUB"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "2. User keys in the keyword to display the help page"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "3. SSENISUB displays the help page"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Use case: add staff"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "1. HR staff logs in to SSENISUB"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "2. HR staff adds the staff details into SSENISUB"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "3. SSENISUB shows success details of the add"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* 1b. User inputs wrong login information, receives warning"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* 2b. Staff details already exists, receives a warning"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "+"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* 2c. User does not have authorization to add staff, receives warning"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "+"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Information of User gets sent to higher up in charge"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Use case: edit a staff information"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "1. HR staff logs in to SSENISUB"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "2. HR staff searches for the staff to edit and selects it"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "3. HR staff makes the necessary changes to the staff"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "4. SSENISUB confirms with the HR staff the changes"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "5. HR staff confirms and the changes are made"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* 2a.  No staff are being displayed by SSENISUB"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Use case: delete staff"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "1.  User requests to list staff"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "2.  SSENISUB shows a list of staff"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "3.  User requests to delete a specific staff in the list"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "4.  SSENISUB deletes the staff"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** 3a1. SSENISUB shows an error message."
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Use case: remove staff"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "1. HR staff logs in to SSENISUB"
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "2. HR staff searches for the particular staff to remove"
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "3. HR inputs command to remove the staff"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "4. SSENISUB confirms with the HR staff before removing the staff"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "5. SSENISUB removes the staff and displays a success message"
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* 3a. The staff cannot be found"
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Use case: give staff feedback"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "1. Manager logs in to SSENISUB"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "2. Manager requests to look for staff"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "3. SSENISUB shows a list of staff"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "4. Manager requests to update feedback for a particular staff"
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "5. SSENISUB updates feedback of staff"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "* 3a. The list is empty, receives warning"
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Use case ends     "
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "* 4a. The given index is invalid, SSENISUB shows an error message"
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* 4b. The given feedback contains profanity, SSENISUB shows an error message and the profanity found"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "+"
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Use case: rate staff"
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "1. Manager logs in to SSENISUB"
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "2. Manager requests to look for staff"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "3. SSENISUB shows a list of staff"
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "4. Manager requests to update review of a particular staff"
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "5. SSENISUB updates review of staff"
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "* 3a. The list is empty, receives warning"
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "+"
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "Use case ends     "
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "* 4a. The given index is invalid, SSENISUB shows an error message"
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "+"
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Use case: view personal ratings"
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "1. Staff logs into SSENISUB"
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "2. Staff inputs keyword to view his own ratings"
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "3. SSENISUB displays the current user’s ratings and feedback (if any)"
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Use case: search for staff"
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "1. Staff logs in to SSENISUB"
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "2. Staff inputs the keyword to search followed by certain keywords pertaining to the staff."
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "3. SSENISUB displays the list of staff that matches the keywords supplied."
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* 3a. SSENISUB shows no staff with the matching keywords"
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Use case: sort ratings of staff"
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "1. Manager logs into SSENISUB"
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "2. Manager displays all staff under him/her"
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "3. Manager inputs the command to sort the staff by their ratings"
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "4. SSENISUB sorts the staff by the user’s preference and displays"
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* 2a. SSENISUB does not show any staff under the user"
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "+"
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Use case: undo last action"
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "1. User does some action on SSENISUB"
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "2. User enters the command to undo the last action made"
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "3. SSENISUB undo last action and tells user that previous action has been undone"
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "+"
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ".  Should be able to hold up to 100,000 staff without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ".  Should have a customizable personalized interface."
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ". Should be able to change font size."
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "// tag::addStaffTC[]"
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003d\u003d\u003d Adding a staff"
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ".. Prerequisites: Phone and email must be unique, it should not been used for any existing staff."
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "... Test case: `add` n/John Doe p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 d/Tech m/Ben t/staff +"
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "   Expected: The command result panel should display that the person has been added with all the details. Timestamp"
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "   in the status bar is updated."
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "... Test case: `add` n/John-Doe p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 d/Tech m/Ben t/staff +"
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "   Expected: Error message will be shown in the command result panel - Names should only contain alphabetical"
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "   characters and spaces, and it should not be blank. Timestamp in the status bar remains the same."
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ".. Prerequisites: Phone or email exists in SSENISUB"
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "... Test case: `add` n/Johnny p/98765432 e/johnny@example.com a/311, Clementi Ave 2, #02-25 d/Tech m/Ben t/staff +"
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    Expected: Error message will be shown in the command result panel - This phone number is already in use."
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    Timestamp in the status bar remains the same."
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "// end::addStaffTC[]"
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Deleting a staff"
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ". Deleting a staff while all staff are listed"
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ".. Prerequisites: List all staff using the `list` command. Multiple staff in the list."
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "   Expected: No staff is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1660,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "// tag::selectStaffTC[]"
      },
      {
        "lineNumber": 1661,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003d\u003d\u003d Selecting a staff"
      },
      {
        "lineNumber": 1662,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 1663,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ". Selecting a staff while all staff are listed"
      },
      {
        "lineNumber": 1664,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 1665,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ".. Prerequisites: List all staff using the `list` command. Multiple staff in the list."
      },
      {
        "lineNumber": 1666,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "... Test case: `select 1` +"
      },
      {
        "lineNumber": 1667,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "   Expected: The details of the selected staff would be displayed on the staff display panel."
      },
      {
        "lineNumber": 1668,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "... Other correct select commands to try: `select x` (where x is larger than 0 but less than the list size) +"
      },
      {
        "lineNumber": 1669,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1670,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "... Test case: `select 0` +"
      },
      {
        "lineNumber": 1671,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "   Expected: No staff would be selected and would display invalid message in the command result panel."
      },
      {
        "lineNumber": 1672,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "... Other incorrect select commands to try: `select`, `select x` (where x is 0 or lesser than 0 or larger than the"
      },
      {
        "lineNumber": 1673,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "list size) +"
      },
      {
        "lineNumber": 1674,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1675,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "// end::selectStaffTC[]"
      },
      {
        "lineNumber": 1676,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 1677,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "// tag::FindingStaffTC[]"
      },
      {
        "lineNumber": 1678,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003d\u003d\u003d Finding staff"
      },
      {
        "lineNumber": 1679,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 1680,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ". Finding staff by name"
      },
      {
        "lineNumber": 1681,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 1682,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ".. Prerequisites: Having at least 1 staff."
      },
      {
        "lineNumber": 1683,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "... Test case: Valid name +"
      },
      {
        "lineNumber": 1684,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "   Command: `find-n` John +"
      },
      {
        "lineNumber": 1685,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "   Expected: Staff/s with name John will be shown on the left panel."
      },
      {
        "lineNumber": 1686,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "... Other correct find by name commands to try: `find-n Valid name` (where valid name contain alphabetical characters"
      },
      {
        "lineNumber": 1687,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "that are in SSENISUB) +"
      },
      {
        "lineNumber": 1688,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "   Expected: Similar as previous"
      },
      {
        "lineNumber": 1689,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "... Test case: Invalid name +"
      },
      {
        "lineNumber": 1690,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "   Command: `find-n` 123 +"
      },
      {
        "lineNumber": 1691,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "   Expected: No staff will be shown on the left panel."
      },
      {
        "lineNumber": 1692,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "... Other find by name commands to try: `find-n Invalid name` (where invalid name contain alphanumeric"
      },
      {
        "lineNumber": 1693,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "characters or names that are not in SSENISUB) +"
      },
      {
        "lineNumber": 1694,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "   Expected: Similar as previous"
      },
      {
        "lineNumber": 1695,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "... Test case: Empty value +"
      },
      {
        "lineNumber": 1696,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "   Command: `find-n` +"
      },
      {
        "lineNumber": 1697,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "   Expected: Error message is shown in the command result panel."
      },
      {
        "lineNumber": 1698,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "// end::FindingStaffTC[]"
      },
      {
        "lineNumber": 1699,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 1700,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// tag::FavouriteStaffTC[]"
      },
      {
        "lineNumber": 1701,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Favouriting a staff"
      },
      {
        "lineNumber": 1702,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 1703,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ". Favourite a staff while all staff are listed"
      },
      {
        "lineNumber": 1704,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 1705,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ".. Prerequisites: List all staff using the `list` or `sort` command. Multiple staff in the list."
      },
      {
        "lineNumber": 1706,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ".. Test case: `fav 3` +"
      },
      {
        "lineNumber": 1707,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "   Expected: Third contact is moved to the top of the list. Once on top of the list, the name of the staff changes color to yellow and a star is added next to it in the list panel on the left."
      },
      {
        "lineNumber": 1708,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ".. Test case: `fav 0` +"
      },
      {
        "lineNumber": 1709,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "   Expected: No staff is favourited. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1710,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ".. Other incorrect favourite commands to try: `fav`, `fav x` (where x is larger than the list size) +"
      },
      {
        "lineNumber": 1711,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1712,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 1713,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ". Favouriting a staff that is already favourited"
      },
      {
        "lineNumber": 1714,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 1715,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ".. Prerequisites: List all staff using the `list` or `sort` command. Multiple staff in the list. First staff in the list favourited."
      },
      {
        "lineNumber": 1716,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ".. Test case: `fav 1` +"
      },
      {
        "lineNumber": 1717,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "   Expected: Staff is already favourited. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1718,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "//end::FavouriteStaffTC[]"
      },
      {
        "lineNumber": 1719,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 1720,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// tag::UnfavouriteStaffTC[]"
      },
      {
        "lineNumber": 1721,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Unfavouriting a staff"
      },
      {
        "lineNumber": 1722,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 1723,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ". Unfavourite a staff while all staff are listed"
      },
      {
        "lineNumber": 1724,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 1725,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ".. Prerequisites: List all staff using the `list` or `sort` command. Multiple staff in the list. One or more staff is favourited."
      },
      {
        "lineNumber": 1726,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ".. Test case: `unfav 1` +"
      },
      {
        "lineNumber": 1727,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "   Expected: First contact is moved back from the top of the list. The name of the staff changes color back from yellow and the star next to it is removed in the list panel on the left."
      },
      {
        "lineNumber": 1728,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ".. Test case: `unfav 0` +"
      },
      {
        "lineNumber": 1729,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "   Expected: No staff is unfavourited. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1730,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ".. Other incorrect unfavourite commands to try: `unfav`, `unfav x` (where x is larger than the list size) +"
      },
      {
        "lineNumber": 1731,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1732,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 1733,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ". Unfavouriting a staff that is already not favourited"
      },
      {
        "lineNumber": 1734,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 1735,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ".. Prerequisites: List all staff using the `list` or `sort` command. Multiple staff in the list. No staff in the list already favourited."
      },
      {
        "lineNumber": 1736,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ".. Test case: `unfav 3` +"
      },
      {
        "lineNumber": 1737,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "   Expected: Staff is already unfavourited. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1738,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "//end::UnfavouriteStaffTC[]"
      },
      {
        "lineNumber": 1739,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 1740,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1742,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1744,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1746,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 419,
      "IamRENCE": 173,
      "NgeowXiuQi": 139,
      "abtyx": 50,
      "DanKhoo": 75,
      "-": 890
    }
  },
  {
    "path": "docs/LearningOutcomes.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Learning Outcomes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: LearningOutcomes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnumlevels: 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "After studying this code and completing the corresponding exercises, you should be able to,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use High-Level Designs `[LO-HighLevelDesign]`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the \u003c\u003cDeveloperGuide#architecture, Developer Guide\u003e\u003e describes the high-level design using an _Architecture Diagrams_ and high-level sequence diagrams."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/architecture/[se-edu/se-book: Design: Architecture]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/design/introduction/multilevelDesign/[se-edu/se-book: Design: Introduction: Multi-Level Design]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Event-Driven Programming `[LO-EventDriven]`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the \u003c\u003cDeveloperGuide#architecture, Developer Guide\u003e\u003e uses events to communicate with components without needing a direct coupling. Also note how the link:{repoURL}/src/main/java/seedu/address/commons/core/index/EventsCenter.java[`EventsCenter.java`] acts as an event dispatcher to facilitate communication between event creators and event consumers."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/architecture/architecturalStyles/eventDriven/[se-edu/se-book: Design: Architecture: Architecture Styles: Event-Driven Architectural Style]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use API Design `[LO-ApiDesign]`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "Note how components of SSENISUB have well-defined APIs. For example, the API of the `Logic` component is given in the link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "image:LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/reuse/apis/[se-edu/se-book: Implementation: Reuse: APIs]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Assertions `[LO-Assertions]`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "Note how SSENISUB app uses Java ``assert``s to verify assumptions."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/assertions/[se-edu/se-book: Implementation: Error Handling: Assertions]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more assertions"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* Make sure assertions are enabled in your IDE by forcing an assertion failure (e.g. add `assert false;` somewhere in the code and run the code to ensure the runtime reports an assertion failure)."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "* Add more assertions to Ssenisub as you see fit."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Logging `[LO-Logging]`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "Note \u003c\u003cDeveloperGuide#logging, how SSENISUB app uses Java\u0027s `java.util.log` package to do logging\u003e\u003e."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/logging/[se-edu/se-book: Implementation: Error Handling: Logging]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more logging"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "Add more logging to Ssenisub as you see fit."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Defensive Coding `[LO-DefensiveCoding]`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "Note how Ssenisub uses the `ReadOnly*` interfaces to prevent objects being modified by clients who are not supposed to modify them."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/defensiveProgramming/[se-edu/se-book: Implementation: Error Handling: Defensive Programming]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: identify more places for defensive coding"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "Analyze SSENISUB code/design to identify,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* where defensive coding is used"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* where the code can be more defensive"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Build Automation `[LO-BuildAutomation]`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "Note \u003c\u003cUsingGradle#, how SSENISUB app uses Gradle to automate build tasks\u003e\u003e."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/integration/buildAutomation/what/[se-edu/se-book: Implementation: Integration: Build Automation: What]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use gradle to run tasks"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* Use gradle to do these tasks: Run all tests in headless mode, build the jar file."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use gradle to manage dependencies"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how the build script `build.gradle` file manages third party dependencies such as ControlsFx. Update that file to manage a third-party library dependency."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Continuous Integration `[LO-ContinuousIntegration]`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "Note \u003c\u003cUsingTravis#, how SSENISUB app uses Travis to perform Continuous Integration\u003e\u003e. (https://travis-ci.org/se-edu/addressbook-level4[image:https://travis-ci.org/se-edu/addressbook-level4.svg?branch\u003dmaster[Build Status]])"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/integration/buildAutomation/continuousIntegrationDeployment/[se-edu/se-book: Implementation: Integration: Build Automation: CI \u0026 CD]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use Travis in your own project"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* Set up Travis to perform CI on your own fork."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Code Coverage `[LO-CodeCoverage]`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Note how our CI server \u003c\u003cUsingTravis#, Travis uses Coveralls to report code coverage\u003e\u003e. (https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level4/badge.svg?branch\u003dmaster[Coverage Status]]) After \u003c\u003cUsingCoveralls#, setting up Coveralls\u003e\u003e for your project, you can visit Coveralls website to find details about the coverage of code pushed to your repo. https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[Here] is an example."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testCoverage/[se-edu/se-book: QA: Testing: Test Coverage]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use the IDE to measure coverage locally"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* Use the IDE to measure code coverage of your tests."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Test Case Design Heuristics `[LO-TestCaseDesignHeuristics]`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/src/test/java/seedu/address/commons/util/StringUtilTest.java[`StringUtilTest.java`]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "class gives some examples of how to use _Equivalence Partitions_, _Boundary Value Analysis_, and _Test Input Combination Heuristics_ to improve the efficiency and effectiveness of test cases testing the link:../src/main/java/seedu/address/commons/util/StringUtil.java[`StringUtil.java`] class."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testCaseDesign/[se-edu/se-book: QA: Test Case Design]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Apply Test Case Design Heuristics to other places"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* Use the test case design heuristics mentioned above to improve test cases in other places."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Write Integration Tests `[LO-IntegrationTests]`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Consider the link:{repoURL}/src/test/java/seedu/address/storage/StorageManagerTest.java[`StorageManagerTest.java`] class."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "* Test methods `prefsReadSave()` and `SsenisubReadSave()` are integration tests. Note how they simply test if The `StorageManager` class is correctly wired to its dependencies."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "* Test method `handleSsenisubChangedEvent_exceptionThrown_eventRaised()` is a unit test because it uses _dependency injection_ to isolate the SUT `StorageManager#handleSsenisubChangedEvent(...)` from its dependencies."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "Compare the above with link:{repoURL}/src/test/java/seedu/address/logic/LogicManagerTest.java[`LogicManagerTest`]. Some of the tests in that class (e.g. `execute_*` methods) are neither integration nor unit tests. They are _integration + unit_ tests because they not only check if the LogicManager is correctly wired to its dependencies, but also checks the working of its dependencies. For example, the following two lines test the `LogicManager` but also the `Parser`."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "@Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testingTypes/[se-edu/se-book: QA: Testing: Testing Types]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write unit and integration tests for the same method."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "* Write a unit test for a high-level method somewhere in the code base (or a new method you wrote)."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "* Write an integration test for the same method."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Write System Tests `[LO-SystemTesting]`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Note how tests below `src/test/java/systemtests` package (e.g link:{repoURL}/src/test/java/systemtests/AddCommandSystemTest.java[`AddCommandSystemTest.java`]) are system tests because they test the entire system end-to-end."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testingTypes/[se-edu/se-book: QA: Testing: Testing Types]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write more system tests"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "* Write system tests for the new features you add."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Automate GUI Testing `[LO-AutomateGuiTesting]`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Note how this project uses TextFX library to automate GUI testing, including \u003c\u003cDeveloperGuide#headless-gui-testing, _headless_ GUI testing\u003e\u003e."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write more automated GUI tests"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "* Covered by `[LO-SystemTesting]`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Design Patterns `[LO-DesignPatterns]`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some example design patterns used in the code base."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "* *Singleton Pattern* : link:{repoURL}/src/main/java/seedu/address/commons/core/EventsCenter.java[`EventsCenter.java`] is Singleton class. Its single instance can be accessed using the `EventsCenter.getInstance()` method."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "* *Facade Pattern* : link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager.java`] is not only shielding the internals of the Storage component from outsiders, it is mostly redirecting method calls to its internal components (i.e. minimal logic in the class itself). Therefore, `StorageManager` can be considered a Facade class."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* *Command Pattern* : The link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command.java`] and its sub classes implement the Command Pattern."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* *Observer Pattern* : The \u003c\u003cDeveloperGuide#events-driven-nature-of-the-design, event driven mechanism\u003e\u003e used by this code base employs the Observer pattern. For example, objects that are interested in events need to have the `@Subscribe` annotation in the class (this is similar to implementing an `\\\u003c\u003cObserver\u003e\u003e` interface) and register with the `EventsCenter`. When something noteworthy happens, an event is raised and the `EventsCenter` notifies all relevant subscribers. Unlike in the Observer pattern in which the `\\\u003c\u003cObservable\u003e\u003e` class is notifying all `\\\u003c\u003cObserver\u003e\u003e` objects, here the `\\\u003c\u003cObservable\u003e\u003e` classes simply raises an event and the `EventsCenter` takes care of the notifications."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "* *MVC Pattern* :"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "** The \u0027View\u0027 part of the application is mostly in the `.fxml` files in the `src/main/resources/view` folder."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "** `Model` component contains the \u0027Model\u0027. However, note that it is possible to view the `Logic` as the model because it hides the `Model` behind it and the view has to go through the `Logic` to access the `Model`."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "** Sub classes of link:{repoURL}/src/main/java/seedu/address/ui/UiPart.java[`UiPart`] (e.g. `PersonListPanel` ) act as \u0027Controllers\u0027, each controlling some part of the UI and communicating with the \u0027Model\u0027 (via the `Logic` component which sits between the \u0027Controller\u0027 and the \u0027Model\u0027)."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* *Abstraction Occurrence Pattern* : Not currently used in the app."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designPatterns/[se-edu/se-book: Design: Design Patterns]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Discover other possible applications of the patterns"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "* Find other possible applications of the patterns to improve the current design. e.g. where else in the design can you apply the Singleton pattern?"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* Discuss pros and cons of applying the pattern in each of the situations you found in the previous step."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Find more applicable patterns"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* Learn other _Gang of Four_ Design patterns to see if they are applicable to the app."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Static Analysis `[LO-StaticAnalysis]`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "Note how this project uses the http://checkstyle.sourceforge.net/[CheckStyle] static analysis tool to confirm compliance with the coding standard."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/qualityAssurance/staticAnalysis/[se-edu/se-book: QA: Static Analysis]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use CheckStyle locally to check style compliance"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "* Install the CheckStyle plugin for your IDE and use it to check compliance of your code with our style rules (given in `/config/checkstyle/checkstyle.xml`)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Do Code Reviews `[LO-CodeReview]`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how some PRs in this project have been reviewed by other developers. Here is an https://github.com/se-edu/addressbook-level4/pull/147[example]."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "* Also note how we have used https://www.codacy.com[Codacy] to do automate some part of the code review workload (https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]])"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Review a PR"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "* Review PRs created by team members."
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 11,
      "-": 255
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003d SSENISUB - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-T13-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "By: `Team T13-2`      Since: `Nov 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "SSENISUB is intended for organizations who follows a strict hierarchical structure to manage their manpower and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "allows the staff to use this as contact book."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ".  Download the latest `SSENISUB.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for SSENISUB software."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "   e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* *`list`* : lists all staff"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John Street Blk 123, #01-01 d/Tech m/Alice Tan` :"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "adds a staff named `John Doe` to SSENISUB."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* **`delete`**`3` : deletes the 3rd staff shown in the current list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "`{nbsp}` (i.e. 0 times), `t/staff`, `t/manager` etc."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* Adding a \u0027p\u0027 infront of the parameter private. e.g. pp/PHONE makes the phone number private to the other user."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "abtyx"
        },
        "content": "* Only `PHONE`, `EMAIL` and `ADDRESS` fields can be initialized as private."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "*Fields restrictions*"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"20%,\u003c80%\"]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "|NAME | Names should only contain alphabetical characters and spaces, and should not be blank"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "|PHONE | Phone numbers should only contain numbers, starts with digit \u00276\u0027, \u00278\u0027 or \u00279\u0027, and should be 8 digits long"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "|EMAIL | Emails should be of the format local-part@domain and adhere to the following constraints: +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " 1. The local-part should only contain alphanumeric characters and these special characters, excluding the parentheses,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " (!#$%\u0026\u0027*+/\u003d?`{}~^.-), 1 to 50 characters long  +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " 2. This is followed by a \u0027@\u0027 and then a domain name. +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " The domain name must: +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " - be at least 2 characters long +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " - start and end with alphanumeric characters +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "|ADDRESS | Addresses can take any values, should not be blank, and should be 1 to 50 characters long"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "|SALARY | Salary should only contain integers with no spaces or commas"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "|OT HOUR | Overtime hours should only contain numbers up to two decimal places with no spaces or commas"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "|OT RATE | Overtime rate should only contain numbers up to two decimal places with no spaces or commas"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "|DEDUCTIBLE | Deductible should only contain numbers up to two decimal places with no spaces or commas"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "|DEPARTMENT | Department should only contain alphabetic characters and spaces, should not be blank,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "and should be 1 to 30 characters long"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "|MANAGER | Manager should only contain alphabetic characters and spaces, should not be blank,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "and should be 1 to 50 characters long"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "|RATING | Rating should only contain numbers between 1 to 10"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "|FEEDBACK | Feedback can take any values, should not be blank, and should be 1 to 65 characters long"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "|INDEX | Refers to the index number shown by the staff list command, and must be a positive integer 1, 2, 3, ..."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "// tag::add[]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Adding a staff: `add`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "Adds a staff to SSENISUB +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "Format: `add n/NAME [p]p/PHONE_NUMBER [p]e/EMAIL [p]a/ADDRESS d/DEPARTMENT m/MANAGER [t/TAG]...`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "A staff can have any number of tags (including 0)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "abtyx"
        },
        "content": "[CAUTION]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "`Phone` numbers and `Email` addresses are unique, you will not be able to add a new staff with a pre-existing `Phone` number or `Email` address within SSENISUB"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* `add n/John Doe p/98765432 e/johnd@example.com a/John Street, Block 123, #01-01 d/Accounting m/Marcus Lim t/staff`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/81729817 d/Marketing m/Edmund Tan t/staff`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "// end::add[]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Listing all staff : `list`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Shows a list of all staff in SSENISUB. +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "// tag::edit[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Editing a staff : `edit`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Edits an existing staff in SSENISUB. +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [s/SALARY] [oth/OTHOUR] [otr/OTRATE] [de/DEDUCTIBLES] [d/DEPARTMENT] [m/MANAGER] [t/TAG]...`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* Edits the staff at the specified `INDEX`. The index refers to the index number shown in the displayed staff list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* Staff has 4 additional editable fields: salary, overtime hours (ot hours), overtime rate (ot rate) and pay deductibles."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* When editing tags, the existing tags of the staff will be removed, i.e. adding of tags is not cumulative."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* You can remove all the staff\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com s/1000` +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "Edits the phone number, email address, salary of the 1st staff to be `91234567`, `johndoe@example.com` and `1000`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "respectively."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "Edits the name of the 2nd staff to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "// end::edit[]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Deleting a staff : `delete`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Deletes the specified staff from SSENISUB. +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "****"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* Deletes the staff at the specified `INDEX`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* The index refers to the index number shown in the displayed staff list."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "****"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Deletes the 2nd staff in SSENISUB."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Deletes the 1st staff in the results of the `find` command."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Selecting a staff : `select`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Selects the staff identified by the index number used in the displayed staff list. +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "****"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* Selects the staff and loads the Google search page the staff at the specified `INDEX`."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* The index refers to the index number shown in the displayed staff list."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* When a staff is selected, *net salary* is being displayed instead of gross salary"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "****"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Selects the 2nd staff in SSENISUB."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Selects the 1st staff in the results of the `find` command."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "// tag::feedback[]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "\u003d\u003d\u003d Giving feedback to a staff: `feedback`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Provides feedback for an existing staff in SSENISUB +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Format: `feedback INDEX fb/FEEDBACK`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "****"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* Updates the feedback of the staff at specified `INDEX`. The index refers to the index number shown in the displayed"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "staff list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "* The feedback field must be provided."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "* Profanities are not allowed, even if it is encapsulated within a word."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "* Profanities written in leetspeak will be caught as well."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "****"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "* `feedback 1 fb/You are great!` +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "Gives the 1st staff a feedback of \"You are great!\"."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "// end::feedback[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// tag::rate[]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Rating a staff: `rate`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Rates an existing staff in SSENISUB +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Format: `rate INDEX r/RATING`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "****"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* Rates the staff at the specified `INDEX`. The index refers to the index number shown in the displayed staff list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* The rating field must be provided."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* Ratings can only be from 1 - 10."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* Existing values will be updated to the input values if they are different."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "****"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* `rate 3 r/8` +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Rates the 3rd staff of a rating 8."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// end::rate[]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// tag::privacy[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Setting private fields: `privacy`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Sets the mentioned field into a private field (displays as \u0027private\u0027 on staff panel). +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Format: `privacy INDEX [p/ y or n] [e/ y or n] [a/ y or n]`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "****"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* Modifies the privacy of the information of the staff at the specified `INDEX`."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* The index refers to the index number shown in the displayed staff list."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* Only Phone, Email and Address can be set to private."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* \u0027y\u0027 means setting to private and \u0027n\u0027 means setting to public."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* Coming in v2.0: View private fields +"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** With the authorization level features implemented, a user with high enough level of authority"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "will be able to see the actual values of the private field (instead of \u0027private\u0027). +"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "****"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* `privacy 1 p/y a/n` +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Sets the `Phone` number and `Address` of the 1st staff  in SSENISUB to private and public respectively."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* `privacy 4 e/n p/n` +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Sets the `Email` and `Phone` number of the 4th staff in SSENISUB to public."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// end::privacy[]"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "// tag::find-n[]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003d\u003d\u003d Locating staff by name: `find-n`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Finds staff whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "Format: `find-n KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* The search is case insensitive, e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* The order of the keywords does not matter, e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* Only full words will be matched, e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* Staff matching at least one keyword will be returned (i.e. `OR` search), e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* `find-n John` +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "Returns `John` and `John Doe`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* `find-n Betsy Tim John` +"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Returns any staff having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "// end::find-n[]"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "// tag::find-e[]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003d\u003d\u003d Locating staff by email: `find-e`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "Finds staff whose email contain any of the given keywords. +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "Format: `find-e KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "****"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* The search is case insensitive, e.g `hans@example.com` will match `Hans@example.com`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* The order of the keywords does not matter, e.g. `hans@example.com` `dan@example.com` will match `dan@example.com`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "`hans@example.com`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* Only the email is searched."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* Only full words will be matched, e.g. `Han@example.com` will not match `Hans@example.com`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "****"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* `find-e John@example.com` +"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "Returns `John`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* `find-n Betsy@example.com Tim@example.com` +"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "Returns any staff having emails `Betsy`, `Tim`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "// end::find-e[]"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "// tag::find-d[]"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003d\u003d\u003d Locating staff by department: `find-d`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "Finds staff whose department contain any of the given keywords. +"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "Format: `find-d KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "****"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* The search is case insensitive, e.g `accounting` will match `AccountinG`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* The order of the keywords does not matter, e.g. `Accounting Tech` will match `Tech Accounting`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* Only the department is searched."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* Only full words will be matched, e.g. `Account` will not match `Accounting`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* Staff matching at least one keyword will be returned (i.e. `OR` search)"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "****"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* `find-d Accounting` +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "Returns any staff in Accounting Department `John`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* `find-d Accounting Tech` +"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "Returns any staff in Accounting or Tech Department `John`, `Betsy`, `Tim`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "// end::find-d[]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "// tag::find-m[]"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003d\u003d\u003d Locating staff by manager: `find-m`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "Finds manager whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "Format: `find-m KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* Only the manager is searched."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* Manager matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`,"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "`Bo Yang`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* `find-m John` +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* `find-m Betsy Tim John` +"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "Returns any manager having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "// end::find-m[]"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// tag::sort[]"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Sorting all staff by name : `sort`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Sorts the staff list by name. +"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Format: `sort`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* Sorts by favourite then by name, favourite staffs stay on top of the list"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "****"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// end::sort[]"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// tag::sortDept[]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Sorting all staff by department : `sortDept`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Sorts the staff list by department. +"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Format: `sortDept`"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "****"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* Sorts by department then by favourite then by name"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "****"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// end::sortDept[]"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// tag::sortRatingDown[]"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Sorting all staff by rating : `sortRatingDown`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Sorts the staff list by rating from highest to lowest. +"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Format: `sortRatingDown` or `sortRating`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "****"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* Sorts by rating (highest-lowest) then by favourite then by name"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "****"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// end::sortRatingDown[]"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// tag::sortRatingUp[]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Sorting all staff by rating : `sortRatingUp`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Sorts the staff list by rating from lowest to highest. +"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Format: `sortRatingUp`"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "****"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* Sorts by rating (lowest-highest) then by favourite then by name"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "****"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// end::sortRatingUp[]"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// tag::favourite[]"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Favouriting a staff : `favourite`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Favourites the specified staff and moves it up to the top of the list. +"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Format: `favourite INDEX` or `fav INDEX`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "****"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* Favourites the staff at the specified `INDEX`."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* The index refers to the index number shown in the displayed staff list."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* Staff at the specified `INDEX` needs to not be on the favourite list"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "`favourite 2` +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Favourites the 2nd staff in SSENISUB."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "`fav 1` +"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Favourites the 1st staff in the results of the `find` command."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// end::favourite[]"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// tag::unfavourite[]"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Unfavouriting a staff : `unfavourite`"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Favourites the specified staff and moves it up to the top of the list. +"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Format: `unfavourite INDEX` or `unfav INDEX`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* Removes the staff at the specified `INDEX` from favourite list."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* The index refers to the index number shown in the displayed staff list."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* Staff at the specified `INDEX` needs to be on the favourite list"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "`unfavourite 2` +"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Removes the 2nd staff from favourite list."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "`unfav 1` +"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Removes the 1st staff in the results of the `find` command from favourite list."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// end::unfavourite[]"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Restores SSENISUB to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "Undoable commands: those commands that modify SSENISUB\u0027s content (`add`, `delete`, `edit`, `rate`, `feedback`, `privacy`, and `clear`)."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Counting the number of staff [coming in v2.0]: `count`"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Count the number of staff in specific department in SSENISUB +"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Format: `count d/DEPARTMENT`"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* `count d/accounting` +"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "// tag::lockunlock[]"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Locking SSENISUB [coming in v2.0]: `lock`"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "Locks SSENISUB with a specified password. +"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Format: `lock PASSWORD`"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Unlocking SSENISUB [coming in v2.0]: `unlock`"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "Unlocks SSENISUB with a specified password. +"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Format: `unlock PASSWORD`"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "//end::lockunlock[]"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "abtyx"
        },
        "content": "// tag::login[]"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "abtyx"
        },
        "content": "\u003d\u003d\u003d Authorization levels for features [coming in v2.0]: `login`, `logout`"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "abtyx"
        },
        "content": "Allows a user to log into the SSENISUB system with different authorization levels. +"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "abtyx"
        },
        "content": "Format: `login USERNAME PASSWORD`, `logout`"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "abtyx"
        },
        "content": "****"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "abtyx"
        },
        "content": "* In future versions, we plan to have features locked by authorization level, as we intend for"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "abtyx"
        },
        "content": "SSENISUB to be used by all staff within the same Organization, it makes more sense if only"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "abtyx"
        },
        "content": "a HR Manager is allowed to add or delete staff, or only the staff himself to be able to change his"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "abtyx"
        },
        "content": "own information privacy settings."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "abtyx"
        },
        "content": "* Implementation of this authorization level feature will then allow us to develop new features makes"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "abtyx"
        },
        "content": "the organization hierachy more understandable and obvious."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "abtyx"
        },
        "content": "****"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "abtyx"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "abtyx"
        },
        "content": "* `login AmyBee 123456` +"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "abtyx"
        },
        "content": "* `logout`"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "abtyx"
        },
        "content": "// end::login[]"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Encrypting data files [coming in v2.0]"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Clears all entries from SSENISUB. +"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "SSENISUB data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous SSENISUB folder."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* *Add* `add n/NAME [p]p/PHONE_NUMBER [p]e/EMAIL [p]a/ADDRESS d/DEPARTMENT m/MANAGER [t/TAG]...` +"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "e.g. `add n/James Ho p/91829309 e/jamesho@example.com a/123, Clementi Rd, 1234665 d/Accounting m/David Choo t/staff`"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [s/SALARY] [oth/OTHOUR] [otr/OTRATE] [de/DEDUCTIBLES] [d/DEPARTMENT] [m/MANAGER] [t/TAG].."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ".` +"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com oth/10`"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* *Feedback* : `feedback INDEX fb/FEEDBACK` +"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "e.g. `feedback 1 fb/Excellent job!`"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* *Rate* : `rate INDEX r/RATING` +"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "e.g. `rate 1 r/8`"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* *Privacy* : `privacy INDEX [p/ y or n] [e/ y or n] [a/ y or n]` +"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "e.g. `privacy 2 p/y a/n`"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* *Find by Name* : `find-n KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "e.g. `find-n James Jake`"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* *Find by Email* : `find-e KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "e.g. `find-e johnd@example.com`"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* *Find by Department* : `find-d KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "e.g. `find-d Accounting`"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* *Find by Manager* : `find-m KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "e.g. `find-m Moses Ben`"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* *Sort by Name* : `sort`"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* *Sort by Department* : `sortDept`"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* *Sort by Rating from Highest to Lowest* : `sortRatingDown` or `sortRating`"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* *Sort by Rating from Lowest to Highest* : `sortRatingUp`"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* *Favourite* : `favourite INDEX` or `fav INDEX` +"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "e.g. `favourite 1` or `fav 2`"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* *Unfavourite* : `unfavourite INDEX` or `unfav INDEX` +"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "e.g. `unfavourite 1` or `unfav 2`"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* *Lock SSENISUB* [coming in v2.0] : `lock PASSWORD`"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* *Unlock SSENISUB* [coming in v2.0]: `unlock PASSWORD`"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* *Login SSENISUB* [coming in v2.0] : `login USERNAME PASSWORD`"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* *Logout SSENISUB* [coming in v2.0] : `logout`"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* *Exit* : `exit`"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 240,
      "IamRENCE": 27,
      "NgeowXiuQi": 3,
      "abtyx": 23,
      "DanKhoo": 126,
      "-": 194
    }
  },
  {
    "path": "docs/UsingCheckstyle.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Checkstyle-IDEA"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configuring Checkstyle-IDEA"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ". Install the Checkstyle-IDEA plugin by going to `File` \u003e `Settings` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS). +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Select `Plugins`, press `Browse Repository`, and find the plugin. +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Restart the IDE to complete the installation."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `File` \u003e `Settings...` \u003e `Other Settings` \u003e `Checkstyle`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ". Set `Scan Scope`  to `Only Java sources (including tests)`, so that the plugin will run checkstyle for our test source codes as well"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ". Ensure that the `Checkstyle version` is set to `8.1`. This is the same version that we are using inside Gradle, so that you won\u0027t get any errors due to version incompatibility"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * If `Checkstyle version` is not set to `8.1`, set it to version `8.1` and click `Apply`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "image::checkstyle-idea-scan-scope.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ". Click the plus sign under `Configuration File`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ". Enter an arbitrary description e.g. SSENISUB"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Use a local Checkstyle file`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the checkstyle configuration file found at `config/checkstyle/checkstyle.xml`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Next` \u003e `Finish`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ". Mark `Active` for the newly imported check configuration"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::checkstyle-idea-configuration.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Checkstyle-IDEA"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: When importing `checkstyle.xml`, Checkstyle-IDEA plugin complains that `The Checkstyle rules file could not be parsed. ... The file has been blacklisted for 60s.`**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: `checkstyle.xml` is written for a particular version, but the plugin was not configured to the correct version."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Ensure that you have selected the correct `Checkstyle version` that matches the version in `build.gradle` and have clicked `Apply`, as `checkstyle.xml` is written for Gradle\u0027s checkstyle."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: After setting up `checkstyle.xml`, Checkstyle-IDEA plugin does not seem to highlight the errors / real-time scanning seems broken.**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: The plugin may not immediately run after setting it up."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Restart the IDE."
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "-": 41
    }
  },
  {
    "path": "docs/UsingGradle.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Gradle"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "https://gradle.org/[Gradle] is a build automation tool. It can automate build-related tasks such as"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Running tests"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* Managing library dependencies"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* Analyzing code for style compliance"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "The gradle configuration for this project is defined in the _build script_ link:../build.gradle[`build.gradle`]."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "To learn more about gradle build scripts, refer https://docs.gradle.org/current/userguide/tutorial_using_tasks.html[Build Scripts Basics]."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Gradle Commands"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "To run a Gradle command, open a command window on the project folder and enter the Gradle command. Gradle commands look like this:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* On Windows: `gradlew \u003ctask1\u003e \u003ctask2\u003e ...` e.g. `gradlew clean allTests`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* On Mac/Linux: `./gradlew \u003ctask1\u003e \u003ctask2\u003e...` e.g."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "`./gradlew clean allTests`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "If you do not specify any tasks, Gradlew will run the default tasks `clean` `headless` `allTests` `coverage`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Cleaning the Project"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* *`clean`* +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the files created during the previous build tasks (e.g. files in the `build` folder). e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*`clean` to force Gradle to execute a task*: +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "When running a Gradle task, Gradle will try to figure out if the task needs running at all. If Gradle determines that the output of the task will be same as the previous time, it will not run the task. For example, it will not build the JAR file again if the relevant source files have not changed since the last time the JAR file was built. If we want to force Gradle to run a task, we can combine that task with `clean`. Once the build files have been `clean` ed, Gradle has no way to determine if the output will be same as before, so it will be forced to execute the task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Creating the JAR file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* *`shadowJar`* +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "Creates the `SSENISUB.jar` file in the `build/jar` folder, _if the current file is outdated_. +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew shadowJar`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "To force Gradle to create the JAR file even if the current one is up-to-date, you can \u0027`clean`\u0027 first. +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew clean shadowJar`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "*Why do we create a fat JAR?* If we package only our own class files into the JAR file, it will not work properly unless the user has all the other JAR files (i.e. third party libraries) our classes depend on, which is rather inconvenient. Therefore, we package all dependencies into a single JAR files, creating what is also known as a _fat_ JAR file. To create a fat JAR file, we use the Gradle plugin https://github.com/johnrengelman/shadow[shadow jar]."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Rendering AsciiDoc files"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* **`asciidoctor`** +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Converts AsciiDoc files in `docs` to HTML format. Generated HTML files can be found in `build/docs`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* **`deployOfflineDocs`** +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Updates the offline user guide, and its associated files, used by the Help window in the application. Deployed HTML files and images can be found in `src/main/resources/docs`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* *`run`* +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Builds and runs the application."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* *`runShadow`* +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running code style checks"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`** +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the main code base"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleTest`** +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the test code base"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "The set of code style rules implemented can be found in `config/checkstyle/checkstyle.xml`. To enable _exceptions_ to code styles, add in the comment `//CODESTYLE.OFF: RuleName` at the start of the section and `//CODESTYLE.ON: RuleName` at the end of the section."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "[[Running-Tests]]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "* **`allTests`** +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Runs all tests."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* **`guiTests`** +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Runs all tests in the `seedu.address.ui` and `systemtests` package"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* **`nonGuiTests`** +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "Runs all non-GUI tests in the `seedu.address`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "package"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* **`headless`** +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Sets the test mode as _headless_. The mode is effective for that Gradle run only so it should be combined with other test tasks."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in headless mode due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some examples:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew headless allTests` -- Runs all tests in headless mode"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew clean nonGuiTests` -- Cleans the project and runs non-GUI"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "tests"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Dependencies"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to run these Gradle tasks manually as they are called automatically by other relevant Gradle tasks."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileJava`** +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to compile and run the main program, and download any missing dependencies before compiling the classes. +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "`allprojects` -\u003e `dependencies` -\u003e `compile` for the list of dependencies required."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileTestJava`** +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to perform testing, and download any missing dependencies before compiling the test classes. +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e `allprojects` -\u003e `dependencies` -\u003e `testCompile` for the list of dependencies required."
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "-": 112
    }
  },
  {
    "path": "docs/stylesheets/asciidoctor.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/* Asciidoctor default stylesheet | MIT License | http://asciidoctor.org */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "/* Remove comment around @import statement below when using as a custom stylesheet */"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/*@import \"https://fonts.googleapis.com/css?family\u003dOpen+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700\";*/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "audio,canvas,video{display:inline-block}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "audio:not([controls]){display:none;height:0}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "[hidden],template{display:none}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "script{display:none!important}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "body{margin:0}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "a{background:transparent}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "a:focus{outline:thin dotted}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "a:active,a:hover{outline:0}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2em;margin:.67em 0}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "abbr[title]{border-bottom:1px dotted}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "b,strong{font-weight:bold}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "dfn{font-style:italic}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "mark{background:#ff0;color:#000}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "code,kbd,pre,samp{font-family:monospace;font-size:1em}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "pre{white-space:pre-wrap}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "q{quotes:\"\\201C\" \"\\201D\" \"\\2018\" \"\\2019\"}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "small{font-size:80%}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "sup{top:-.5em}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "sub{bottom:-.25em}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "img{border:0}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "svg:not(:root){overflow:hidden}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "figure{margin:0}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "legend{border:0;padding:0}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "button,input{line-height:normal}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "button,select{text-transform:none}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "button,html input[type\u003d\"button\"],input[type\u003d\"reset\"],input[type\u003d\"submit\"]{-webkit-appearance:button;cursor:pointer}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "button[disabled],html input[disabled]{cursor:default}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"checkbox\"],input[type\u003d\"radio\"]{box-sizing:border-box;padding:0}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"search\"]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"search\"]::-webkit-search-cancel-button,input[type\u003d\"search\"]::-webkit-search-decoration{-webkit-appearance:none}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "textarea{overflow:auto;vertical-align:top}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "table{border-collapse:collapse;border-spacing:0}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "*,*:before,*:after{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "html,body{font-size:100%}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "body{background:#fff;color:rgba(0,0,0,.8);padding:0;margin:0;font-family:\"Noto Serif\",\"DejaVu Serif\",serif;font-weight:400;font-style:normal;line-height:1;position:relative;cursor:auto}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "a:hover{cursor:pointer}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "img,object,embed{max-width:100%;height:auto}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "object,embed{height:100%}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "img{-ms-interpolation-mode:bicubic}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".left{float:left!important}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".right{float:right!important}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".text-left{text-align:left!important}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".text-right{text-align:right!important}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".text-center{text-align:center!important}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".text-justify{text-align:justify!important}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".hide{display:none}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "body{-webkit-font-smoothing:antialiased}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "img,object,svg{display:inline-block;vertical-align:middle}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "textarea{height:auto;min-height:50px}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "select{width:100%}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".center{margin-left:auto;margin-right:auto}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".spread{width:100%}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "p.lead,.paragraph.lead\u003ep,#preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{font-size:1.21875em;line-height:1.6}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".subheader,.admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0;direction:ltr}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "a{color:#2156a5;text-decoration:underline;line-height:inherit}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "a:hover,a:focus{color:#1d4b8f}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "a img{border:none}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "p{font-family:inherit;font-weight:400;font-size:1em;line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "p aside{font-size:.875em;line-height:1.35;font-style:italic}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-weight:300;font-style:normal;color:#ba3925;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1.0125em}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "h1 small,h2 small,h3 small,#toctitle small,.sidebarblock\u003e.content\u003e.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2.125em}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "h2{font-size:1.6875em}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.375em}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "h4,h5{font-size:1.125em}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "h6{font-size:1em}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "hr{border:solid #ddddd8;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em;height:0}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "em,i{font-style:italic;line-height:inherit}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "strong,b{font-weight:bold;line-height:inherit}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "small{font-size:60%;line-height:inherit}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "code{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;font-weight:400;color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "ul,ol,dl{font-size:1em;line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "ul,ol,ul.no-bullet,ol.no-bullet{margin-left:1.5em}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0;font-size:1em}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "ul.square li ul,ul.circle li ul,ul.disc li ul{list-style:inherit}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "ul.square{list-style-type:square}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "ul.circle{list-style-type:circle}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "ul.disc{list-style-type:disc}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "ul.no-bullet{list-style:none}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "dl dt{margin-bottom:.3125em;font-weight:bold}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "abbr,acronym{text-transform:uppercase;font-size:90%;color:rgba(0,0,0,.8);border-bottom:1px dotted #ddd;cursor:help}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "abbr{text-transform:none}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 1.1875em;border-left:1px solid #ddd}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite{display:block;font-size:.9375em;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite:before{content:\"\\2014 \\0020\"}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite a,blockquote cite a:visited{color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote,blockquote p{line-height:1.6;color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2.75em}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "h2{font-size:2.3125em}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.6875em}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "h4{font-size:1.4375em}}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "table{background:#fff;margin-bottom:1.25em;border:solid 1px #dedede}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "table thead,table tfoot{background:#f7f8f7;font-weight:bold}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;color:rgba(0,0,0,.8);text-align:left}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "table tr th,table tr td{padding:.5625em .625em;font-size:inherit;color:rgba(0,0,0,.8)}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "table tr.even,table tr.alt,table tr:nth-of-type(even){background:#f8f8f7}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{display:table-cell;line-height:1.6}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "body{tab-size:4}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2;word-spacing:-.05em}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "h1 strong,h2 strong,h3 strong,#toctitle strong,.sidebarblock\u003e.content\u003e.title strong,h4 strong,h5 strong,h6 strong{font-weight:400}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".clearfix:before,.clearfix:after,.float-group:before,.float-group:after{content:\" \";display:table}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".clearfix:after,.float-group:after{clear:both}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "*:not(pre)\u003ecode{font-size:.9375em;font-style:normal!important;letter-spacing:0;padding:.1em .5ex;word-spacing:-.15em;background-color:#f7f7f8;-webkit-border-radius:4px;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "pre,pre\u003ecode{line-height:1.45;color:rgba(0,0,0,.9);font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;font-weight:400;text-rendering:optimizeSpeed}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq{color:rgba(51,51,51,.8)}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "kbd{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;display:inline-block;color:rgba(0,0,0,.8);font-size:.65em;line-height:1.45;background-color:#f7f7f7;border:1px solid #ccc;-webkit-border-radius:3px;border-radius:3px;-webkit-box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em white inset;box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em #fff inset;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq kbd:first-child{margin-left:0}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq kbd:last-child{margin-right:0}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".menuseq,.menu{color:rgba(0,0,0,.8)}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:before,b.button:after{position:relative;top:-1px;font-weight:400}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:before{content:\"[\";padding:0 3px 0 2px}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:after{content:\"]\";padding:0 2px 0 3px}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "p a\u003ecode:hover{color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "#header,#content,#footnotes,#footer{width:100%;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;max-width:62.5em;*zoom:1;position:relative;padding-left:.9375em;padding-right:.9375em}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "#header:before,#header:after,#content:before,#content:after,#footnotes:before,#footnotes:after,#footer:before,#footer:after{content:\" \";display:table}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "#header:after,#content:after,#footnotes:after,#footer:after{clear:both}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "#content{margin-top:1.25em}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "#content:before{content:none}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:first-child{color:rgba(0,0,0,.85);margin-top:2.25rem;margin-bottom:0}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:first-child+#toc{margin-top:8px;border-top:1px solid #ddddd8}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:only-child,body.toc2 #header\u003eh1:nth-last-child(2){border-bottom:1px solid #ddddd8;padding-bottom:8px}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details{border-bottom:1px solid #ddddd8;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-left:.25em;color:rgba(0,0,0,.6);display:-ms-flexbox;display:-webkit-flex;display:flex;-ms-flex-flow:row wrap;-webkit-flex-flow:row wrap;flex-flow:row wrap}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details span:first-child{margin-left:-.125em}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details span.email a{color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br{display:none}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span:before{content:\"\\00a0\\2013\\00a0\"}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span.author:before{content:\"\\00a0\\22c5\\00a0\";color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span#revremark:before{content:\"\\00a0|\\00a0\"}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "#header #revnumber{text-transform:capitalize}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "#header #revnumber:after{content:\"\\00a0\"}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "#content\u003eh1:first-child:not([class]){color:rgba(0,0,0,.85);border-bottom:1px solid #ddddd8;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.25rem}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "#toc{border-bottom:1px solid #efefed;padding-bottom:.5em}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "#toc\u003eul{margin-left:.125em}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul.sectlevel0\u003eli\u003ea{font-style:italic}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul{font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;list-style-type:none}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "#toc li{line-height:1.3334;margin-top:.3334em}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "#toc a{text-decoration:none}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "#toc a:active{text-decoration:underline}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "#toctitle{color:#7a2518;font-size:1.2em}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){#toctitle{font-size:1.375em}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2{padding-left:15em;padding-right:0}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2{margin-top:0!important;background-color:#f8f8f7;position:fixed;width:15em;left:0;top:0;border-right:1px solid #efefed;border-top-width:0!important;border-bottom-width:0!important;z-index:1000;padding:1.25em 1em;height:100%;overflow:auto}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 #toctitle{margin-top:0;margin-bottom:.8rem;font-size:1.2em}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2\u003eul{font-size:.9em;margin-bottom:0}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul ul{margin-left:0;padding-left:1em}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right{padding-left:0;padding-right:15em}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid #efefed;left:auto;right:0}}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:1280px){body.toc2{padding-left:20em;padding-right:0}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2{width:20em}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 #toctitle{font-size:1.375em}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2\u003eul{font-size:.95em}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul ul{padding-left:1.25em}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right{padding-left:0;padding-right:20em}}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "#footer{max-width:100%;background-color:rgba(0,0,0,.8);padding:1.25em}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "#footer-text{color:rgba(255,255,255,.8);line-height:1.44}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1{padding-bottom:.625em}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){.sect1{padding-bottom:1.25em}}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1+.sect1{border-top:1px solid #efefed}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.anchor,h2\u003ea.anchor,h3\u003ea.anchor,#toctitle\u003ea.anchor,.sidebarblock\u003e.content\u003e.title\u003ea.anchor,h4\u003ea.anchor,h5\u003ea.anchor,h6\u003ea.anchor{position:absolute;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decoration:none!important;visibility:hidden;text-align:center;font-weight:400}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.anchor:before,h2\u003ea.anchor:before,h3\u003ea.anchor:before,#toctitle\u003ea.anchor:before,.sidebarblock\u003e.content\u003e.title\u003ea.anchor:before,h4\u003ea.anchor:before,h5\u003ea.anchor:before,h6\u003ea.anchor:before{content:\"\\00A7\";font-size:.85em;display:block;padding-top:.1em}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1:hover\u003ea.anchor,#content h1\u003ea.anchor:hover,h2:hover\u003ea.anchor,h2\u003ea.anchor:hover,h3:hover\u003ea.anchor,#toctitle:hover\u003ea.anchor,.sidebarblock\u003e.content\u003e.title:hover\u003ea.anchor,h3\u003ea.anchor:hover,#toctitle\u003ea.anchor:hover,.sidebarblock\u003e.content\u003e.title\u003ea.anchor:hover,h4:hover\u003ea.anchor,h4\u003ea.anchor:hover,h5:hover\u003ea.anchor,h5\u003ea.anchor:hover,h6:hover\u003ea.anchor,h6\u003ea.anchor:hover{visibility:visible}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.link,h2\u003ea.link,h3\u003ea.link,#toctitle\u003ea.link,.sidebarblock\u003e.content\u003e.title\u003ea.link,h4\u003ea.link,h5\u003ea.link,h6\u003ea.link{color:#ba3925;text-decoration:none}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.link:hover,h2\u003ea.link:hover,h3\u003ea.link:hover,#toctitle\u003ea.link:hover,.sidebarblock\u003e.content\u003e.title\u003ea.link:hover,h4\u003ea.link:hover,h5\u003ea.link:hover,h6\u003ea.link:hover{color:#a53221}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videoblock{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{text-rendering:optimizeLegibility;text-align:left;font-family:\"Noto Serif\",\"DejaVu Serif\",serif;font-size:1rem;font-style:italic}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock\u003ecaption.title{white-space:nowrap;overflow:visible;max-width:0}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".paragraph.lead\u003ep,#preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock #preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{font-size:inherit}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable{border-collapse:separate;border:0;background:none;width:100%}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.icon{text-align:center;width:80px}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.icon img{max-width:none}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.icon .title{font-weight:bold;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;text-transform:uppercase}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #ddddd8;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.content\u003e:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content{border-style:solid;border-width:1px;border-color:#e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e.content\u003e.title{color:#7a2518;margin-top:0;text-align:center}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:last-child\u003e:last-child,.exampleblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content\u003e:last-child\u003e:last-child,.sidebarblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre,.listingblock pre:not(.highlight),.listingblock pre[class\u003d\"highlight\"],.listingblock pre[class^\u003d\"highlight \"],.listingblock pre.CodeRay,.listingblock pre.prettyprint{background:#f7f7f8}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock .literalblock pre,.sidebarblock .listingblock pre:not(.highlight),.sidebarblock .listingblock pre[class\u003d\"highlight\"],.sidebarblock .listingblock pre[class^\u003d\"highlight \"],.sidebarblock .listingblock pre.CodeRay,.sidebarblock .listingblock pre.prettyprint{background:#f2f1f1}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{-webkit-border-radius:4px;border-radius:4px;word-wrap:break-word;padding:1em;font-size:.8125em}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre.nowrap,.literalblock pre[class].nowrap,.listingblock pre.nowrap,.listingblock pre[class].nowrap{overflow-x:auto;white-space:pre;word-wrap:normal}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:.90625em}}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:1280px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:1em}}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock.output pre{color:#f7f7f8;background-color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.highlightjs{padding:0}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.highlightjs\u003ecode{padding:1em;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.prettyprint{border-width:0}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock\u003e.content{position:relative}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock code[data-lang]:before{display:none;content:attr(data-lang);position:absolute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform:uppercase;color:#999}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock:hover code[data-lang]:before{display:block}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock.terminal pre .command:before{content:attr(data-prompt);padding-right:.5em;color:#999}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock.terminal pre .command:not([data-prompt]):before{content:\"$\"}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable{border-collapse:separate;border:0;margin-bottom:0;background:none}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable td{vertical-align:top;padding-top:0;padding-bottom:0;line-height:1.45}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable td.code{padding-left:.75em;padding-right:0}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "pre.pygments .lineno,table.pyhltable td:not(.code){color:#999;padding-left:0;padding-right:.5em;border-right:1px solid #ddddd8}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "pre.pygments .lineno{display:inline-block;margin-right:.25em}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable .linenodiv{background:none!important;padding-right:0!important}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock{margin:0 1em 1.25em 1.5em;display:table}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock\u003e.title{margin-left:-1.5em;margin-bottom:.75em}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote,.quoteblock blockquote p{color:rgba(0,0,0,.85);font-size:1.15rem;line-height:1.75;word-spacing:.1em;letter-spacing:0;font-style:italic;text-align:justify}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote{margin:0;padding:0;border:0}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote:before{content:\"\\201c\";float:left;font-size:2.75em;font-weight:bold;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px 2px rgba(0,0,0,.1)}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote\u003e.paragraph:last-child p{margin-bottom:0}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution{margin-top:.5em;margin-right:.5ex;text-align:right}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock{margin-left:0;margin-right:0;padding:.5em 0;border-left:3px solid rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock blockquote{padding:0 0 0 .75em}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock blockquote:before{display:none}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock{margin:0 1em 1.25em 1em}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock pre{font-family:\"Open Sans\",\"DejaVu Sans\",sans;font-size:1.15rem;color:rgba(0,0,0,.85);font-weight:300;text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock pre strong{font-weight:400}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution,.verseblock .attribution{font-size:.9375em;line-height:1.45;font-style:italic}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution br,.verseblock .attribution br{display:none}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution cite,.verseblock .attribution cite{display:block;letter-spacing:-.025em;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract{margin:0 0 1.25em 0;display:block}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract blockquote,.quoteblock.abstract blockquote p{text-align:left;word-spacing:0}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract blockquote:before,.quoteblock.abstract blockquote p:first-of-type:before{display:none}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock{max-width:100%;border-collapse:separate}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock td\u003e.paragraph:last-child p\u003ep:last-child,table.tableblock th\u003ep:last-child,table.tableblock td\u003ep:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all th.tableblock,table.grid-all td.tableblock{border-width:0 1px 1px 0}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all tfoot\u003etr\u003eth.tableblock,table.grid-all tfoot\u003etr\u003etd.tableblock{border-width:1px 1px 0 0}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-cols th.tableblock,table.grid-cols td.tableblock{border-width:0 1px 0 0}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all *\u003etr\u003e.tableblock:last-child,table.grid-cols *\u003etr\u003e.tableblock:last-child{border-right-width:0}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-rows th.tableblock,table.grid-rows td.tableblock{border-width:0 0 1px 0}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all tbody\u003etr:last-child\u003eth.tableblock,table.grid-all tbody\u003etr:last-child\u003etd.tableblock,table.grid-all thead:last-child\u003etr\u003eth.tableblock,table.grid-rows tbody\u003etr:last-child\u003eth.tableblock,table.grid-rows tbody\u003etr:last-child\u003etd.tableblock,table.grid-rows thead:last-child\u003etr\u003eth.tableblock{border-bottom-width:0}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-rows tfoot\u003etr\u003eth.tableblock,table.grid-rows tfoot\u003etr\u003etd.tableblock{border-width:1px 0 0 0}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-all{border-width:1px}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-sides{border-width:0 1px}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-topbot{border-width:1px 0}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-left,td.halign-left{text-align:left}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-right,td.halign-right{text-align:right}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-center,td.halign-center{text-align:center}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-top,td.valign-top{vertical-align:top}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-bottom,td.valign-bottom{vertical-align:bottom}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-middle,td.valign-middle{vertical-align:middle}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "table thead th,table tfoot th{font-weight:bold}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "tbody tr th{display:table-cell;line-height:1.6;background:#f7f8f7}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "tbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{color:rgba(0,0,0,.8);font-weight:bold}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "p.tableblock\u003ecode:only-child{background:none;padding:0}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "p.tableblock{font-size:1em}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "td\u003ediv.verse{white-space:pre}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "ol{margin-left:1.75em}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "ul li ol{margin-left:1.5em}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd{margin-left:1.125em}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd:last-child,dl dd:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "ol\u003eli p,ul\u003eli p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:.625em}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "ul.unstyled,ol.unnumbered,ul.checklist,ul.none{list-style-type:none}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "ul.unstyled,ol.unnumbered,ul.checklist{margin-left:.625em}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "ul.checklist li\u003ep:first-child\u003e.fa-square-o:first-child,ul.checklist li\u003ep:first-child\u003e.fa-check-square-o:first-child{width:1em;font-size:.85em}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "ul.checklist li\u003ep:first-child\u003einput[type\u003d\"checkbox\"]:first-child{width:1em;position:relative;top:1px}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline{margin:0 auto .625em auto;margin-left:-1.375em;margin-right:0;padding:0;list-style:none;overflow:hidden}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline\u003eli{list-style:none;float:left;margin-left:1.375em;display:block}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline\u003eli\u003e*{display:block}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ".unstyled dl dt{font-weight:400;font-style:normal}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "ol.arabic{list-style-type:decimal}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "ol.decimal{list-style-type:decimal-leading-zero}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "ol.loweralpha{list-style-type:lower-alpha}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "ol.upperalpha{list-style-type:upper-alpha}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "ol.lowerroman{list-style-type:lower-roman}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "ol.upperroman{list-style-type:upper-roman}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "ol.lowergreek{list-style-type:lower-greek}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".hdlist\u003etable,.colist\u003etable{border:0;background:none}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".hdlist\u003etable\u003etbody\u003etr,.colist\u003etable\u003etbody\u003etr{background:none}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "td.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "td.hdlist1{font-weight:bold;padding-bottom:1.25em}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock+.colist,.listingblock+.colist{margin-top:-.5em}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".colist\u003etable tr\u003etd:first-of-type{padding:0 .75em;line-height:1}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ".colist\u003etable tr\u003etd:last-of-type{padding:.25em 0}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".thumb,.th{line-height:0;display:inline-block;border:solid 4px #fff;-webkit-box-shadow:0 0 0 1px #ddd;box-shadow:0 0 0 1px #ddd}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.left,.imageblock[style*\u003d\"float: left\"]{margin:.25em .625em 1.25em 0}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.right,.imageblock[style*\u003d\"float: right\"]{margin:.25em 0 1.25em .625em}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock\u003e.title{margin-bottom:0}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.thumb,.imageblock.th{border-width:6px}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.thumb\u003e.title,.imageblock.th\u003e.title{padding:0 .125em}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inline-block;line-height:0}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".image.left{margin-right:.625em}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".image.right{margin-left:.625em}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "a.image{text-decoration:none;display:inline-block}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "a.image object{pointer-events:none}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote,sup.footnoteref{font-size:.875em;position:static;vertical-align:super}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote a,sup.footnoteref a{text-decoration:none}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote a:active,sup.footnoteref a:active{text-decoration:underline}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em 0;border-width:1px 0 0 0}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote{padding:0 .375em 0 .225em;line-height:1.3334;font-size:.875em;margin-left:1.2em;text-indent:-1.05em;margin-bottom:.2em}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote a:first-of-type{font-weight:bold;text-decoration:none}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote:last-of-type{margin-bottom:0}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "#content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ".gist .file-data\u003etable{border:0;background:#fff;width:100%;margin-bottom:0}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ".gist .file-data\u003etable td.line-data{width:99%}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "div.unbreakable{page-break-inside:avoid}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ".big{font-size:larger}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ".small{font-size:smaller}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ".underline{text-decoration:underline}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ".overline{text-decoration:overline}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ".line-through{text-decoration:line-through}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ".aqua{color:#00bfbf}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ".aqua-background{background-color:#00fafa}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ".black{color:#000}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ".black-background{background-color:#000}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".blue{color:#0000bf}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ".blue-background{background-color:#0000fa}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ".fuchsia{color:#bf00bf}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ".fuchsia-background{background-color:#fa00fa}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ".gray{color:#606060}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ".gray-background{background-color:#7d7d7d}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ".green{color:#006000}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ".green-background{background-color:#007d00}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ".lime{color:#00bf00}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ".lime-background{background-color:#00fa00}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ".maroon{color:#600000}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ".maroon-background{background-color:#7d0000}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ".navy{color:#000060}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ".navy-background{background-color:#00007d}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ".olive{color:#606000}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ".olive-background{background-color:#7d7d00}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ".purple{color:#600060}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ".purple-background{background-color:#7d007d}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ".red{color:#bf0000}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ".red-background{background-color:#fa0000}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ".silver{color:#909090}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ".silver-background{background-color:#bcbcbc}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".teal{color:#006060}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ".teal-background{background-color:#007d7d}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ".white{color:#bfbfbf}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ".white-background{background-color:#fafafa}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ".yellow{color:#bfbf00}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ".yellow-background{background-color:#fafa00}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "span.icon\u003e.fa{cursor:default}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon [class^\u003d\"fa icon-\"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-note:before{content:\"\\f05a\";color:#19407c}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-tip:before{content:\"\\f0eb\";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-warning:before{content:\"\\f071\";color:#bf6900}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-caution:before{content:\"\\f06d\";color:#bf3400}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-important:before{content:\"\\f06a\";color:#bf0000}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]{display:inline-block;color:#fff!important;background-color:rgba(0,0,0,.8);-webkit-border-radius:100px;border-radius:100px;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-style:normal;font-weight:bold}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value] *{color:#fff!important}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]+b{display:none}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]:after{content:attr(data-value)}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "pre .conum[data-value]{position:relative;top:-.125em}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "b.conum *{color:inherit!important}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ".conum:not([data-value]):empty{display:none}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "dt,th.tableblock,td.content,div.footnote{text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "h1,h2,p,td.content,span.alt{letter-spacing:-.01em}"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "p strong,td.content strong,div.footnote strong{letter-spacing:-.005em}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "p,blockquote,dt,td.content,span.alt{font-size:1.0625rem}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "p{margin-bottom:1.25rem}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock p,.sidebarblock dt,.sidebarblock td.content,p.tableblock{font-size:1em}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content{background-color:#fffef7;border-color:#e0e0dc;-webkit-box-shadow:0 1px 4px #e0e0dc;box-shadow:0 1px 4px #e0e0dc}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ".print-only{display:none!important}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "@media print{@page{margin:1.25cm .75cm}"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "*{-webkit-box-shadow:none!important;box-shadow:none!important;text-shadow:none!important}"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "a{color:inherit!important;text-decoration:underline!important}"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "a.bare,a[href^\u003d\"#\"],a[href^\u003d\"mailto:\"]{text-decoration:none!important}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "a[href^\u003d\"http:\"]:not(.bare):after,a[href^\u003d\"https:\"]:not(.bare):after{content:\"(\" attr(href) \")\";display:inline-block;font-size:.875em;padding-left:.25em}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "abbr[title]:after{content:\" (\" attr(title) \")\"}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "pre,blockquote,tr,img,object,svg{page-break-inside:avoid}"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "thead{display:table-header-group}"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "svg{max-width:100%}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "p,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title{page-break-after:avoid}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "#toc,.sidebarblock,.exampleblock\u003e.content{background:none!important}"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "#toc{border-bottom:1px solid #ddddd8!important;padding-bottom:0!important}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1{padding-bottom:0!important}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1+.sect1{border:0!important}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:first-child{margin-top:1.25rem}"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header{text-align:center}"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header\u003eh1:first-child{border:0!important;margin:2.5em 0 1em 0}"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details{border:0!important;display:block;padding:0!important}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details span:first-child{margin-left:0!important}"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details br{display:block}"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details br+span:before{content:none!important}"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #toc{border:0!important;text-align:left!important;padding:0!important;margin:0!important}"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1\u003eh2{page-break-before:always}"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock code[data-lang]:before{display:block}"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "#footer{background:none!important;padding:0 .9375em}"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "#footer-text{color:rgba(0,0,0,.6)!important;font-size:.9em}"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ".hide-on-print{display:none!important}"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ".print-only{display:block!important}"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ".hide-for-print{display:none!important}"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ".show-for-print{display:inherit!important}}"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "@media print {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    a[href]:after {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        content: none !important;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanKhoo": 5,
      "-": 407
    }
  },
  {
    "path": "docs/team/abtyx.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abtyx"
        },
        "content": "\u003d Tan Yuxuan - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abtyx"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abtyx"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abtyx"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abtyx"
        },
        "content": "\u003d\u003d PROJECT: SSENISUB"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abtyx"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abtyx"
        },
        "content": "image::Ui.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abtyx"
        },
        "content": "Hi, my name is Tan Yuxuan. I am a Year 2 Computer Science Student studying in NUS. This project portfolio"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abtyx"
        },
        "content": "will serve to document my contributions to SSENISUB, a CS2103 Software Engineering module project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abtyx"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abtyx"
        },
        "content": "SSENISUB is a business management application that is designed for ease of management of staffs and their related informations."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abtyx"
        },
        "content": "The main features of SSENISUB allows users to"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abtyx"
        },
        "content": "* Find the contact details of other co-workers that they need to reach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abtyx"
        },
        "content": "* Add, Delete and Edit staff information"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abtyx"
        },
        "content": "* Personalize the list of contacts by favouriting contacts that they may need to view more often"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abtyx"
        },
        "content": "* Give feedback and ratings to staff"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abtyx"
        },
        "content": "* Have the choice to set their private information to a private state"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abtyx"
        },
        "content": "My main responsibility in the SSENISUB project is to implement the privacy feature which can allow staff"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abtyx"
        },
        "content": "to set their information to private, if they prefer it. Doing so will then hide that information from the regular"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abtyx"
        },
        "content": "staff in the GUI."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abtyx"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abtyx"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dabtyx[RepoSense]]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abtyx"
        },
        "content": "* *Major enhancement 1*: Added the Privacy command feature."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abtyx"
        },
        "content": "** What it does: This feature allows staff to have the choice to set their private information to a `private` or `public` state, which will allow only the appropriate personnel to be able to view it on SSENISUB. +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abtyx"
        },
        "content": "Currently only the `Phone`, `Email` and `Address` fields of a Staff can have their privacy set using this command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abtyx"
        },
        "content": "** Justification: This feature is important as it respects and protects the privacy of the staff\u0027s information, disallowing misuse of their information by regular staff."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "** Highlights: The implementation of this feature is quite universal within the constraints of the project, and thus \u0027privacy\u0027 can be implemented to other fields deemed necessary in the future with similar logic."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abtyx"
        },
        "content": "* *Major enhancement 2*: Modify add command feature."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abtyx"
        },
        "content": "** What it does: This enhancement modifies the AddCommand to be able to take in three new prefixes for private Phone `pp/`,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abtyx"
        },
        "content": "private Email `pe/` and private Address `pa/`. This allows a user to add a staff directly with private fields if required."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abtyx"
        },
        "content": "** Justification: This feature will allow HR Managers whose job require them to add Staff into the SSENISUB system to have an easier time as they can"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abtyx"
        },
        "content": "immediately add in a staff with private fields if they requested so, instead of first adding the staff in, then using the privacy command to change their"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abtyx"
        },
        "content": "privacy fields."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abtyx"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abtyx"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abtyx"
        },
        "content": "*** Made the staff panel portion of the GUI reflect the staff\u0027s information differently based on its privacy settings. https://github.com/CS2103-AY1819S1-T13-2/main/pull/56[#56]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abtyx"
        },
        "content": "*** Made Phone Numbers and Email addresses unique within the SSENISUB staff list as no two staff should be using the same phone number or email address."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abtyx"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/114[#114]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "abtyx"
        },
        "content": "**** Implementation: changed the AddCommand and EditCommand to check the existing staffs for duplicate phone or emails before fully executing the command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abtyx"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "abtyx"
        },
        "content": "*** Updated the User Guide: https://github.com/CS2103-AY1819S1-T13-2/main/pull/62[#62], https://github.com/CS2103-AY1819S1-T13-2/main/pull/79[#79], https://github.com/CS2103-AY1819S1-T13-2/main/pull/117[#117]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abtyx"
        },
        "content": "*** Updated the Developer Guide: https://github.com/CS2103-AY1819S1-T13-2/main/pull/32[#32], https://github.com/CS2103-AY1819S1-T13-2/main/pull/117[#117]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "abtyx"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "abtyx"
        },
        "content": "*** PRs reviewed:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "abtyx"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/22[#22],"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "abtyx"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/37[#37],"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "abtyx"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/41[#41],"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "abtyx"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/78[#78],"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abtyx"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/125[#125]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "abtyx"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "abtyx"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "abtyx"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "abtyx"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "abtyx"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "abtyx"
        },
        "content": "include::../UserGuide.adoc[tag\u003dprivacy]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "abtyx"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlogin]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "abtyx"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "abtyx"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "abtyx"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "abtyx"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "abtyx"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dprivacycommand]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "abtyx"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dlogin]"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 1,
      "abtyx": 86
    }
  },
  {
    "path": "docs/team/dankhoo.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003d Daniel Khoo - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003d\u003d PROJECT: SSENISUB"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "Hello! I am Daniel Khoo. Year 2, Computer Science Student at National University of Singapore (NUS). This project"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "portfolio serves to document what I have contributed to the project SSENISUB, a Software Engineering project (CS2103)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "SSENISUB is a desktop business management application designed to manage staffs\u0027 information within an organisation."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "SSENISUB is built by a team of 5 students namely Daniel Khoo, Terence Goh, Ashburn Tan, Ngeow Xiu Qi and Valensia"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "Sebastiani."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* Features of SSENISUB:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "** Allows staff to find contact information of their co-staff and supervisor easily."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "** Allows staff to set privacy on their sensitive information such as phone number and home address."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "** Allows HR to add/edit/delete contact information."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "** Allows manager to give rating and feedback on their staff\u0027s performance."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "** Allows manager to favourite the staff to place it on top of the list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "User interacts with SSENISUB mainly using the Command Line Interface (CLI). +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "My main responsibility in this project is to enhance the commands (`add`, `edit`, `find`) +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "I also played a key role in designing the UI, to make a better experience for the user on the whole. The UI was also"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "further improved to display the details of the staff. A few UI event triggers have also been implemented. The picture"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "below shows the main page of SSENISUB."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ".SSENISUB Main Page"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "image::Ui.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "|_Given below are sections I contributed to the Application. They showcase my ability to write and manage the code"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "within the project._"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* *Code contributed*: https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003ddankhoo[RepoSense]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* *Major enhancement 1*: Added the ability to *add staff*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "** What it does: HR staff can add staff with this feature."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "** Justification: This feature provides HR department a better management of staffs in the organisation."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "** Highlights: This enhancement adds new commands into the application, and requires in-depth analysis of design"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "analysis with regards to information storage. In the upcoming v2.0, users with different level of authorisations"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "are only allowed to use certain commands, this command would only be accessible to HR department."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* *Major enhancement 2*: Added the ability to *edit existing staff*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "** What it does: This feature allows the staff and HR staff to make any amendments to any staff they have created"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "previously in the SSENISUB."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "** Justification: HR staff could add the staff with the wrong information, this feature will allow the HR staff"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "to make any edits to the staff\u0027s information. In addition, information such as phone number or home address or"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "manager can change over time thus, this feature will allow staff to make any edits only to their own information."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "** Highlights: This enhancement delete and re-create a new Person object. In the upcoming v2.0, users with different"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "level of authorisations are only allowed to use certain commands, this command would only be accessible to HR"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "department and staff itself."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* *Major enhancement 3*: Added the ability to *find existing staff*"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "** What it does: This feature allows all users to find existing staff in the list with only name, email,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "department and manager parameters."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "** Justification: This feature will help users to find any particular staff information easily instead of scrolling"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "through the long list of staff. Also, when a staff is planning for an event for the department and needs a list of"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "names, this feature will be able to find all staff according to the department. Lastly, in the event when a manager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "needs to give a rating or feedback to the staff, he can find all staff that is under him so that he will not"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "overlook on any staff."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "** Highlights: This enhancement changes the `INDEX` accordingly in the User Interface. Any command that relies on"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "`INDEX` needs to keep it in mind."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "*** Managed release for"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/releases/tag/v1.2[v1.2],"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/releases/tag/v1.2.1[v1.2.1],"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/releases/tag/v1.3[v1.3],"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/releases/tag/midv1.4[midv1.4] on GitHub"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "*** Added reposense/config.json"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "(Pull request https://github.com/CS2103-AY1819S1-T13-2/main/pull/24[#24])"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "*** Updated the UI"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "(Pull request https://github.com/CS2103-AY1819S1-T13-2/main/pull/44[#44],"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/50[#50])"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 94.1% to 94.3%"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "(Pull request https://github.com/CS2103-AY1819S1-T13-2/main/pull/106[#106])"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "** Bug fixes:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "*** Fixed UI bugs"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "(Pull request https://github.com/CS2103-AY1819S1-T13-2/main/pull/104[#104],"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/108[#108])"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "*** Fixed Phone Field bug that can accept less than 3 digits"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "(Pull request https://github.com/CS2103-AY1819S1-T13-2/main/pull/103[#103])"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "*** Updated existing contents of the About Us:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "(Pull request https://github.com/CS2103-AY1819S1-T13-2/main/pull/1[#1])"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "*** Updated existing contents of the README:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "(Pull request https://github.com/CS2103-AY1819S1-T13-2/main/pull/31[#31],"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/36[#36])"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "*** Updated existing contents of the User Guide:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "(Pull request https://github.com/CS2103-AY1819S1-T13-2/main/pull/13[#13],"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/65[#65],"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/113[#113])"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "*** Updated existing contents, diagrams and manual test cases of the Developer Guide:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "(Pull request https://github.com/CS2103-AY1819S1-T13-2/main/pull/37[#37],"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/118[#118],"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/134[#134])"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "*** PRs reviewed:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "(https://github.com/CS2103-AY1819S1-T13-2/main/pull/5[#5],"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/7[#7],"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/29[#29],"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/32[#32],"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/40[#40],"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/42[#42],"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/47[#47],"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/63[#63],"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/64[#64],"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/66[#66],"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/75[#75],"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/76[#76],"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/80[#80],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/101[#101],"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/102[#102],"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/107[#107],"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/111[#111],"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/112[#112],"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/114[#114],"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/115[#115],"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/117[#117])"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "*** Reported bugs and suggestions for other project"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "(https://github.com/CS2103-AY1819S1-W12-3/main/issues/130[#130],"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://github.com/CS2103-AY1819S1-W12-3/main/issues/133[#133],"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://github.com/CS2103-AY1819S1-W12-3/main/issues/137[#137],"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "https://github.com/CS2103-AY1819S1-W12-3/main/issues/144[#144])"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " end-users._"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "include::../UserGuide.adoc[tag\u003dadd]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfind-n]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfind-e]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfind-d]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfind-m]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "include::../UserGuide.adoc[tag\u003dedit]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003daddcommand]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003daddStaffTC]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dselectStaffTC]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dFindingStaffTC]"
      }
    ],
    "authorContributionMap": {
      "DanKhoo": 170
    }
  },
  {
    "path": "docs/team/iamrence.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "\u003d Terence Goh - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "\u003d\u003d PROJECT: SSENISUB"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "image::Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "This project portfolio serves to document my contributions to SSENISUB, a CS2103 (Software Engineering)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "project, as part of my Computer Science curriculum in National University of Singapore (NUS)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "SSENISUB is a business management application which is used for managing employees\u0027 information within an organisation."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "Its name is inspired from the word \"business\", and is simply a palindrome of it. It is morphed from the given"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "`addressbook-level4` application as its base. The user interacts with it mainly using a"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "Command Line Interface (CLI). In conjunction with the CLI, a Graphical User Interface (GUI) is used to make it more"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "user-friendly, supported by coloured text and symbols. This application is written in Java with about 15 kLoC,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "and its GUI is created with JavaFX, CSS and HTML."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "My main responsibility in SSENISUB is to implement commands (`feedback` and `rate`) that a manager would want to have to support a continuous"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "review and tracking of his/her employees\u0027 performance throughout their time in the organisation. This is used to support"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "making informed management decisions."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "I also played a key role in creating an identity for SSENISUB by designing an icon and making it the"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "face of the application."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "* *Code contributed*: https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003diamrence[[RepoSense for IamRENCE]]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "* *Major enhancement 1*: added *the ability to give ratings to staff* stored inside the application"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** What it does: Allows the user to update a rating of a staff to keep track of his/her performance in the organisation."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** Justification: This feature improves the product significantly because a user is provided with a way to keep track of"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "his/her employees\u0027 performance, which is especially important during the *year-end performance review*. It potentially"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "affects how much bonus or credit is given to the staff in the organisation."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** Highlights: This enhancement looks similar to the add and edit command, but has to be made to *execute asynchronous* to"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "these commands. In future releases, where users of different levels of authorisation are allowed to use different commands,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "this command would only be accessible to managers (or direct superiors). The reason is that they have the right to and are in"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "the best position to give any rating to their staff."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "* *Major enhancement 2*: added *the ability to give feedback to staff* stored inside the application"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** What it does: Allows the user to give professional feedback to staff in the organisation, so that the staff knows what he/she is"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "doing well in and to find out what areas of improvement he/she can engage in."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** Justification: This feature, like the rate command, improves the product to a large extent because a user is provided"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "with a way to inform his/her employees what to look out for in their performance so that they can improve themselves."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "Coupled with the rate command, a manager can make *more informed reviews* of his/her employees\u0027 performance. At the same"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "time, employees can use the feedback assigned to them as *motivation* for continuous improvement, or as a *wake up call* for"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "any bad performance. This can *boost the organisation\u0027s productivity* as a whole."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** Highlights: Just like the rate command, the feedback command is *run non-parallel to the add and edit command* due to"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "future user authorisation implementations. Another highlight of this command is that users *cannot enter profanities*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "(even if it is entered in leetspeak). Designing an efficient way to check for profanities proved to be a very tough task: Whether"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "to base the runtime on input length or the number of profanities to be rejected. A detailed analysis had to be done to make a choice."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** Credits: [https://gist.github.com/PimDeWitte/c04cc17bc5fa9d7e3aee6670d4105941[Simple Profanity Filter by PimDeWitte]]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "//* *Code contributed*:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "//** Functional code:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "//*** [https://github.com/CS2103-AY1819S1-T13-2/main/blob/master/src/main/java/seedu/address/logic/commands/RateCommand.java[RateCommand.java]]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "//*** [https://github.com/CS2103-AY1819S1-T13-2/main/blob/master/src/main/java/seedu/address/logic/parser/RateCommandParser.java[RateCommandParser.java]]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "//*** [https://github.com/CS2103-AY1819S1-T13-2/main/blob/master/src/main/java/seedu/address/model/person/Rating.java[Rating.java]]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "//*** [https://github.com/CS2103-AY1819S1-T13-2/main/blob/master/src/main/java/seedu/address/logic/commands/FeedbackCommand.java[FeedbackCommand.java]]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "//*** [https://github.com/CS2103-AY1819S1-T13-2/main/blob/master/src/main/java/seedu/address/logic/parser/FeedbackCommandParser.java[FeedbackCommandParser.java]]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "//*** [https://github.com/CS2103-AY1819S1-T13-2/main/blob/master/src/main/java/seedu/address/model/person/Feedback.java[Feedback.java]]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "//** Test code:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "//*** [https://github.com/CS2103-AY1819S1-T13-2/main/blob/master/src/test/java/seedu/address/logic/commands/RateCommandTest.java[RateCommandTest.java]]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "//*** [https://github.com/CS2103-AY1819S1-T13-2/main/blob/master/src/test/java/seedu/address/logic/parser/RateCommandParserTest.java[RateCommandParserTest.java]]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "//*** [https://github.com/CS2103-AY1819S1-T13-2/main/blob/master/src/test/java/seedu/address/model/person/RatingTest.java[RatingTest.java]]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "//*** [https://github.com/CS2103-AY1819S1-T13-2/main/blob/master/src/test/java/systemtests/RateCommandSystemTest.java[RateCommandSystemTest.java]]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "//*** [https://github.com/CS2103-AY1819S1-T13-2/main/blob/master/src/test/java/seedu/address/logic/commands/FeedbackCommandTest.java[FeedbackCommandTest.java]]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "//*** [https://github.com/CS2103-AY1819S1-T13-2/main/blob/master/src/test/java/seedu/address/logic/parser/FeedbackCommandParserTest.java[FeedbackCommandParserTest.java]]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "//*** [https://github.com/CS2103-AY1819S1-T13-2/main/blob/master/src/test/java/seedu/address/model/person/FeedbackTest.java[FeedbackTest.java]]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "//*** [https://github.com/CS2103-AY1819S1-T13-2/main/blob/master/src/test/java/systemtests/FeedbackCommandSystemTest.java[FeedbackCommandSystemTest.java]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "*** Checked `v1.1` - `v1.4` (4 releases) before they got released them on GitHub."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "*** Updated the application icon"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "(Pull request https://github.com/CS2103-AY1819S1-T13-2/main/pull/42[#42])."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 93.4% to 93.6%"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "(Pull request https://github.com/CS2103-AY1819S1-T13-2/main/pull/58[#58])."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** Bug fixes:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "*** Fixed bugs commands that allowed for inputs that otherwise should have been rejected"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "(Pull request https://github.com/CS2103-AY1819S1-T13-2/main/pull/58[#58])."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "*** Fixed overall UI/code bug where \"Address Book\"/\"AddresBook\" is displayed or used instead of our application \"SSENISUB\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "(Pull request https://github.com/CS2103-AY1819S1-T13-2/main/pull/107[#107])."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "*** Updated existing contents of the User Guide:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/101[#101],"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/102[#102],"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/109[#109]."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "*** Updated existing contents of the Developer Guide:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/29[#29],"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/109[#109]."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "*** PRs reviewed:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/12[#12],"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/16[#16],"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/27[#27],"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/31[#31],"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/44[#44],"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/49[#49],"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/54[#54],"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/81[#81],"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/100[#100],"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/103[#103],"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/104[#104],"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/106[#106],"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/108[#108]."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "(examples:  https://github.com/CS2103-AY1819S1-F11-3/main/issues/184[1],"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "https://github.com/CS2103-AY1819S1-F11-3/main/issues/198[2],"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "https://github.com/CS2103-AY1819S1-F11-3/main/issues/200[3])."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "include::../UserGuide.adoc[tag\u003drate]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfeedback]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dratecommand]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dfeedbackcommand]"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 137
    }
  },
  {
    "path": "docs/team/ngeowxiuqi.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "\u003d Ngeow Xiu Qi - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "\u003d\u003d PROJECT: SSENISUB"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "image::Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "This project portfolio serves to document the work that I have contributed to the software, SSENISUB, during my time as a student of CS2103 (Software Engineering),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "under the team T13-2 in the National University of Singapore (NUS)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "SSENISUB is a software that aims to improve workplace productivity. It assists the Human Resource (HR) department to better manage the employees in the company, it also serves as a tool for"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "managers to better manage their staff and lastly, serve as a contact list for users to find and contact other staff within the company or department."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "This software consists of about 15 kLoC and it makes use of both the Command Line Interface (CLI) and a Graphical User Interface (GUI) to"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "interact with the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "My role as a developer in the team was to implement finance related functions for the software. Specifically, I have implemented the Salary, Overtime Hours,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " Overtime Rate and Pay Deductibles fields for a Staff to allow the Human Resource sector to better manage their staff\u0027s payroll."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dNgeowXiuQi[Functional code]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "* *Major enhancement 1*: Implemented four new fields for a staff, namely : Salary, Overtime Hours, Overtime Rate and Pay Deductibles."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "** What it does: This feature allows the HR department to store all payroll aspects for a staff and ensure that they are properly accounted for."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "** Justification: This feature not only allows the staff to ensure that he/she is being paid the right amount, but also helps the HR department to store these information in their records and edit them whenever necessary. Thus, this removes"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "the need for paper records of pay which may result in confusion and loss of records."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "** Highlights: The four new fields are able to behave seamlessly as part of the Staff and behaves just like the other attributes would like with Phone and Address."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "* *Major enhancement 2*: Modified the edit function to be able to edit the four new fields implemented above."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "** What it does: This feature allows the HR department to edit the Salary, Overtime Hours, Overtime Rate and Pay Deductibles on an existing staff."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "** Justification: A HR staff can now edit the abovementioned fields to adjust any of the fields. Such a feature is critical as it affects a staff\u0027s payroll, and we would not want"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "the staff to be wrongly paid. Additionally, this function is of utmost importance as a person\u0027s salary, overtime hours and pay deductibles would change regularly. Hence, this feature is needed to manage to staff\u0027s payroll."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "** Highlights: The HR staff would also be able to edit the four fields whenever necessary to allow changes (such as a pay raise or when the staff has worked more overtime hours than initially recorded)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "** Tweaked the staff panel to be able to display the net salary. This required some very minor calculations to be done in the backend."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " Net salary in this case refers to the final salary calculated after all additions and deductions are taken into account. (Pull Request https://github.com/CS2103-AY1819S1-T13-2/main/pull/53[#53])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "** Test Case Review :"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "*** Reviewed some of the tests and removed any unnecessary checks within the test case itself (Pull Request  https://github.com/CS2103-AY1819S1-T13-2/main/pull/63[#63])."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "*** Edited the README document to reflect our software\u0027s (SSENISUB) overview and features (Pull Request https://github.com/CS2103-AY1819S1-T13-2/main/pull/5[#5])."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "*** Reviewed several PRs of major features : https://github.com/CS2103-AY1819S1-T13-2/main/pull/23[#23], https://github.com/CS2103-AY1819S1-T13-2/main/pull/27[#27], https://github.com/CS2103-AY1819S1-T13-2/main/pull/55[#55], https://github.com/CS2103-AY1819S1-T13-2/main/pull/56[#56], https://github.com/CS2103-AY1819S1-T13-2/main/pull/119[#119]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "*** Tested other team\u0027s software, reported bugs and suggested improvements (Examples : https://github.com/CS2103-AY1819S1-W10-3/main/issues/137[Issue 1], https://github.com/CS2103-AY1819S1-W10-3/main/issues/141[Issue 2], https://github.com/CS2103-AY1819S1-W10-3/main/issues/144[Issue 3])"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "*** Helped to ensure that teammates codes in PRs were according to proper coding guidelines (Done when reviewing PRs)."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "*** All PRs Reviewed :"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/23[#23]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/24[#24]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/27[#27]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/49[#49]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/55[#55]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/56[#56]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/62[#62]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/67[#67]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/79[#79]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/119[#119]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/123[#123]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/124[#124]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "include::../UserGuide.adoc[tag\u003dedit]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "include::../UserGuide.adoc[tag\u003dselect]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dsalaryfunction]"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 84
    }
  },
  {
    "path": "docs/team/valensia0711.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d Valensia Sebastiani - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d PROJECT: SSENISUB"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "image::Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "---"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "This project portfolio provides detail of my contribution to our group (T13-2) project, SSENISUB, for CS2103."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "SSENISUB is a desktop application intended for business organizations to manage information regarding its staff."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "SSENISUB is CLI-interactive and has a GUI created with JavaFX. It is written in Java and has about 15kLoC."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "As a team member, I was in charge of implementing new commands, i.e. favourite/unfavourite and sort/sortDept/sortRatingDown/sortRatingUp."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "These implemented commands are helpful in increasing the efficiency of the application use by moving favourited staff to the top or the list and sorting the list of staff by the different parameters."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dvalensia0711[RepoSense for valensia0711]]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* *Major enhancement 1*: added *the ability to favourite and unfavourite* a staff"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** What it does: Allows the user to favourite a staff (i.e. moves the specified staff to the top of the list) and also allows the user to unfavourite favourited staff (i.e. moves the specified staff back from the top)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Justification: The favourite feature makes the use of the application more efficient as some user would always have a few staff with whom they interact or contact frequently. By moving that particular staff to the top of the list, the amount of hassle needed to find and select the staff is omitted."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "On the other hand, the unfavourite feature is also needed as there are many cases that would lead to no longer frequent interaction with said favourited staff."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Highlights: This enhancement also affects the UI other than moving the staff to the top of the list. Favourited staff will be highlighted in yellow and will have a star next to their name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Credits: [https://github.com/CS2103AUG2017-T10-B1/main/blob/master/src/main/java/seedu/address/logic/commands/FavouriteCommand.java[Favourite Command by CS2103-2017-T10-B1]]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* *Major enhancement 2*: added *the ability to sort* the staff list *by different parameters*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** What it does: Allows the user to sort the staff list by three different parameters, i.e. by name, by department, and by rating"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Justification: Sorting the list by name is significant as it will ease the process of finding a certain staff without having to know their exact name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Sorting the list by department would be really helpful for people at higher positions who are in charge of more than one departments."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "Sorting the list by rating would be important for managers or HRs as this is the main key needed to review staff performances, and having both options to sort it in ascending or descending order further helps for the different cases possible in an organization setting."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Highlights: This enhancement takes into consideration not only the surface sorting but also the minor details,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "e.g. sort by name command would sort the list by favourite first then sort by name, leaving the favourited staff on top"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "e.g. sort by department command would sort the list by department then by favourite then by name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "e.g. sort by rating command would sort the list by rating then by favourite then by name"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Credits: [https://www.baeldung.com/java-8-comparator-comparing[Guide to Java 8 Comparator.comparing()]]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "*** Checked `v1.1` - `v1.4` (4 releases) before its release"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "*** Designed SSENISUB.png used in the UI right side: https://github.com/CS2103-AY1819S1-T13-2/main/pull/42[#42]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Bug fixes:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "*** Fixed bugs in favourite/unfavourite command related to undo/redo command: https://github.com/CS2103-AY1819S1-T13-2/main/pull/100[#100]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** UI changes:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "*** Edited person list card UI for favourite/unfavourite command: https://github.com/CS2103-AY1819S1-T13-2/main/pull/76[#76]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com/CS2103-AY1819S1-T13-2/main/pull/123[#123]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "*** Updated existing contents of the User Guide:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/16[#16],"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/64[#64],"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/67[#67],"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/123[#123]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the Developer Guide: https://github.com/CS2103-AY1819S1-T13-2/main/pull/138[#138]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "*** Updated existing contents of the Developer Guide:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/40[#40],"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/49[#49],"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/67[#67],"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/138[#138],"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "*** PRs reviewed:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/13[#13],"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/36[#36],"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/40[#40],"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/47[#47],"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/50[#50],"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/53[#53],"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/58[#58],"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/65[#65],"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/109[#109],"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/120[#120],"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/121[#121],"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "https://github.com/CS2103-AY1819S1-T13-2/main/pull/133[#133]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/issues/153[1]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/issues/155[2]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/issues/157[3]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/issues/161[4]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/issues/162[5]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/issues/166[6]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/issues/174[7]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "https://github.com/CS2103-AY1819S1-T12-3/main/issues/183[8]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsort]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsortDept]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsortRatingDown]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsortRatingUp]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfavourite]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "include::../UserGuide.adoc[tag\u003dunfavourite]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dsortcommand]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dsortdeptcommand]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dsortratingdowncommand]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dsortratingupcommand]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dfavouritecommand]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dlockunlockcommand]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dunfavouritecommand]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dFavouriteStaffTC]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dUnfavouriteStaffTC]"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 131
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.ReadOnlySsenisub;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.Ssenisub;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.storage.SsenisubStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.storage.XmlSsenisubStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing SSENISUB ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        SsenisubStorage ssenisubStorage \u003d new XmlSsenisubStorage(userPrefs.getSsenisubFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        storage \u003d new StorageManager(ssenisubStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Optional\u003cReadOnlySsenisub\u003e ssenisubOptional;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        ReadOnlySsenisub initialData;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            ssenisubOptional \u003d storage.readSsenisub();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            if (!ssenisubOptional.isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample SSENISUB\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            initialData \u003d ssenisubOptional.orElseGet(SampleDataUtil::getSampleSsenisub);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty SSENISUB\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            initialData \u003d new Ssenisub();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty SSENISUB\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            initialData \u003d new Ssenisub();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty SSENISUB\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        logger.info(\"Starting SSENISUB \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping SSENISUB ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 20,
      "-": 188
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private String appTitle \u003d \"SSENISUB\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private static final String LOG_FILE \u003d \"SSENISUB.log\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Decorates the given string to create a log message suitable for logging event handling methods."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e, String message) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"---[Event handled][\" + e + \"]\" + message;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getEventHandlingLogMessage(BaseEvent, String)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return getEventHandlingLogMessage(e, \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "-": 127
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/SsenisubChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.ReadOnlySsenisub;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "/** Indicates Ssenisub in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class SsenisubChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public final ReadOnlySsenisub data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public SsenisubChangedEvent(ReadOnlySsenisub data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return \"number of persons \" + data.getPersonList().size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/HideStaffPanelEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " * A UI event class that is used to hide the {@code StaffPanel}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "public class HideStaffPanelEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanKhoo": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.logic.parser.SsenisubParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private final SsenisubParser ssenisubParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        ssenisubParser \u003d new SsenisubParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            Command command \u003d ssenisubParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 4,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEPARTMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MANAGER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * Adds a person to SSENISUB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to SSENISUB. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            + \"[p]\" + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            + \"[p]\" + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            + \"[p]\" + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            + PREFIX_DEPARTMENT + \"DEPARTMENT \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            + PREFIX_MANAGER + \"MANAGER \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            + PREFIX_DEPARTMENT + \"Accounting \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            + PREFIX_MANAGER + \"Ben Leong \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            + PREFIX_TAG + \"staff \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in SSENISUB\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PHONE_NUMBER \u003d \"This phone number is already in use\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EMAIL \u003d \"This email is already in use\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (model.hasPhoneNumber(toAdd)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PHONE_NUMBER);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (model.hasEmail(toAdd)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EMAIL);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        model.commitSsenisub();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 4,
      "abtyx": 13,
      "DanKhoo": 7,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.Ssenisub;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * Clears SSENISUB."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        model.resetData(new Ssenisub());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        model.commitSsenisub();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 4,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.commons.events.ui.HideStaffPanelEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from SSENISUB."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        model.commitSsenisub();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        if (lastShownList.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            EventsCenter.getInstance().post(new HideStaffPanelEvent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 2,
      "DanKhoo": 7,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEDUCTIBLES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEPARTMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MANAGER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OTHOUR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OTRATE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALARY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Feedback;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Manager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.OtHour;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.OtRate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.PayDeductibles;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Rating;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.Salary;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * Edits the details of an existing person in SSENISUB."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            + \"[\" + PREFIX_DEPARTMENT + \"DEPARTMENT] \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            + \"[\" + PREFIX_MANAGER + \"MANAGER] \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            + \"[\" + PREFIX_SALARY + \"SALARY]\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            + \"[\" + PREFIX_OTHOUR + \"OT HOUR]\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            + \"[\" + PREFIX_OTRATE + \"OT RATE]\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            + \"[\" + PREFIX_DEDUCTIBLES + \"DEDUCTIBLES]\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in SSENISUB.\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    //public static final String MESSAGE_DUPLICATE_NAME \u003d \"Unable to edit to an existing name.\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PHONE_NUMBER \u003d \"Unable to edit to an existing phone number\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EMAIL \u003d \"Unable to edit to an existing email address\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (!personToEdit.hasSamePhone(editedPerson) \u0026\u0026 model.hasPhoneNumber(editedPerson)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PHONE_NUMBER);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (!personToEdit.hasSameEmail(editedPerson) \u0026\u0026 model.hasEmail(editedPerson)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EMAIL);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        model.commitSsenisub();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Index indexEdited \u003d Index.fromZeroBased(model.getFilteredPersonList().indexOf(editedPerson));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(indexEdited));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        Salary updatedSalary \u003d editPersonDescriptor.getSalary().orElse(personToEdit.getSalary());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        OtHour updatedHours \u003d editPersonDescriptor.getHours().orElse(personToEdit.getOtHours());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        OtRate updatedRate \u003d editPersonDescriptor.getRate().orElse(personToEdit.getOtRate());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        PayDeductibles updatedDeductibles \u003d editPersonDescriptor.getDeductibles().orElse(personToEdit.getDeductibles());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Rating updatedRating \u003d personToEdit.getRating();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Department updatedDepartment \u003d editPersonDescriptor.getDepartment().orElse(personToEdit.getDepartment());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Manager updatedManager \u003d editPersonDescriptor.getManager().orElse(personToEdit.getManager());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Feedback updatedFeedback \u003d personToEdit.getFeedback();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        boolean updatedFavourite \u003d personToEdit.getFavourite();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedRating, updatedDepartment,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                updatedManager, updatedSalary, updatedHours, updatedRate, updatedDeductibles, updatedFeedback,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                updatedTags, updatedFavourite);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        private Salary salary;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        private OtHour hours;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        private OtRate rate;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        private PayDeductibles deductibles;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        private Department department;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        private Manager manager;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            setSalary(toCopy.salary);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            setHours(toCopy.hours);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            setRate(toCopy.rate);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            setDeductibles(toCopy.deductibles);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            setDepartment(toCopy.department);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            setManager(toCopy.manager);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, department, manager,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "              salary, hours, rate, deductibles, tags);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        public void setSalary(Salary salary) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            this.salary \u003d salary;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        public Optional\u003cSalary\u003e getSalary() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            return Optional.ofNullable(salary);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        public void setHours(OtHour hours) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            this.hours \u003d hours;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        public Optional\u003cOtHour\u003e getHours() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            return Optional.ofNullable(hours);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        public void setRate(OtRate rate) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            this.rate \u003d rate;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        public Optional\u003cOtRate\u003e getRate() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            return Optional.ofNullable(rate);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        public void setDeductibles(PayDeductibles deductibles) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            this.deductibles \u003d deductibles;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        public Optional\u003cPayDeductibles\u003e getDeductibles() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            return Optional.ofNullable(deductibles);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        public void setDepartment(Department department) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            this.department \u003d department;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        public Optional\u003cDepartment\u003e getDepartment() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            return Optional.ofNullable(department);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        public void setManager(Manager manager) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            this.manager \u003d manager;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        public Optional\u003cManager\u003e getManager() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            return Optional.ofNullable(manager);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                    \u0026\u0026 getSalary().equals(e.getSalary())"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                    \u0026\u0026 getHours().equals(e.getHours())"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                    \u0026\u0026 getRate().equals(e.getRate())"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                    \u0026\u0026 getDeductibles().equals(e.getDeductibles())"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                    \u0026\u0026 getDepartment().equals(e.getDepartment())"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                    \u0026\u0026 getManager().equals(e.getManager())"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 2,
      "NgeowXiuQi": 62,
      "IamRENCE": 8,
      "abtyx": 11,
      "DanKhoo": 37,
      "-": 223
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting SSENISUB as requested ...\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FavouriteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " * Favourites an exisiting contact"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "public class FavouriteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"favourite\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"fav\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to your favourite contacts \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            + \"by the index number used in the last person listing.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public static final String MESSAGE_FAVOURITE_PERSON_FAIL \u003d \"Person already favourited: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public static final String MESSAGE_FAVOURITE_PERSON_SUCCESS \u003d \"Added person to favourites: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in SSENISUB.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public FavouriteCommand(Index index) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Person personToFavourite \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Person favouritedPerson \u003d createFavouritedPerson(personToFavourite);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        model.favouritePerson(personToFavourite, favouritedPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        model.commitSsenisub();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        if (!personToFavourite.getFavourite()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_FAVOURITE_PERSON_SUCCESS,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                    favouritedPerson.getName().fullName));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_FAVOURITE_PERSON_FAIL,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                    favouritedPerson.getName().fullName));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToFavourite}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    private static Person createFavouritedPerson(Person personToFavourite) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assert personToFavourite !\u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        boolean newFavourite;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        if (personToFavourite.getFavourite()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            newFavourite \u003d personToFavourite.getFavourite();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            newFavourite \u003d !personToFavourite.getFavourite();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        return new Person(personToFavourite.getName(), personToFavourite.getPhone(), personToFavourite.getEmail(),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                personToFavourite.getAddress(), personToFavourite.getRating(), personToFavourite.getDepartment(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                personToFavourite.getManager(), personToFavourite.getSalary(), personToFavourite.getOtHours(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                personToFavourite.getOtRate(), personToFavourite.getDeductibles(), personToFavourite.getFeedback(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                personToFavourite.getTags(), newFavourite);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        if (!(other instanceof FavouriteCommand)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        FavouriteCommand e \u003d (FavouriteCommand) other;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 97,
      "IamRENCE": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FeedbackCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FEEDBACK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Feedback;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * Edits the feedback details of an existing person in SSENISUB."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class FeedbackCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"feedback\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Updates the feedback for the person identified \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            + \"Existing feedback will be overwritten by the input feedback.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            + \"[\" + PREFIX_FEEDBACK + \"FEEDBACK]\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            + \"fb/5\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static final String MESSAGE_FEEDBACK_PERSON_SUCCESS \u003d \"Feedback updated for Person: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private final Feedback feedback;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public FeedbackCommand(Index index, Feedback feedback) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        this.feedback \u003d feedback;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                personToEdit.getAddress(), personToEdit.getRating(), personToEdit.getDepartment(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                personToEdit.getManager(), personToEdit.getSalary(), personToEdit.getOtHours(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                personToEdit.getOtRate(), personToEdit.getDeductibles(), feedback,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                personToEdit.getTags(), personToEdit.getFavourite());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        model.commitSsenisub();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Index indexEdited \u003d Index.fromZeroBased(model.getFilteredPersonList().indexOf(editedPerson));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(indexEdited));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_FEEDBACK_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                || (other instanceof FeedbackCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                \u0026\u0026 index.equals(((FeedbackCommand) other).index)); // state check"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 2,
      "IamRENCE": 74,
      "DanKhoo": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find-n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanKhoo": 1,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindDepartmentCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.DepartmentContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " * Finds and lists all persons in address book whose department contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "public class FindDepartmentCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find-d\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":Finds all persons whose department contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Accounting Tech Marketing\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private final DepartmentContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public FindDepartmentCommand(DepartmentContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            || (other instanceof FindDepartmentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            \u0026\u0026 predicate.equals(((FindDepartmentCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanKhoo": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindEmailCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.EmailContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " * Finds and lists all persons in address book whose email contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "public class FindEmailCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find-e\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":Finds all persons whose email contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice@example.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private final EmailContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public FindEmailCommand(EmailContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                || (other instanceof FindEmailCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindEmailCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanKhoo": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindManagerCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.ManagerContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " * Finds and lists all persons in address book whose manager contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "public class FindManagerCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find-m\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \":Finds all persons whose manager contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Ben Marcus\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private final ManagerContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public FindManagerCommand(ManagerContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                || (other instanceof FindManagerCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindManagerCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanKhoo": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * Lists all persons in SSENISUB to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PrivacyCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abtyx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abtyx"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.model.person.Feedback;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.model.person.Manager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.model.person.OtHour;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.model.person.OtRate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.model.person.PayDeductibles;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.model.person.Rating;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.model.person.Salary;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abtyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * Togggles the privacy value of an existing person\u0027s information in SSENISUB."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abtyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abtyx"
        },
        "content": "public class PrivacyCommand extends Command {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"privacy\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Changes the privacy value of information of the\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            + \"person identified by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            + \"Only Phone, Email and Address can be Private.\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            + \"Input value as y to make private and n to make non-private.\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"y/n] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"y/n] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"y/n]\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            + PREFIX_PHONE + \"y \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            + PREFIX_ADDRESS + \"n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public static final String MESSAGE_EDIT_PRIVACY_SUCCESS \u003d \"Privacy modified: %1$s\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least 1 field must be entered!\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    private final FieldsToChange fieldsToChange;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public PrivacyCommand(Index index, FieldsToChange fieldsToChange) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        requireNonNull(fieldsToChange);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        this.fieldsToChange \u003d fieldsToChange;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Person editedPerson \u003d changePrivacy(personToEdit, fieldsToChange);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        model.commitSsenisub();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Index indexEdited \u003d Index.fromZeroBased(model.getFilteredPersonList().indexOf(editedPerson));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(indexEdited));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PRIVACY_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //instanceof handle nulls"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (!(other instanceof PrivacyCommand)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //state check"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        PrivacyCommand p \u003d (PrivacyCommand) other;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        return index.equals(p.index)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                \u0026\u0026 fieldsToChange.equals(p.fieldsToChange);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Changes the privacy values of a {@code Person} with the options stated in {@code fieldsToChange}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    private static Person changePrivacy(Person personToEdit, FieldsToChange fieldsToChange) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Name name \u003d personToEdit.getName();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Phone phone \u003d personToEdit.getPhone();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Email email \u003d personToEdit.getEmail();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Address address \u003d personToEdit.getAddress();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Rating rating \u003d personToEdit.getRating();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Department department \u003d personToEdit.getDepartment();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Manager manager \u003d personToEdit.getManager();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Salary salary \u003d personToEdit.getSalary();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        OtHour hours \u003d personToEdit.getOtHours();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        OtRate rate \u003d personToEdit.getOtRate();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        PayDeductibles deductibles \u003d personToEdit.getDeductibles();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Feedback feedback \u003d personToEdit.getFeedback();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Set\u003cTag\u003e tags \u003d personToEdit.getTags();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        boolean favourite \u003d personToEdit.getFavourite();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (fieldsToChange.getPhonePrivacy().isPresent()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            phone \u003d new Phone(personToEdit.getPhone().value, fieldsToChange.getPhonePrivacy().get());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (fieldsToChange.getEmailPrivacy().isPresent()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            email \u003d new Email(personToEdit.getEmail().value, fieldsToChange.getEmailPrivacy().get());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (fieldsToChange.getAddressPrivacy().isPresent()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            address \u003d new Address(personToEdit.getAddress().value, fieldsToChange.getAddressPrivacy().get());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        return new Person(name, phone, email, address, rating, department, manager,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                salary, hours, rate, deductibles, feedback, tags, favourite);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Stores the fields to change privacy of the person with."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public static class FieldsToChange {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        private String phonePrivacy;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        private String emailPrivacy;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        private String addressPrivacy;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        public FieldsToChange() {}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            return CollectionUtil.isAnyNonNull(phonePrivacy, emailPrivacy, addressPrivacy);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        public void setPhonePrivacy(String phonePrivacy) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            this.phonePrivacy \u003d phonePrivacy;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        public Optional\u003cString\u003e getPhonePrivacy() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            return Optional.ofNullable(phonePrivacy);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        public void setEmailPrivacy(String emailPrivacy) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            this.emailPrivacy \u003d emailPrivacy;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        public Optional\u003cString\u003e getEmailPrivacy() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            return Optional.ofNullable(emailPrivacy);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        public void setAddressPrivacy(String addressPrivacy) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            this.addressPrivacy \u003d addressPrivacy;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        public Optional\u003cString\u003e getAddressPrivacy() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            return Optional.ofNullable(addressPrivacy);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            if (!(other instanceof FieldsToChange)) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            FieldsToChange e \u003d (FieldsToChange) other;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            return getPhonePrivacy().equals(e.getPhonePrivacy())"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                    \u0026\u0026 getAddressPrivacy().equals(e.getAddressPrivacy())"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                    \u0026\u0026 getEmailPrivacy().equals(e.getEmailPrivacy());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "abtyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 2,
      "IamRENCE": 2,
      "abtyx": 195,
      "DanKhoo": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RateCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Rating;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * Edits the rating details of an existing person in SSENISUB."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class RateCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rate\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Rates the person identified \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            + \"by the index number used in the displayed person list from 1 to 10. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            + \"[\" + PREFIX_RATING + \"RATING]\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            + \"r/5\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static final String MESSAGE_RATING_PERSON_SUCCESS \u003d \"Rate updated for Person: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static final String MESSAGE_RATING_UNCHANGED \u003d \"This person already has this rating.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private final Rating rating;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @param rating of the person to edit"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public RateCommand(Index index, Rating rating) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        if (personToEdit.getRating().equals(rating)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            throw new CommandException(MESSAGE_RATING_UNCHANGED);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                personToEdit.getAddress(), rating, personToEdit.getDepartment(), personToEdit.getManager(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                personToEdit.getSalary(), personToEdit.getOtHours(), personToEdit.getOtRate(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                personToEdit.getDeductibles(), personToEdit.getFeedback(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                personToEdit.getTags(), personToEdit.getFavourite());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        model.commitSsenisub();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Index indexEdited \u003d Index.fromZeroBased(model.getFilteredPersonList().indexOf(editedPerson));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(indexEdited));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_RATING_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                || (other instanceof RateCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                \u0026\u0026 index.equals(((RateCommand) other).index)); // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 2,
      "IamRENCE": 78,
      "NgeowXiuQi": 1,
      "DanKhoo": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.commons.events.ui.HideStaffPanelEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\" + \"\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            + \"Any staff panel previously selected will now be unselected\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        if (!model.canRedoSsenisub()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        model.redoSsenisub();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        EventsCenter.getInstance().post(new HideStaffPanelEvent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 2,
      "DanKhoo": 6,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * Selects a person identified using it\u0027s displayed index from SSENISUB."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Selects the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredPersonList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " * Sort the list of deck in name\u0027s lexicographical order."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sorted all persons by name\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        model.sortByName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        model.commitSsenisub();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 23,
      "IamRENCE": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortDeptCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " * Sort the list of deck in department\u0027s lexicographical order."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "public class SortDeptCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sortDept\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sorted all persons by department\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        model.sortByDept();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        model.commitSsenisub();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortRatingDownCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " * Sort the list of deck in department\u0027s lexicographical order."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "public class SortRatingDownCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sortRatingDown\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"sortRating\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sorted all persons by rating from highest to lowest\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        model.sortByRatingDown();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        model.commitSsenisub();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortRatingUpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " * Sort the list of deck in department\u0027s lexicographical order."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "public class SortRatingUpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sortRatingUp\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sorted all persons by rating from lowest to highest\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        model.sortByRatingUp();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        model.commitSsenisub();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.commons.events.ui.HideStaffPanelEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\" + \"\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            + \"Any staff panel previously selected will now be unselected\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        if (!model.canUndoSsenisub()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        model.undoSsenisub();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        EventsCenter.getInstance().post(new HideStaffPanelEvent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 2,
      "DanKhoo": 6,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UnfavouriteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " * Unfavourites an exisiting contact"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "public class UnfavouriteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"unfavourite\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"unfav\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Removes a person from your favourite contacts \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            + \"by the index number used in the last person listing.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public static final String MESSAGE_UNFAVOURITE_PERSON_FAIL \u003d \"Person not in favourites: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public static final String MESSAGE_UNFAVOURITE_PERSON_SUCCESS \u003d \"Person removed from favourites: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in SSENISUB.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public UnfavouriteCommand(Index index) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Person personToUnfavourite \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Person unfavouritedPerson \u003d createFavouritedPerson(personToUnfavourite);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        model.unfavouritePerson(personToUnfavourite, unfavouritedPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        model.commitSsenisub();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        if (personToUnfavourite.getFavourite()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_UNFAVOURITE_PERSON_SUCCESS,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                    unfavouritedPerson.getName().fullName));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_UNFAVOURITE_PERSON_FAIL,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                    unfavouritedPerson.getName().fullName));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToFavourite}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    private static Person createFavouritedPerson(Person personToUnfavourite) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assert personToUnfavourite !\u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        boolean newFavourite;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        if (personToUnfavourite.getFavourite()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            newFavourite \u003d !personToUnfavourite.getFavourite();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            newFavourite \u003d personToUnfavourite.getFavourite();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        return new Person(personToUnfavourite.getName(), personToUnfavourite.getPhone(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                personToUnfavourite.getEmail(), personToUnfavourite.getAddress(), personToUnfavourite.getRating(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                personToUnfavourite.getDepartment(), personToUnfavourite.getManager(), personToUnfavourite.getSalary(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                personToUnfavourite.getOtHours(), personToUnfavourite.getOtRate(), personToUnfavourite.getDeductibles(),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                personToUnfavourite.getFeedback(), personToUnfavourite.getTags(), newFavourite);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        if (!(other instanceof UnfavouriteCommand)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        UnfavouriteCommand e \u003d (UnfavouriteCommand) other;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 93,
      "IamRENCE": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEPARTMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MANAGER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIVATE_ADDRESS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIVATE_EMAIL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIVATE_PHONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Feedback;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Manager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.OtHour;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.OtRate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.PayDeductibles;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Rating;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.Salary;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PRIVATE_PHONE, PREFIX_PHONE, PREFIX_PRIVATE_EMAIL,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                        PREFIX_EMAIL, PREFIX_PRIVATE_ADDRESS, PREFIX_ADDRESS, PREFIX_DEPARTMENT, PREFIX_MANAGER,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                        PREFIX_TAG);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        /*        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                                PREFIX_DEPARTMENT, PREFIX_MANAGER)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                     throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            wrongFormat();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            wrongFormat();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PRIVATE_PHONE) \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_PHONE)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            wrongFormat();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PRIVATE_ADDRESS)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_ADDRESS)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            wrongFormat();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PRIVATE_EMAIL) \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_EMAIL)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            wrongFormat();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DEPARTMENT)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            wrongFormat();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MANAGER)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            wrongFormat();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Phone phone;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_PRIVATE_PHONE)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            phone \u003d new Phone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PRIVATE_PHONE).get()).value,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                    \"Y\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Email email;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_PRIVATE_EMAIL)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            email \u003d new Email(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_PRIVATE_EMAIL).get()).value,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            \"Y\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Address address;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_PRIVATE_ADDRESS)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            address \u003d new Address(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_PRIVATE_ADDRESS).get()).value,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            \"Y\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Rating rating \u003d Rating.DEFAULT_INITIAL_RATING;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        Salary salary \u003d Salary.DEFAULT_INITIAL_SALARY;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        OtHour hours \u003d OtHour.DEFAULT_INITIAL_OTHOUR;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        OtRate rate \u003d OtRate.DEFAULT_INITIAL_OTRATE;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        PayDeductibles deductibles \u003d PayDeductibles.DEFAULT_INITIAL_DEDUCTIBLES;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Department department \u003d ParserUtil.parseDepartment(argMultimap.getValue(PREFIX_DEPARTMENT).get());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Manager manager \u003d ParserUtil.parseManager(argMultimap.getValue(PREFIX_MANAGER).get());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Feedback feedback \u003d Feedback.DEFAULT_INITIAL_FEEDBACK;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        boolean favourite \u003d false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, rating, department, manager,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            salary, hours, rate, deductibles, feedback, tagList, favourite);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Throws a ParseException to tell user that the command format was entered wrongly."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public static void wrongFormat() throws ParseException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 2,
      "IamRENCE": 4,
      "NgeowXiuQi": 9,
      "abtyx": 63,
      "DanKhoo": 7,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public static final Prefix PREFIX_PRIVATE_PHONE \u003d new Prefix(\"pp/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public static final Prefix PREFIX_PRIVATE_EMAIL \u003d new Prefix(\"pe/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public static final Prefix PREFIX_PRIVATE_ADDRESS \u003d new Prefix(\"pa/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final Prefix PREFIX_DEPARTMENT \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final Prefix PREFIX_MANAGER \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static final Prefix PREFIX_RATING \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final Prefix PREFIX_SALARY \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final Prefix PREFIX_OTHOUR \u003d new Prefix(\"oth/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final Prefix PREFIX_OTRATE \u003d new Prefix(\"otr/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final Prefix PREFIX_DEDUCTIBLES \u003d new Prefix(\"de/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static final Prefix PREFIX_FEEDBACK \u003d new Prefix(\"fb/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 2,
      "NgeowXiuQi": 5,
      "abtyx": 3,
      "DanKhoo": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEDUCTIBLES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEPARTMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MANAGER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OTHOUR;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OTRATE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALARY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                        PREFIX_DEPARTMENT, PREFIX_MANAGER, PREFIX_SALARY, PREFIX_OTHOUR,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                        PREFIX_OTRATE, PREFIX_DEDUCTIBLES, PREFIX_TAG);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SALARY).isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            editPersonDescriptor.setSalary(ParserUtil.parseSalary(argMultimap.getValue(PREFIX_SALARY).get()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        if (argMultimap.getValue(PREFIX_OTHOUR).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            editPersonDescriptor.setHours(ParserUtil.parseHours(argMultimap.getValue(PREFIX_OTHOUR).get()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        if (argMultimap.getValue(PREFIX_OTRATE).isPresent()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            editPersonDescriptor.setRate(ParserUtil.parseRate(argMultimap.getValue(PREFIX_OTRATE).get()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DEDUCTIBLES).isPresent()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            editPersonDescriptor.setDeductibles(ParserUtil.parseDeductibles(argMultimap"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                .getValue(PREFIX_DEDUCTIBLES).get()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DEPARTMENT).isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            editPersonDescriptor.setDepartment(ParserUtil.parseDepartment(argMultimap.getValue(PREFIX_DEPARTMENT)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                    .get()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MANAGER).isPresent()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            editPersonDescriptor.setManager(ParserUtil.parseManager(argMultimap.getValue(PREFIX_MANAGER).get()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 19,
      "IamRENCE": 4,
      "DanKhoo": 8,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FavouriteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.logic.commands.FavouriteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " * Parses input arguments and creates a new FavouriteCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "public class FavouriteCommandParser implements Parser\u003cFavouriteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FavouriteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     * and returns an FavouriteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public FavouriteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            return new FavouriteCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FavouriteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FeedbackCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FEEDBACK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.logic.commands.FeedbackCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Feedback;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * Parses input arguments and creates a new FeedbackCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class FeedbackCommandParser implements Parser\u003cFeedbackCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FeedbackCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * and returns an FeedbackCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public FeedbackCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_FEEDBACK);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Index index \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        String feedbackInput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Feedback feedback \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        if (!isPrefixPresent(argMultimap, PREFIX_FEEDBACK) || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FeedbackCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FeedbackCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        feedbackInput \u003d argMultimap.getValue(PREFIX_FEEDBACK).get();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            feedback \u003d new Feedback(feedbackInput);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            throw new ParseException(iae.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return new FeedbackCommand(index, feedback);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Returns true if prefix does not contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private static boolean isPrefixPresent(ArgumentMultimap argumentMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return argumentMultimap.getValue(prefix).isPresent();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindDepartmentCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.logic.commands.FindDepartmentCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.DepartmentContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " * Parses input arguments and creates a new FindDepartmentCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "public class FindDepartmentCommandParser implements Parser\u003cFindDepartmentCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindDepartmentCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * and returns an FindDepartmentCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public FindDepartmentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindDepartmentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        String[] departmentKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return new FindDepartmentCommand(new DepartmentContainsKeywordsPredicate(Arrays.asList(departmentKeywords)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanKhoo": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindEmailCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.logic.commands.FindEmailCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.EmailContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " * Parses input arguments and creates a new FindEmailCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "public class FindEmailCommandParser implements Parser\u003cFindEmailCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindEmailCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * and returns an FindEmailCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public FindEmailCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindEmailCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        String[] emailKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return new FindEmailCommand(new EmailContainsKeywordsPredicate(Arrays.asList(emailKeywords)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanKhoo": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindManagerCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.logic.commands.FindManagerCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.ManagerContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " * Parses input arguments and creates a new FindManagerCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "public class FindManagerCommandParser implements Parser\u003cFindManagerCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindManagerCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * and returns an FindManagerCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public FindManagerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindManagerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        String[] managerKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return new FindManagerCommand(new ManagerContainsKeywordsPredicate(Arrays.asList(managerKeywords)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanKhoo": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Feedback;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Manager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.OtHour;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.OtRate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.PayDeductibles;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Rating;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.Salary;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * Parses a (@code String salary) into an (@code Salary)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * @param salary"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * @return A salary object after trimming."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static Salary parseSalary(String salary) throws ParseException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        requireNonNull(salary);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        String trimmedSalary \u003d salary.trim();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        if (!Salary.isValidSalary(trimmedSalary)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            throw new ParseException(Salary.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return new Salary(trimmedSalary);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * Parses a (@code String hours) into an (@code OtHour)."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * @param hours"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * @return An OtHour object after trimming."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static OtHour parseHours(String hours) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        requireNonNull(hours);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        String trimmedHours \u003d hours.trim();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        if (!OtHour.isValidTwoDecimalNumber(trimmedHours)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            throw new ParseException(OtHour.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return new OtHour(trimmedHours);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * Parses a (@code String rate) into an (@code OtRate)."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * @param rate"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * @return An OtRate object after trimming."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static OtRate parseRate(String rate) throws ParseException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        requireNonNull(rate);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        String trimmedRate \u003d rate.trim();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        if (!OtRate.isValidTwoDecimalNumber(trimmedRate)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            throw new ParseException(OtRate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return new OtRate(trimmedRate);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * Parses a (@code String deductibles) into an (@code PayDeductibles)."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * @param deductibles"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * @return A PayDeductibles object after trimming."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static PayDeductibles parseDeductibles(String deductibles) throws ParseException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        requireNonNull(deductibles);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        String trimmedDeductibles \u003d deductibles.trim();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        if (!PayDeductibles.isValidTwoDecimalNumber(trimmedDeductibles)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            throw new ParseException(PayDeductibles.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return new PayDeductibles(trimmedDeductibles);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Parses a {@code String department} into an {@code Department}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Leading and trailing whitespaces wil be trimmed."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * @throws ParseException if the given {@code department} is invalid."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static Department parseDepartment(String department) throws ParseException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        requireNonNull(department);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        String trimmedDepartment \u003d department.trim();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        if (!Department.isValidDepartment(trimmedDepartment)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            throw new ParseException(Department.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return new Department(trimmedDepartment);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Parses a {@code String manager} into an {@code Manager}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Leading and trailing whitespaces wil be trimmed."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * @throws ParseException if the given {@code manager} is invalid."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static Manager parseManager(String manager) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        requireNonNull(manager);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        String trimmedManager \u003d manager.trim();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        if (!Manager.isValidManager(trimmedManager)) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            throw new ParseException(Manager.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return new Manager(trimmedManager);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Parses a {@code String privacy} into a {@code String}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * @throws ParseException if the given {@code privacy} is invalid."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public static String parsePrivacy(String privacy) throws ParseException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        requireNonNull(privacy);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        String trimmedPrivacy \u003d privacy.trim().toUpperCase();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (!trimmedPrivacy.equals(\"Y\") \u0026\u0026 (!trimmedPrivacy.equals(\"N\"))) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            throw new ParseException(\"Privacy option should be only Y or N!\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        return trimmedPrivacy;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Parses a {@code String feedback} into an {@code Feedback}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Leading and trailing whitespaces wil be trimmed."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @throws ParseException if the given {@code feedback} is invalid."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static Feedback parseFeedback(String feedback) throws ParseException {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        requireNonNull(feedback);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        String trimmedFeedback \u003d feedback.trim();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        if (!Feedback.isValidFeedback(trimmedFeedback)) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            throw new ParseException(Feedback.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return new Feedback(trimmedFeedback);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Parses a {@code String rating} into a {@code Rating}."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @throws ParseException if the given {@code rating} is invalid."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static Rating parseRating(String rating) throws ParseException {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        requireNonNull(rating);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        String trimmedRating \u003d rating.trim();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        if (!Rating.isValidInputRating(trimmedRating)) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            throw new ParseException(Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return new Rating(trimmedRating);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 30,
      "NgeowXiuQi": 72,
      "abtyx": 17,
      "DanKhoo": 32,
      "-": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/PrivacyCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abtyx"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abtyx"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIVATE_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abtyx"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIVATE_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abtyx"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIVATE_ADDRESS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.logic.commands.PrivacyCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.logic.commands.PrivacyCommand.FieldsToChange;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abtyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abtyx"
        },
        "content": " * Parses input arguments and creates a new PrivacyCommand object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abtyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abtyx"
        },
        "content": "public class PrivacyCommandParser implements Parser\u003cPrivacyCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of PrivacyCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * and returns a PrivacyCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public PrivacyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, PrivacyCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        FieldsToChange fieldsToChange \u003d new FieldsToChange();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            fieldsToChange.setPhonePrivacy(ParserUtil.parsePrivacy(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            fieldsToChange.setEmailPrivacy(ParserUtil.parsePrivacy(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            fieldsToChange.setAddressPrivacy(ParserUtil.parsePrivacy(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (!fieldsToChange.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            throw new ParseException(PrivacyCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        return new PrivacyCommand(index, fieldsToChange);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abtyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abtyx": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RateCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.logic.commands.RateCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Rating;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * Edits the rating details of an existing person in SSENISUB."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class RateCommandParser implements Parser\u003cRateCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RateCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * and returns an RateCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public RateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_RATING);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Index index \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        String ratingNum;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Rating rating \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        if (!isPrefixPresent(argMultimap, PREFIX_RATING) || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        ratingNum \u003d argMultimap.getValue(PREFIX_RATING).get();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            rating \u003d new Rating(ratingNum);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            throw new ParseException(iae.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return new RateCommand(index, rating);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Returns true if prefix does not contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private static boolean isPrefixPresent(ArgumentMultimap argumentMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return argumentMultimap.getValue(prefix).isPresent();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SsenisubParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.logic.commands.FavouriteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.logic.commands.FeedbackCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.logic.commands.FindDepartmentCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.logic.commands.FindEmailCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.logic.commands.FindManagerCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.logic.commands.PrivacyCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.logic.commands.RateCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.logic.commands.SortDeptCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.logic.commands.SortRatingDownCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.logic.commands.SortRatingUpCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.logic.commands.UnfavouriteCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class SsenisubParser {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        case FavouriteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        case FavouriteCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            return new FavouriteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        case UnfavouriteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        case UnfavouriteCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            return new UnfavouriteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            return new SortCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        case SortDeptCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            return new SortDeptCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        case SortRatingUpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            return new SortRatingUpCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        case SortRatingDownCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        case SortRatingDownCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            return new SortRatingDownCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        case FindDepartmentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            return new FindDepartmentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        case FindEmailCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            return new FindEmailCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        case FindManagerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            return new FindManagerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        case RateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            return new RateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        case PrivacyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            return new PrivacyCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        case FeedbackCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            return new FeedbackCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 34,
      "IamRENCE": 7,
      "abtyx": 3,
      "DanKhoo": 9,
      "-": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UnfavouriteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.logic.commands.UnfavouriteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " * Parses input arguments and creates a new FavouriteCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "public class UnfavouriteCommandParser implements Parser\u003cUnfavouriteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UnfavouriteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     * and returns an UnfavouriteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public UnfavouriteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            return new UnfavouriteCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnfavouriteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    void resetData(ReadOnlySsenisub newData);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /** Returns Ssenisub */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    ReadOnlySsenisub getSsenisub();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in Ssenisub."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Returns true if a person with the same Name as {@code person} exists in Ssenisub."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    boolean hasName(Person person);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Returns true if a person has the same Phone Number as {@code person} exists in Ssenisub."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    boolean hasPhoneNumber(Person person);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Returns true if a person has the same Email as {@code person} exists in Ssenisub."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    boolean hasEmail(Person person);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * The person must exist in Ssenisub."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * {@code person} must not already exist in Ssenisub."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * {@code target} must exist in Ssenisub."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in Ssenisub."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void updatePerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     * Adds the given person to favourite."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * The person must exist in Ssenisub."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    void favouritePerson(Person target, Person favouritedPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     * Removes the given person from favourite."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     * The person must exist in the favourites."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    void unfavouritePerson(Person target, Person unfavouritedPerson);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     * Sorts the person list by name"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    void sortByName();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     * Sorts the person list by dept"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    void sortByDept();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     * Sorts the person list by rating from lowest to highest"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    void sortByRatingUp();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     * Sorts the person list by rating from highest to lowest"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    void sortByRatingDown();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    boolean canUndoSsenisub();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    boolean canRedoSsenisub();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    void undoSsenisub();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    void redoSsenisub();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    void commitSsenisub();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 31,
      "IamRENCE": 14,
      "abtyx": 15,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.commons.events.model.SsenisubChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * Represents the in-memory model of Ssenisub data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private final VersionedSsenisub versionedSsenisub;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Initializes a ModelManager with the given Ssenisub and userPrefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public ModelManager(ReadOnlySsenisub ssenisub, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        requireAllNonNull(ssenisub, userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        logger.fine(\"Initializing with SSENISUB: \" + ssenisub + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        versionedSsenisub \u003d new VersionedSsenisub(ssenisub);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedSsenisub.getPersonList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        this(new Ssenisub(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void resetData(ReadOnlySsenisub newData) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        versionedSsenisub.resetData(newData);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        indicateSsenisubChanged();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public ReadOnlySsenisub getSsenisub() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return versionedSsenisub;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private void indicateSsenisubChanged() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        raise(new SsenisubChangedEvent(versionedSsenisub));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return versionedSsenisub.hasPerson(person);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public boolean hasName(Person person) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        return versionedSsenisub.hasName(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public boolean hasPhoneNumber(Person person) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        return versionedSsenisub.hasPhoneNumber(person);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public boolean hasEmail(Person person) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        return versionedSsenisub.hasEmail(person);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        versionedSsenisub.removePerson(target);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        indicateSsenisubChanged();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        versionedSsenisub.addPerson(person);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        indicateSsenisubChanged();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        versionedSsenisub.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        indicateSsenisubChanged();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void favouritePerson(Person target, Person favouritedPerson) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        requireAllNonNull(target, favouritedPerson);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        versionedSsenisub.favouritePerson(target, favouritedPerson);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        indicateSsenisubChanged();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void unfavouritePerson(Person target, Person unfavouritedPerson) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        requireAllNonNull(target, unfavouritedPerson);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        versionedSsenisub.favouritePerson(target, unfavouritedPerson);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        indicateSsenisubChanged();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void sortByName() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        versionedSsenisub.sortByName();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        indicateSsenisubChanged();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void sortByDept() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        versionedSsenisub.sortByDept();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        indicateSsenisubChanged();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void sortByRatingUp() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        versionedSsenisub.sortByRatingUp();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        indicateSsenisubChanged();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void sortByRatingDown() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        versionedSsenisub.sortByRatingDown();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        indicateSsenisubChanged();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * {@code versionedSsenisub}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public boolean canUndoSsenisub() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return versionedSsenisub.canUndo();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public boolean canRedoSsenisub() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return versionedSsenisub.canRedo();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void undoSsenisub() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        versionedSsenisub.undo();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        indicateSsenisubChanged();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void redoSsenisub() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        versionedSsenisub.redo();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        indicateSsenisubChanged();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void commitSsenisub() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        versionedSsenisub.commit();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return versionedSsenisub.equals(other.versionedSsenisub)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 37,
      "IamRENCE": 43,
      "abtyx": 15,
      "-": 116
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlySsenisub.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public interface ReadOnlySsenisub {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Ssenisub.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class Ssenisub implements ReadOnlySsenisub {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public Ssenisub() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Creates an SSENISUB using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public Ssenisub(ReadOnlySsenisub toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Resets the existing data of this {@code Ssenisub} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void resetData(ReadOnlySsenisub newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in Ssenisub."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Returns true if a person with the same Name as {@code person} exists in Ssenisub."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public boolean hasName(Person person) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        return persons.containsName(person);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Returns true if a person with the same Phone Number as {@code person} exists in Ssenisub."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public boolean hasPhoneNumber(Person person) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        return persons.containsPhoneNumber(person);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Returns true if a person with the same Email as {@code person} exists in Ssenisub."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public boolean hasEmail(Person person) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        return persons.containsEmail(person);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Adds a person to SSENISUB."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * The person must not already exist in SSENISUB."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * {@code target} must exist in SSENISUB."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in SSENISUB."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code favouritedReadOnlyPerson}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     * Sorts the list to show favourite contacts first."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * {@code Ssenisub}\u0027s tag list will be updated with the tags of {@code favouritedReadOnlyPerson}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void favouritePerson(Person target, Person favouritedPerson) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        requireNonNull(favouritedPerson);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        // Person favouritedPerson \u003d new Person(favouritedPerson);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        // TODO: the tags master list will be updated even though the below line fails."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        // This can cause the tags master list to have additional tags that are not tagged to any person"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        // in the person list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        persons.setPerson(target, favouritedPerson);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        UniquePersonList notFavouriteList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        UniquePersonList favouriteList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        for (Person person : persons) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            if (person.getFavourite()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                favouriteList.add(person);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                notFavouriteList.add(person);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        persons.setPersons(favouriteList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        for (Person person : notFavouriteList) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            persons.add(person);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     * Sorts the person list by name"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void sortByName() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        persons.sortByName();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     * Sorts the person list by department"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void sortByDept() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        persons.sortByDept();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     * Sorts the person list by rating from lowest to highest"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void sortByRatingUp() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        persons.sortByRatingUp();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     * Sorts the person list by rating from highest to lowest"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void sortByRatingDown() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        persons.sortByRatingDown();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Removes {@code key} from this {@code Ssenisub}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * {@code key} must exist in SSENISUB."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                || (other instanceof Ssenisub // instanceof handles nulls"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                \u0026\u0026 persons.equals(((Ssenisub) other).persons));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 61,
      "IamRENCE": 16,
      "abtyx": 23,
      "-": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private Path ssenisubFilePath \u003d Paths.get(\"data\" , \"ssenisub.xml\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(500, 500, 0, 0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public Path getSsenisubFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return ssenisubFilePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void setSsenisubFilePath(Path ssenisubFilePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        this.ssenisubFilePath \u003d ssenisubFilePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                \u0026\u0026 Objects.equals(ssenisubFilePath, o.ssenisubFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return Objects.hash(guiSettings, ssenisubFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + ssenisubFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        System.out.println(sb.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 9,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedSsenisub.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * {@code Ssenisub} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class VersionedSsenisub extends Ssenisub {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private final List\u003cReadOnlySsenisub\u003e ssenisubStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public VersionedSsenisub(ReadOnlySsenisub initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        ssenisubStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        ssenisubStateList.add(new Ssenisub(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Saves a copy of the current {@code Ssenisub} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        ssenisubStateList.add(new Ssenisub(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        ssenisubStateList.subList(currentStatePointer + 1, ssenisubStateList.size()).clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Restores Ssenisub to its previous state."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        resetData(ssenisubStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Restores Ssenisub to its previously undone state."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        resetData(ssenisubStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code undo()} has address book states to undo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code redo()} has address book states to redo."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return currentStatePointer \u003c ssenisubStateList.size() - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        if (!(other instanceof VersionedSsenisub)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        VersionedSsenisub otherVersionedSsenisub \u003d (VersionedSsenisub) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return super.equals(otherVersionedSsenisub)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                \u0026\u0026 ssenisubStateList.equals(otherVersionedSsenisub.ssenisubStateList)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedSsenisub.currentStatePointer;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            super(\"Current state pointer at start of SSENISUB State list, unable to undo.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            super(\"Current state pointer at end of SSENISUB State list, unable to redo.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 21,
      "-": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Address.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * Represents a Person\u0027s address in SSENISUB."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            + \"Maximum Length: 50 characters\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].{0,49}\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    private final boolean isPrivate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        isPrivate \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Constructs a private {@code Address}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * @param privacy states that this address is private."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public Address(String address, String privacy) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (privacy.equals(\"Y\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            isPrivate \u003d true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            isPrivate \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Getter for isPrivate"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * @return isPrivate"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public boolean isPrivate() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        return isPrivate;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                \u0026\u0026 isPrivate() \u003d\u003d ((Address) other).isPrivate(); // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "abtyx": 26,
      "DanKhoo": 3,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Department.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * Represents a Person\u0027s department in SSENISUB."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDepartment(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "public class Department {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            \"Departments should only contain alphabetic characters and spaces, and it should not be blank\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            + \"Maximum Length: 30 characters\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * The first character of the department must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alpha}][\\\\p{Alpha} ]{0,29}\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Constructs a {@code Department}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * @param department A valid department."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public Department(String department) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        requireNonNull(department);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        checkArgument(isValidDepartment(department), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        value \u003d department;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Returns true if a given string is a valid department."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static boolean isValidDepartment(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                || (other instanceof Department // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                \u0026\u0026 value.equals(((Department) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "DanKhoo": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/DepartmentContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Department} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "public class DepartmentContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public DepartmentContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getDepartment().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                || (other instanceof DepartmentContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                \u0026\u0026 keywords.equals(((DepartmentContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanKhoo": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Email.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * Represents a Person\u0027s email in SSENISUB."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            + \"Maximum Length: 50 characters\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]{1,50}\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    private final boolean isPrivate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        isPrivate \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Constructs a private {@code Email}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * @param privacy states that this email is private."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public Email(String email, String privacy) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (privacy.equals(\"Y\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            isPrivate \u003d true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            isPrivate \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Getter for isPrivate"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * @return isPrivate"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public boolean isPrivate() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        return isPrivate;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value))"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                \u0026\u0026 isPrivate() \u003d\u003d ((Email) other).isPrivate(); // state check"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "abtyx": 26,
      "DanKhoo": 2,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/EmailContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Email} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "public class EmailContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public EmailContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getEmail().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                || (other instanceof EmailContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                \u0026\u0026 keywords.equals(((EmailContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanKhoo": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Feedback.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * Represents a Person\u0027s feedback number in SSENISUB."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidFeedback(String)}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class Feedback {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static final Feedback DEFAULT_INITIAL_FEEDBACK \u003d new Feedback(\"-NO FEEDBACK YET-\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Feedback can take any values, and it should not be blank\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            + \"Maximum Length: 65 characters\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static final String MESSAGE_PROFANITY_FOUND \u003d \"Feedback input rejected, because profanity found: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].{0,64}\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Constructs a {@code Feedback}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @param feedback A valid feedback."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public Feedback(String feedback) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        requireNonNull(feedback);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        checkArgument(isValidFeedback(feedback), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        checkArgument(hasNoProfanity(feedback), MESSAGE_PROFANITY_FOUND"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                + new ProfanityFilter().findProfanity(feedback));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        value \u003d feedback;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Returns true if a given string is a valid feedback number."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static boolean isValidFeedback(String test) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Returns true if a given string is has no profanities."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static boolean hasNoProfanity(String test) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return (new ProfanityFilter().findProfanity(test).size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                || (other instanceof Feedback // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                \u0026\u0026 value.equals(((Feedback) other).value)); // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author PimDeWitte"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    //Reused from https://gist.github.com/PimDeWitte/c04cc17bc5fa9d7e3aee6670d4105941 with minor modifications"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Simple profanity filter written in Java for efficient comparison."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Runtime grows based on string input, not list size."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static class ProfanityFilter {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        private static Map\u003cString, String[]\u003e words \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        private static int largestWordLength \u003d 0;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        public ProfanityFilter() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            loadConfigs();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "         *  Load bad words from txt file"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "         */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        public static void loadConfigs() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                //Path badWordsFile \u003d Paths.get(\"docs\", \"words to ban\", \"Bad_Words_List.txt\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                //BufferedReader reader \u003d new BufferedReader(new FileReader(badWordsFile.toFile()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                BufferedReader reader \u003d new BufferedReader(new InputStreamReader("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                        MainApp.class.getResourceAsStream(\"/words to ban/Bad_Words_List.txt\")));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                String line \u003d \"\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                while ((line \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                    String[] content \u003d null;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                        content \u003d line.split(\",\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                        if (content.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                            continue;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                        String word \u003d content[0];"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                        String[] ignoreInCombinationWithWords \u003d new String[]{};"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                        if (content.length \u003e 1) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                            ignoreInCombinationWithWords \u003d content[1].split(\"_\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                        if (word.length() \u003e largestWordLength) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                            largestWordLength \u003d word.length();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                        words.put(word.replaceAll(\" \", \"\"), ignoreInCombinationWithWords);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                    } catch (Exception e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                        e.printStackTrace();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "         * Iterates over a String input and checks whether a cuss word was found in a list,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "         * then checks if the word should be ignored (e.g. bass contains the word *ss)."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "         * @param rawInput"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "         * @return list of bad words found"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        public ArrayList\u003cString\u003e badWordsFound(String rawInput) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            String input \u003d rawInput;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            // remove leetspeak"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            input \u003d input.replaceAll(\"1\", \"i\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            input \u003d input.replaceAll(\"!\", \"i\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            input \u003d input.replaceAll(\"3\", \"e\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            input \u003d input.replaceAll(\"4\", \"a\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            input \u003d input.replaceAll(\"@\", \"a\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            input \u003d input.replaceAll(\"5\", \"s\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            input \u003d input.replaceAll(\"7\", \"t\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            input \u003d input.replaceAll(\"0\", \"o\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            input \u003d input.replaceAll(\"9\", \"g\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            ArrayList\u003cString\u003e badWords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            input \u003d input.toLowerCase().replaceAll(\"[^a-zA-Z]\", \"\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            // Iterate over each letter in the word"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            for (int start \u003d 0; start \u003c input.length(); start++) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                // From each letter, keep going to find bad words until either the end of the sentence is reached,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                // or the max word length is reached."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                for (int offset \u003d 1; offset \u003c (input.length() + 1 - start) \u0026\u0026 offset \u003c largestWordLength; offset++) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                    String wordToCheck \u003d input.substring(start, start + offset);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                    // Hard coded because \"ass\" itself is a profanity but contained in many clean words"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                    if (\"ass\".equals(wordToCheck)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                        badWords.add(wordToCheck);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                    if (words.containsKey(wordToCheck)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                        // for example, if you want to say the word bass, that should be possible."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                        String[] ignoreCheck \u003d words.get(wordToCheck);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                        boolean ignore \u003d false;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                        for (int s \u003d 0; s \u003c ignoreCheck.length; s++) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                            if (input.contains(ignoreCheck[s])) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                                ignore \u003d true;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                                break;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                        if (!ignore) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                            badWords.add(wordToCheck);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            return badWords;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "         * Looks for bad words and returns the list of them"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "         * @param input"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "         * @return list of bad words"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "         */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        public ArrayList\u003cString\u003e findProfanity(String input) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            ArrayList\u003cString\u003e badWords \u003d badWordsFound(input);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            return badWords;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 196,
      "DanKhoo": 3,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Manager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * Represents a Person\u0027s manager in SSENISUB."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidManager(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "public class Manager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            \"Managers should only contain alphabetical characters and spaces, and it should not be blank\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + \"Maximum Length: 50 characters\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * The first character of the manager must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alpha}][\\\\p{Alpha} ]{0,49}\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public Manager(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        checkArgument(isValidManager(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static boolean isValidManager(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                || (other instanceof Manager // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                \u0026\u0026 fullName.equals(((Manager) other).fullName)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "DanKhoo": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ManagerContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Manager} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "public class ManagerContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public ManagerContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getManager().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                || (other instanceof ManagerContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                \u0026\u0026 keywords.equals(((ManagerContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanKhoo": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * Represents a Person\u0027s name in SSENISUB."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            \"Names should only contain alphabetical characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alpha}][\\\\p{Alpha} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "DanKhoo": 2,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/OtHour.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * OtHour class to store the necessary information about overtime hours"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "public class OtHour {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final OtHour DEFAULT_INITIAL_OTHOUR \u003d new OtHour(\"0\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \"Overtime hours should only contain numbers up to two decimal places \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "          + \"with no spaces or commas. Decimal places allowed\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String TWO_DECIMAL_DIGITS_VALIDATION_REGEX \u003d \"^\\\\d+(\\\\.\\\\d{1,2})?$\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public final String overTimeHour;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public OtHour(String value) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        checkArgument(isValidTwoDecimalNumber(value));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        overTimeHour \u003d value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static boolean isValidTwoDecimalNumber(String test) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return test.matches(TWO_DECIMAL_DIGITS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return overTimeHour;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            || (other instanceof OtHour // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            \u0026\u0026 overTimeHour.equals(((OtHour) other).overTimeHour)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/OtRate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * OtRate class to store the necessary information about overtime rate"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "public class OtRate {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final OtRate DEFAULT_INITIAL_OTRATE \u003d new OtRate(\"0\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \"Overtime hours should only contain numbers up to two decimal places \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        + \"with no spaces or commas. Decimal places allowed\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String TWO_DECIMAL_DIGITS_VALIDATION_REGEX \u003d \"^\\\\d+(\\\\.\\\\d{1,2})?$\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public final String overTimeRate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public OtRate(String value) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        checkArgument(isValidTwoDecimalNumber(value));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        overTimeRate \u003d value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static boolean isValidTwoDecimalNumber(String test) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return test.matches(TWO_DECIMAL_DIGITS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return overTimeRate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            || (other instanceof OtRate // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            \u0026\u0026 overTimeRate.equals(((OtRate) other).overTimeRate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PayDeductibles.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * PayDeductibles class to store the necessary information about Pay Deductibles"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "public class PayDeductibles {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final PayDeductibles DEFAULT_INITIAL_DEDUCTIBLES \u003d new PayDeductibles(\"0\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \"Overtime hours should only contain numbers up to two decimal places \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        + \"with no spaces or commas. Decimal places allowed\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String TWO_DECIMAL_DIGITS_VALIDATION_REGEX \u003d \"^\\\\d+(\\\\.\\\\d{1,2})?$\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public final String payDeductibles;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public PayDeductibles(String value) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        checkArgument(isValidTwoDecimalNumber(value));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        payDeductibles \u003d value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static boolean isValidTwoDecimalNumber(String test) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return test.matches(TWO_DECIMAL_DIGITS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return payDeductibles;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            || (other instanceof PayDeductibles // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            \u0026\u0026 payDeductibles.equals(((PayDeductibles) other).payDeductibles)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * Represents a Person in SSENISUB."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    //"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private final Department department;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private final Manager manager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    private final Salary salary;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    private final OtHour otHours;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    private final OtRate otRate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    private final PayDeductibles deductibles;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private final Rating rating;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private final Feedback feedback;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    private boolean favourite;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Rating rating, Department department,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                  Manager manager, Salary salary, OtHour hours, OtRate rate,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                  PayDeductibles deductibles, Feedback feedback, Set\u003cTag\u003e tags, boolean favourite) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        requireAllNonNull(name, phone, email, address, rating, department, manager, tags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        this.salary \u003d salary;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        this.otHours \u003d hours;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        this.otRate \u003d rate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        this.deductibles \u003d deductibles;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        this.department \u003d department;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        this.manager \u003d manager;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        this.feedback \u003d feedback;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        this.favourite \u003d favourite;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public Salary getSalary() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return salary;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public OtHour getOtHours() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return otHours;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public OtRate getOtRate() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return otRate;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public PayDeductibles getDeductibles() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return deductibles;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public Rating getRating() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return rating;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public Department getDepartment() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return department;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public Manager getManager() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return manager;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public boolean getFavourite() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        return favourite;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public Feedback getFeedback() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return feedback;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Returns true if both persons have the same name."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public boolean hasSameName(Person otherPerson) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Returns true if both persons have the same phone number."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public boolean hasSamePhone(Person otherPerson) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().value.equals(getPhone().value);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Returns true if both persons have the same email."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public boolean hasSameEmail(Person otherPerson) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                \u0026\u0026 otherPerson.getSalary().equals(getSalary())"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                \u0026\u0026 otherPerson.getOtHours().equals(getOtHours())"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                \u0026\u0026 otherPerson.getOtRate().equals(getOtRate())"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                \u0026\u0026 otherPerson.getDeductibles().equals(getDeductibles())"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                \u0026\u0026 otherPerson.getRating().equals(getRating())"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                \u0026\u0026 otherPerson.getDepartment().equals(getDepartment())"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                \u0026\u0026 otherPerson.getManager().equals(getManager())"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                \u0026\u0026 otherPerson.getFeedback().equals(getFeedback())"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                \u0026\u0026 otherPerson.getFavourite() \u003d\u003d getFavourite()"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        return Objects.hash(name, phone, email, address, rating, department, manager, feedback, tags, favourite);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                .append(\" Salary: \")"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                .append(getSalary())"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                .append(\" OT Hours: \")"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                .append(getOtHours())"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                .append(\" OT Rate: \")"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                .append(getOtRate())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                .append(\" Deductibles: \")"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                .append(getDeductibles())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                .append(\" Rating: \")"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                .append(getRating())"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                .append(\" Department: \")"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                .append(getDepartment())"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                .append(\" Manager: \")"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                .append(getManager())"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                .append(\" Feedback: \")"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                .append(getFeedback())"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                .append(\" Favourite: \")"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                .append(getFavourite())"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 12,
      "IamRENCE": 18,
      "NgeowXiuQi": 39,
      "abtyx": 37,
      "DanKhoo": 18,
      "-": 114
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Phone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * Represents a Person\u0027s phone number in SSENISUB."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            \"Phone numbers should only contain numbers, starts with digit \u00276\u0027, \u00278\u0027 or \u00279\u0027 and it should be 8 digits \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                    + \"long\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^([6,8-9]{1})([0-9]{7})\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    private final boolean isPrivate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        isPrivate \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Constructs a private {@code Phone}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * @param privacy states that this phone is private."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public Phone(String phone, String privacy) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (privacy.equals(\"Y\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            isPrivate \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            isPrivate \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Getter for isPrivate"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * @return isPrivate"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public boolean isPrivate() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        return isPrivate;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value))"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                \u0026\u0026 isPrivate() \u003d\u003d ((Phone) other).isPrivate(); // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "abtyx": 23,
      "DanKhoo": 3,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Rating.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * Represents a Person\u0027s rating number in SSENISUB."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRating(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class Rating {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static final Rating DEFAULT_INITIAL_RATING \u003d new Rating(\"0\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            \"Ratings should only contain numbers, and it should be between 1 to 10\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[0-9]|10\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static final String VALIDATION_INPUT_REGEX \u003d \"[1-9]|10\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Constructs a {@code Rating}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @param rating A valid rating."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public Rating(String rating) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        requireNonNull(rating);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        checkArgument(isValidRating(rating), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        value \u003d rating;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Returns true if a given string is a valid rating number."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static boolean isValidRating(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Returns true if a given string is a valid rating number."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static boolean isValidInputRating(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return test.matches(VALIDATION_INPUT_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                || (other instanceof Rating // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                \u0026\u0026 value.equals(((Rating) other).value)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Salary.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " * Salary class to store the necessary information about a salary."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "public class Salary {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final Salary DEFAULT_INITIAL_SALARY \u003d new Salary(\"0\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            \"Salary should only contain integers with no spaces or commas\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String SALARY_VALIDATION_REGEX \u003d \"^([0-9]+.[0-9]{1,2})|0$\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public final String salary;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public Salary(String value) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        checkArgument(isValidSalary(value), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        salary \u003d value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static boolean isValidSalary(String test) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return test.matches(SALARY_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            || (other instanceof Salary // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            \u0026\u0026 salary.equals(((Salary) other).salary)); // state check"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return String.valueOf(salary);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Returns true if the list contains a person with the same Name as the given argument."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public boolean containsName(Person toCheck) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::hasSameName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Returns true if the list contains a person with the same Phone Number as the given argument."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public boolean containsPhoneNumber(Person toCheck) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::hasSamePhone);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Returns true if the list contains a person with the same Email as the given argument."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public boolean containsEmail(Person toCheck) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::hasSameEmail);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     * Sorts the person list by name."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void sortByName() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Comparator\u003cPerson\u003e byName \u003d Comparator.comparing(person -\u003e person.getName().toString());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Comparator\u003cPerson\u003e byFavReversed \u003d Comparator.comparing(person -\u003e String.valueOf(person.getFavourite()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Comparator\u003cPerson\u003e byFav \u003d byFavReversed.reversed();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Comparator\u003cPerson\u003e byFavthenName \u003d byFav.thenComparing(byName);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        internalList.sort(byFavthenName);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     * Sorts the person list by department."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void sortByDept() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Comparator\u003cPerson\u003e byDept \u003d Comparator.comparing(person -\u003e person.getDepartment().toString());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Comparator\u003cPerson\u003e byName \u003d Comparator.comparing(person -\u003e person.getName().toString());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Comparator\u003cPerson\u003e byFavReversed \u003d Comparator.comparing(person -\u003e String.valueOf(person.getFavourite()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Comparator\u003cPerson\u003e byFav \u003d byFavReversed.reversed();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Comparator\u003cPerson\u003e byDeptthenFav \u003d byDept.thenComparing(byFav);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Comparator\u003cPerson\u003e byDeptthenFavthenName \u003d byDeptthenFav.thenComparing(byName);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        internalList.sort(byDeptthenFavthenName);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     * Sorts the person list by rating from lowest to highest."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void sortByRatingUp() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Comparator\u003cPerson\u003e byRatingUp \u003d Comparator.comparingInt(person -\u003e person.getRating().hashCode());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Comparator\u003cPerson\u003e byName \u003d Comparator.comparing(person -\u003e person.getName().toString());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Comparator\u003cPerson\u003e byFavReversed \u003d Comparator.comparing(person -\u003e String.valueOf(person.getFavourite()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Comparator\u003cPerson\u003e byFav \u003d byFavReversed.reversed();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Comparator\u003cPerson\u003e byRatingUpthenFav \u003d byRatingUp.thenComparing(byFav);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Comparator\u003cPerson\u003e byRatingUpthenFavthenName \u003d byRatingUpthenFav.thenComparing(byName);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        internalList.sort(byRatingUpthenFavthenName);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     * Sorts the person list by rating from highest to lowest."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void sortByRatingDown() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Comparator\u003cPerson\u003e byRatingUp \u003d Comparator.comparingInt(person -\u003e person.getRating().hashCode());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Comparator\u003cPerson\u003e byRatingDown \u003d byRatingUp.reversed();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Comparator\u003cPerson\u003e byName \u003d Comparator.comparing(person -\u003e person.getName().toString());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Comparator\u003cPerson\u003e byFavReversed \u003d Comparator.comparing(person -\u003e String.valueOf(person.getFavourite()));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Comparator\u003cPerson\u003e byFav \u003d byFavReversed.reversed();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Comparator\u003cPerson\u003e byRatingDownthenFav \u003d byRatingDown.thenComparing(byFav);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Comparator\u003cPerson\u003e byRatingDownthenFavthenName \u003d byRatingDownthenFav.thenComparing(byName);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        internalList.sort(byRatingDownthenFavthenName);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 68,
      "abtyx": 23,
      "-": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * Represents a Tag in SSENISUB."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.ReadOnlySsenisub;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.Ssenisub;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Feedback;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Manager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.OtHour;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.OtRate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.PayDeductibles;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Rating;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.Salary;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * Contains utility methods for populating {@code Ssenisub} with sample data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Rating(\"10\"), new Department(\"Accounting\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                    new Manager(\"Ben Leong\"), new Salary(\"2000\"), new OtHour(\"10\"), new OtRate(\"10\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                    new PayDeductibles(\"200\"), new Feedback(\"You have alot of potential.\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                    getTagSet(\"friends\"), false),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Rating(\"2\"), new Department(\"Marketing\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                    new Manager(\"Marcus Tan\"), new Salary(\"2500\"), new OtHour(\"5\"), new OtRate(\"20\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                    new PayDeductibles(\"250\"), new Feedback(\"Try to come earlier to work!\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                    getTagSet(\"colleagues\", \"friends\"), false),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Rating(\"5\"), new Department(\"Tech\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                    new Manager(\"Moses Lim\"), new Salary(\"3000\"), new OtHour(\"15\"), new OtRate(\"15\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                    new PayDeductibles(\"300\"), new Feedback(\"I am disappointed that you failed to seal the deal.\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                    getTagSet(\"neighbours\"), false),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Rating(\"8\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                    new Department(\"Accounting\"), new Manager(\"Lionel Lim\"), new Salary(\"3500\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                    new OtHour(\"25\"), new OtRate(\"10\"), new PayDeductibles(\"350\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                    new Feedback(\"Congratulations for hitting your KPI! Strive foe greatness.\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                    getTagSet(\"family\"), false),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Rating(\"7\"), new Department(\"Marketing\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                    new Manager(\"Edward Loh\"), new Salary(\"4000\"), new OtHour(\"40\"), new OtRate(\"10\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                    new PayDeductibles(\"400\"), new Feedback(\"I see you are making good progress with the client\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                    getTagSet(\"classmates\"), false),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Rating(\"3\"), new Department(\"Tech\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                    new Manager(\"Joanne Lee\"), new Salary(\"5000\"), new OtHour(\"10\"), new OtRate(\"10\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                    new PayDeductibles(\"500\"), new Feedback(\"Your work performance is worrying me.\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                    getTagSet(\"colleagues\"), false)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static ReadOnlySsenisub getSampleSsenisub() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Ssenisub sampleAb \u003d new Ssenisub();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 9,
      "IamRENCE": 12,
      "NgeowXiuQi": 10,
      "DanKhoo": 7,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/SsenisubStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.ReadOnlySsenisub;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * Represents a storage for {@link seedu.address.model.Ssenisub}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public interface SsenisubStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    Path getSsenisubFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Returns Ssenisub data as a {@link ReadOnlySsenisub}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    Optional\u003cReadOnlySsenisub\u003e readSsenisub() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @see #getSsenisubFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    Optional\u003cReadOnlySsenisub\u003e readSsenisub(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Saves the given {@link ReadOnlySsenisub} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @param ssenisub cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    void saveSsenisub(ReadOnlySsenisub ssenisub) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @see #saveSsenisub(ReadOnlySsenisub)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    void saveSsenisub(ReadOnlySsenisub ssenisub, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.commons.events.model.SsenisubChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.ReadOnlySsenisub;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public interface Storage extends SsenisubStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    Path getSsenisubFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    Optional\u003cReadOnlySsenisub\u003e readSsenisub() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    void saveSsenisub(ReadOnlySsenisub ssenisub) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Saves the current version of Ssenisub to the hard disk."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    void handleSsenisubChangedEvent(SsenisubChangedEvent abce);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 8,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.commons.events.model.SsenisubChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.ReadOnlySsenisub;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * Manages storage of Ssenisub data in local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private SsenisubStorage ssenisubStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public StorageManager(SsenisubStorage ssenisubStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        this.ssenisubStorage \u003d ssenisubStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Ssenisub methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public Path getSsenisubFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return ssenisubStorage.getSsenisubFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public Optional\u003cReadOnlySsenisub\u003e readSsenisub() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return readSsenisub(ssenisubStorage.getSsenisubFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public Optional\u003cReadOnlySsenisub\u003e readSsenisub(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return ssenisubStorage.readSsenisub(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void saveSsenisub(ReadOnlySsenisub ssenisub) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        saveSsenisub(ssenisub, ssenisubStorage.getSsenisubFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void saveSsenisub(ReadOnlySsenisub ssenisub, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        ssenisubStorage.saveSsenisub(ssenisub, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void handleSsenisubChangedEvent(SsenisubChangedEvent event) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            saveSsenisub(event.data);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 19,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Feedback;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Manager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.OtHour;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.OtRate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.PayDeductibles;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Rating;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.Salary;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private String rating;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private String department;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private String manager;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    private String salary;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    private String hours;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    private String rate;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    private String deductibles;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    private boolean favourite;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private String feedback;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    private boolean phonePrivacy;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    private boolean addressPrivacy;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    private boolean emailPrivacy;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson() {}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public XmlAdaptedPerson(String name, String phone, String email, String address, String department, String manager,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                            boolean phonePrivacy, boolean addressPrivacy, boolean emailPrivacy,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                            Boolean favourite, List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        this.rating \u003d \"0\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        this.department \u003d department;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        this.manager \u003d manager;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        this.salary \u003d \"0\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        this.hours \u003d \"0\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        this.rate \u003d \"0\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        this.deductibles \u003d \"0\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        this.favourite \u003d favourite;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        this.feedback \u003d \"-NO FEEDBACK YET-\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        this.phonePrivacy \u003d phonePrivacy;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        this.addressPrivacy \u003d addressPrivacy;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        this.emailPrivacy \u003d emailPrivacy;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        rating \u003d source.getRating().value;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        department \u003d source.getDepartment().value;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        manager \u003d source.getManager().fullName;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        salary \u003d source.getSalary().salary;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        hours \u003d source.getOtHours().overTimeHour;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        rate \u003d source.getOtRate().overTimeRate;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        deductibles \u003d source.getDeductibles().payDeductibles;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        feedback \u003d source.getFeedback().value;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        phonePrivacy \u003d source.getPhone().isPrivate();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        addressPrivacy \u003d source.getAddress().isPrivate();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        emailPrivacy \u003d source.getEmail().isPrivate();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        favourite \u003d source.getFavourite();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        String privacy;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (phonePrivacy) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            privacy \u003d \"Y\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            privacy \u003d \"N\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone, privacy);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (emailPrivacy) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            privacy \u003d \"Y\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            privacy \u003d \"N\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        final Email modelEmail \u003d new Email(email, privacy);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (addressPrivacy) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            privacy \u003d \"Y\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            privacy \u003d \"N\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        final Address modelAddress \u003d new Address(address, privacy);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        if (rating \u003d\u003d null) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Rating.class.getSimpleName()));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        final Rating modelRating \u003d new Rating(rating);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        if (department \u003d\u003d null) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                    Department.class.getSimpleName()));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        if (!Department.isValidDepartment(department)) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            throw new IllegalValueException(Department.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        final Department modelDepartment \u003d new Department(department);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        if (manager \u003d\u003d null) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                    Manager.class.getSimpleName()));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        if (!Manager.isValidManager(manager)) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            throw new IllegalValueException(Manager.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        final Manager modelManager \u003d new Manager(manager);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        final Salary modelSalary \u003d new Salary(salary);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        final OtHour modelHours \u003d new OtHour(hours);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        final OtRate modelRate \u003d new OtRate(rate);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        final PayDeductibles modelDeductibles \u003d new PayDeductibles(deductibles);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        final Feedback modelFeedback \u003d new Feedback(feedback);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        final boolean modelFavourite \u003d this.favourite;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelRating, modelDepartment, modelManager,"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                modelSalary, modelHours, modelRate, modelDeductibles, modelFeedback, modelTags, modelFavourite);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedPerson)) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherPerson.email)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherPerson.address)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                \u0026\u0026 Objects.equals(rating, otherPerson.rating)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                \u0026\u0026 Objects.equals(department, otherPerson.department)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                \u0026\u0026 Objects.equals(manager, otherPerson.manager)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                \u0026\u0026 Objects.equals(salary, otherPerson.salary)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                \u0026\u0026 Objects.equals(hours, otherPerson.hours)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                \u0026\u0026 Objects.equals(rate, otherPerson.rate)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                \u0026\u0026 Objects.equals(deductibles, otherPerson.deductibles)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                \u0026\u0026 Objects.equals(feedback, otherPerson.feedback)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                \u0026\u0026 Objects.equals(favourite, otherPerson.favourite)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagged.equals(otherPerson.tagged);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 9,
      "IamRENCE": 17,
      "NgeowXiuQi": 32,
      "abtyx": 31,
      "DanKhoo": 30,
      "-": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlFileStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * Stores SSENISUB data in an XML file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlFileStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Saves the given SSENISUB data to the specified file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static void saveDataToFile(Path file, XmlSerializableSsenisub ssenisub)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            XmlUtil.saveDataToFile(file, ssenisub);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns address book in the file or an empty address book"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static XmlSerializableSsenisub loadDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                            FileNotFoundException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableSsenisub.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 6,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableSsenisub.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.ReadOnlySsenisub;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.Ssenisub;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * An Immutable Ssenisub that is serializable to XML format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "@XmlRootElement(name \u003d \"ssenisub\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class XmlSerializableSsenisub {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedPerson\u003e persons;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Creates an empty XmlSerializableSsenisub."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public XmlSerializableSsenisub() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public XmlSerializableSsenisub(ReadOnlySsenisub src) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Converts this Ssenisub into the model\u0027s {@code Ssenisub} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code XmlAdaptedPerson}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public Ssenisub toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Ssenisub ssenisub \u003d new Ssenisub();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedPerson p : persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d p.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            if (ssenisub.hasPerson(person)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            ssenisub.addPerson(person);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return ssenisub;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        if (!(other instanceof XmlSerializableSsenisub)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return persons.equals(((XmlSerializableSsenisub) other).persons);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 16,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSsenisubStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.ReadOnlySsenisub;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * A class to access SSENISUB data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class XmlSsenisubStorage implements SsenisubStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlSsenisubStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public XmlSsenisubStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public Path getSsenisubFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public Optional\u003cReadOnlySsenisub\u003e readSsenisub() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return readSsenisub(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Similar to {@link #readSsenisub()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public Optional\u003cReadOnlySsenisub\u003e readSsenisub(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                 FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            logger.info(\"SSENISUB file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        XmlSerializableSsenisub xmlSsenisub \u003d XmlFileStorage.loadDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            return Optional.of(xmlSsenisub.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void saveSsenisub(ReadOnlySsenisub ssenisub) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        saveSsenisub(ssenisub, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Similar to {@link #saveSsenisub(ReadOnlySsenisub)}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void saveSsenisub(ReadOnlySsenisub ssenisub, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        requireNonNull(ssenisub);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableSsenisub(ssenisub));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 19,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PAGE \u003d \"default.html\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            \"https://se-edu.github.io/SSENISUB-level4/DummySearchPage.html?name\u003d\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadPersonPage(Person person) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + person.getName().fullName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(defaultPage.toExternalForm());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Frees resources allocated to the browser."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        browser \u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPersonPage(event.getNewSelection());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.commons.events.ui.HideStaffPanelEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private StaffPanel staffPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private StackPane staffPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        staffPanel \u003d new StaffPanel();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        staffPlaceholder.getChildren().add(staffPanel.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        staffPlaceholder.setVisible(false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getSsenisubFilePath());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    void enableStaffPanel() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        staffPlaceholder.setVisible(true);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        enableStaffPanel();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private void handleHideStaffPanelEvent(HideStaffPanelEvent event) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        staffPlaceholder.setVisible(false);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "DanKhoo": 23,
      "-": 195
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/SSENISUB-level4/issues/336\"\u003eThe issue on SSENISUB level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    private Label favouritedName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    private Label favouritedId;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private Label department;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        if (person.getFavourite()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            favouritedId.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            favouritedName.setText(person.getName().fullName + \" ★\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        department.setText(person.getDepartment().value + \" Department\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //            if (person.getPhone().isPrivate()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //                phone.setText(\"Private phone number\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //                phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //            if (person.getAddress().isPrivate()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //               address.setText(\"Private address\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //                address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //            if (person.getEmail().isPrivate()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //                email.setText(\"Private email\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //            } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //                email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 9,
      "IamRENCE": 1,
      "abtyx": 15,
      "DanKhoo": 3,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StaffPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " * The Staff Panel of the App."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "public class StaffPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private static final String FXML \u003d \"StaffPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private AnchorPane staffAnchor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private Label nameLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private Label phoneLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private Label emailLabel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private Label addressLabel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private Label salaryLabel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private Label departmentLabel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private Label managerLabel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private Label ratingLabel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private Label feedbackLabel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public StaffPanel() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Set the labels according to the person selection"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * @param person"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private void loadStaffPanel(Person person) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        nameLabel.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (person.getPhone().isPrivate()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            phoneLabel.setText(\"Private\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            phoneLabel.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (person.getEmail().isPrivate()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            emailLabel.setText(\"Private\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            emailLabel.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (person.getAddress().isPrivate()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            addressLabel.setText(\"Private\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            addressLabel.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        double salary \u003d Double.valueOf(person.getSalary().salary);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        double otPay \u003d Double.valueOf(person.getOtHours().overTimeHour)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            * Double.valueOf(person.getOtRate().overTimeRate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        double deductibles \u003d Double.valueOf(person.getDeductibles().payDeductibles);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        double netSalary \u003d salary + otPay - deductibles;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        salaryLabel.setText(Double.toString(netSalary));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        departmentLabel.setText(person.getDepartment().value);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        managerLabel.setText(person.getManager().fullName);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        ratingLabel.setText(person.getRating().value);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        feedbackLabel.setText(person.getFeedback().value);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        loadStaffPanel(event.getNewSelection());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 6,
      "abtyx": 12,
      "DanKhoo": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.commons.events.model.SsenisubChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar syncStatus;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar saveLocationStatus;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        setSaveLocation(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSaveLocation(String location) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e saveLocationStatus.setText(location));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSyncStatus(String status) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e syncStatus.setText(status));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void handleSsenisubChangedEvent(SsenisubChangedEvent abce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 2,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/ssenisub.png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                event.exception);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "-": 118
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ".staffLabel {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    -fx-font-size: 16pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ".staffLabel-bright {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    -fx-font-size: 16pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ".cell_favourite_label{"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    -fx-text-fill: #e8c547;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 10,
      "DanKhoo": 14,
      "-": 348
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    \u003cImage url\u003d\"@/images/ssenisub.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "          \u003cStackPane fx:id\u003d\"staffPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "DanKhoo": 1,
      "-": 66
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "  \u003cGridPane minHeight\u003d\"-Infinity\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"90.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        \u003cLabel fx:id\u003d\"favouritedId\" styleClass\u003d\"cell_favourite_label\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" wrapText\u003d\"true\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cLabel fx:id\u003d\"favouritedName\" wrapText\u003d\"true\" styleClass\u003d\"cell_favourite_label\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "      \u003cLabel fx:id\u003d\"department\" wrapText\u003d\"true\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$department\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" wrapText\u003d\"true\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 2,
      "DanKhoo": 12,
      "-": 32
    }
  },
  {
    "path": "src/main/resources/view/StaffPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003cStackPane fx:id\u003d\"staffPanel\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" stylesheets\u003d\"@DarkTheme.css\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cSplitPane dividerPositions\u003d\"0.7093541202672605\" prefHeight\u003d\"500.0\" prefWidth\u003d\"900.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            \u003citems\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                \u003cAnchorPane prefHeight\u003d\"500.0\" prefWidth\u003d\"900.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                        \u003cLabel styleClass\u003d\"label-header\" stylesheets\u003d\"@DarkTheme.css\" text\u003d\"Staff Details\" AnchorPane.leftAnchor\u003d\"5.0\" AnchorPane.topAnchor\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                        \u003cGridPane AnchorPane.bottomAnchor\u003d\"30.0\" AnchorPane.leftAnchor\u003d\"5.0\" AnchorPane.rightAnchor\u003d\"5.0\" AnchorPane.topAnchor\u003d\"55.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                            \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"299.0\" minWidth\u003d\"10.0\" prefWidth\u003d\"181.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"467.0\" minWidth\u003d\"10.0\" prefWidth\u003d\"441.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                            \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                            \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                            \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                                \u003cLabel styleClass\u003d\"staffLabel-bright\" text\u003d\"Name\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                                \u003cLabel styleClass\u003d\"staffLabel-bright\" text\u003d\"Phone\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                                \u003cLabel styleClass\u003d\"staffLabel-bright\" text\u003d\"Email\" GridPane.rowIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                                \u003cLabel styleClass\u003d\"staffLabel-bright\" text\u003d\"Address\" GridPane.rowIndex\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                                \u003cLabel styleClass\u003d\"staffLabel-bright\" text\u003d\"Net Salary\" GridPane.rowIndex\u003d\"4\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                                \u003cLabel styleClass\u003d\"staffLabel-bright\" text\u003d\"Department\" GridPane.rowIndex\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                                \u003cLabel styleClass\u003d\"staffLabel-bright\" text\u003d\"Manager\" GridPane.rowIndex\u003d\"6\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                                \u003cLabel styleClass\u003d\"staffLabel-bright\" text\u003d\"Rating\" GridPane.rowIndex\u003d\"7\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                                \u003cLabel styleClass\u003d\"staffLabel-bright\" text\u003d\"Feedback\" GridPane.rowIndex\u003d\"8\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                                \u003cLabel fx:id\u003d\"nameLabel\" prefWidth\u003d\"450.0\" styleClass\u003d\"staffLabel-bright\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"1\" GridPane.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                                \u003cLabel fx:id\u003d\"phoneLabel\" prefWidth\u003d\"450.0\" styleClass\u003d\"staffLabel-bright\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\" GridPane.vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                                \u003cLabel fx:id\u003d\"emailLabel\" prefWidth\u003d\"450.0\" styleClass\u003d\"staffLabel-bright\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\" GridPane.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                                \u003cLabel fx:id\u003d\"addressLabel\" prefWidth\u003d\"450.0\" styleClass\u003d\"staffLabel-bright\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"3\" GridPane.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                                \u003cLabel fx:id\u003d\"salaryLabel\" prefWidth\u003d\"450.0\" styleClass\u003d\"staffLabel-bright\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"4\" GridPane.vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                                \u003cLabel fx:id\u003d\"departmentLabel\" prefWidth\u003d\"450.0\" styleClass\u003d\"staffLabel-bright\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"5\" GridPane.vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                                \u003cLabel fx:id\u003d\"managerLabel\" prefWidth\u003d\"450.0\" styleClass\u003d\"staffLabel-bright\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"6\" GridPane.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                                \u003cLabel fx:id\u003d\"ratingLabel\" prefWidth\u003d\"450.0\" styleClass\u003d\"staffLabel-bright\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"7\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                                \u003cLabel fx:id\u003d\"feedbackLabel\" maxWidth\u003d\"-Infinity\" prefWidth\u003d\"450.0\" styleClass\u003d\"staffLabel-bright\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"8\" GridPane.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                        \u003cImageView fitHeight\u003d\"500.0\" fitWidth\u003d\"500.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                            \u003cimage\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                                \u003cImage url\u003d\"@../../../../docs/images/SSENISUB.png\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                            \u003c/image\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            \u003c/items\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 1,
      "DanKhoo": 70
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "  \"ssenisubFilePath\" : \"ssenisub.xml\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "  \"ssenisubFilePath\" : \"ssenisub.xml\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/data/XmlSerializableSsenisubTest/duplicatePersonSsenisub.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "\u003cssenisub\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cdepartment\u003eAccounting\u003c/department\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cmanager\u003eBen Leong\u003c/manager\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003cfeedback\u003e-NO FEEDBACK YET-\u003c/feedback\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with same identity as Alice Pauline --\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003epauline@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cdepartment\u003eAccounting\u003c/department\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cmanager\u003eMarcus Tan\u003c/manager\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003cfeedback\u003e-NO FEEDBACK YET-\u003c/feedback\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "\u003c/ssenisub\u003e"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 6,
      "NgeowXiuQi": 8,
      "DanKhoo": 4,
      "-": 18
    }
  },
  {
    "path": "src/test/data/XmlSerializableSsenisubTest/invalidPersonSsenisub.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "\u003cssenisub\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid email field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@exam!32ple\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003crating\u003e10\u003c/rating\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cdepartment isPrivate\u003d\"false\"\u003eAccounting\u003c/department\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cmanager isPrivate\u003d\"false\"\u003eBen Leong\u003c/manager\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003cfeedback\u003eGreat work on the recent event!\u003c/feedback\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "\u003c/ssenisub\u003e"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 4,
      "DanKhoo": 2,
      "-": 8
    }
  },
  {
    "path": "src/test/data/XmlSerializableSsenisubTest/typicalPersonsSsenisub.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "\u003c!-- Ssenisub save file which contains the same Person values as in TypicalPersons#getTypicalSsenisub() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "\u003cssenisub\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cdepartment\u003eAccounting\u003c/department\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cmanager\u003eBen Leong\u003c/manager\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003cfeedback\u003e-NO FEEDBACK YET-\u003c/feedback\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cemail\u003ebenson@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e311, Clementi Ave 2, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cdepartment\u003eMarketing\u003c/department\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cmanager\u003eMarcus Tan\u003c/manager\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003cfeedback\u003e-NO FEEDBACK YET-\u003c/feedback\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003eowesMoney\u003c/tagged\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cemail\u003ecarl@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cdepartment\u003eTech\u003c/department\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cmanager\u003eMoses Lim\u003c/manager\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003cfeedback\u003e-NO FEEDBACK YET-\u003c/feedback\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eDaniel Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cemail\u003edaniel@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cdepartment\u003eAccounting\u003c/department\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cmanager\u003eLionel Lim\u003c/manager\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003cfeedback\u003e-NO FEEDBACK YET-\u003c/feedback\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eElle Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cphone\u003e94822241\u003c/phone\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cemail\u003eelle@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cdepartment\u003eMarketing\u003c/department\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cmanager\u003eEdward Loh\u003c/manager\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003cfeedback\u003e-NO FEEDBACK YET-\u003c/feedback\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eFiona Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cphone\u003e94824271\u003c/phone\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cemail\u003efiona@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cdepartment\u003eTech\u003c/department\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cmanager\u003eJoanne Lee\u003c/manager\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003cfeedback\u003e-NO FEEDBACK YET-\u003c/feedback\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eGeorge Best\u003c/name\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cphone\u003e94824421\u003c/phone\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cemail\u003egeorge@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cdepartment\u003eAccounting\u003c/department\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cmanager\u003eBen Leong\u003c/manager\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003cfeedback\u003e-NO FEEDBACK YET-\u003c/feedback\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "\u003c/ssenisub\u003e"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 17,
      "NgeowXiuQi": 28,
      "DanKhoo": 23,
      "-": 38
    }
  },
  {
    "path": "src/test/data/XmlSsenisubStorageTest/invalidAndValidPersonSsenisub.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "\u003cssenisub\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Valid Person --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e94824241\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid phone field --\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e948asdf2424\u003c/phone\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "\u003c/ssenisub\u003e"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 2,
      "DanKhoo": 1,
      "-": 14
    }
  },
  {
    "path": "src/test/data/XmlSsenisubStorageTest/invalidPersonSsenisub.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "\u003cssenisub\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid name field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHa!ns Mu@ster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "\u003c/ssenisub\u003e"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 2,
      "-": 8
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with an invalid phone field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482asf424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    \u003cdepartment\u003eAccounting\u003c/department\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    \u003cmanager\u003eBen Leong\u003c/manager\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    \u003cfeedback\u003e-NO FEEDBACK YET-\u003c/feedback\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 2,
      "NgeowXiuQi": 4,
      "DanKhoo": 2,
      "-": 9
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with missing name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    \u003cphone\u003e94824241\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    \u003cdepartment\u003eAccounting\u003c/department\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    \u003cmanager\u003eBen Leong\u003c/manager\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    \u003cfeedback\u003e-NO FEEDBACK YET-\u003c/feedback\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 2,
      "NgeowXiuQi": 4,
      "DanKhoo": 3,
      "-": 7
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/tempSsenisub.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "\u003cssenisub\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cid\u003e1\u003c/id\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cfirstName\u003eJohn\u003c/firstName\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003clastName\u003eDoe\u003c/lastName\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cgithubUsername\u003e\u003c/githubUsername\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cstreet\u003e\u003c/street\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cpostalCode\u003e\u003c/postalCode\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccity\u003e\u003c/city\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "\u003c/ssenisub\u003e"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validPerson.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    \u003cphone\u003e94824241\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    \u003cdepartment\u003eAccounting\u003c/department\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    \u003cmanager\u003eBen Leong\u003c/manager\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    \u003cfeedback\u003e-NO FEEDBACK YET-\u003c/feedback\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 2,
      "NgeowXiuQi": 4,
      "DanKhoo": 3,
      "-": 7
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validSsenisub.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "\u003cssenisub\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e94824241\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cdepartment isPrivate\u003d\"false\"\u003eAccounting\u003c/department\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cmanager isPrivate\u003d\"false\"\u003eBen Leong\u003c/manager\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003cfeedback\u003e-NO FEEDBACK YET-\u003c/feedback\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eRuth Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87249245\u003c/phone\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eruth@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e81th street\u003c/address\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003crating\u003e2\u003c/rating\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cdepartment isPrivate\u003d\"false\"\u003eMarketing\u003c/department\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cmanager isPrivate\u003d\"false\"\u003eMarcus Tan\u003c/manager\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003cfeedback\u003e-NO FEEDBACK YET-\u003c/feedback\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHeinz Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003crating\u003e0\u003c/rating\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cdepartment isPrivate\u003d\"false\"\u003eTech\u003c/department\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cmanager isPrivate\u003d\"false\"\u003eMoses Lim\u003c/manager\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003cfeedback\u003e-NO FEEDBACK YET-\u003c/feedback\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCornelia Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003crating\u003e8\u003c/rating\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cdepartment isPrivate\u003d\"false\"\u003eAccounting\u003c/department\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cmanager isPrivate\u003d\"false\"\u003eLionel Lim\u003c/manager\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003cfeedback\u003e-NO FEEDBACK YET-\u003c/feedback\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eWerner Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e94822241\u003c/phone\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003crating\u003e6\u003c/rating\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cdepartment isPrivate\u003d\"false\"\u003eMarketing\u003c/department\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cmanager isPrivate\u003d\"false\"\u003eEdward Toh\u003c/manager\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003cfeedback\u003e-NO FEEDBACK YET-\u003c/feedback\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eLydia Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e94824271\u003c/phone\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003crating\u003e5\u003c/rating\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cdepartment isPrivate\u003d\"false\"\u003eTech\u003c/department\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cmanager isPrivate\u003d\"false\"\u003eJoanne Lee\u003c/manager\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003cfeedback\u003e-NO FEEDBACK YET-\u003c/feedback\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAnna Best\u003c/name\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e94824425\u003c/phone\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003crating\u003e10\u003c/rating\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cdepartment isPrivate\u003d\"false\"\u003eAccounting\u003c/department\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cmanager isPrivate\u003d\"false\"\u003eBen Leong\u003c/manager\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003cfeedback\u003e-NO FEEDBACK YET-\u003c/feedback\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eStefan Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e84824246\u003c/phone\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003estefan@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle india\u003c/address\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003crating\u003e7\u003c/rating\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cdepartment isPrivate\u003d\"false\"\u003eMarketing\u003c/department\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cmanager isPrivate\u003d\"false\"\u003eMarcus Tan\u003c/manager\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003cfeedback\u003e-NO FEEDBACK YET-\u003c/feedback\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eMartin Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e84821312\u003c/phone\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003echicago ave\u003c/address\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003crating\u003e5\u003c/rating\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cdepartment isPrivate\u003d\"false\"\u003eTech\u003c/department\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        \u003cmanager isPrivate\u003d\"false\"\u003eJoanne Lee\u003c/manager\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003csalary\u003e0\u003c/salary\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003chours\u003e0\u003c/hours\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003crate\u003e0\u003c/rate\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        \u003cdeductibles\u003e0\u003c/deductibles\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        \u003cfeedback\u003e-NO FEEDBACK YET-\u003c/feedback\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "\u003c/ssenisub\u003e"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 20,
      "NgeowXiuQi": 36,
      "DanKhoo": 24,
      "-": 49
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private static final String DEPARTMENT_FIELD_ID \u003d \"#department\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private final Label departmentLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        departmentLabel \u003d getChildNode(DEPARTMENT_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public String getDepartment() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        String[] department \u003d departmentLabel.getText().split(\" \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return department[0];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if this handle contains {@code person}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Person person) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return getName().equals(person.getName().fullName)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getEmail().equals(person.getEmail().value)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                \u0026\u0026 getDepartment().equals(person.getDepartment().value)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(person.getTags().stream()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanKhoo": 7,
      "-": 73
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StaffPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " * Provides a handle to a staff display in the staff panel"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "public class StaffPanelHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#nameLabel\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phoneLabel\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#emailLabel\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#addressLabel\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private static final String SALARY_FIELD_ID \u003d \"#salaryLabel\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private static final String DEPARTMENT_FIELD_ID \u003d \"#departmentLabel\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private static final String MANAGER_FIELD_ID \u003d \"#managerLabel\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private static final String RATING_FIELD_ID \u003d \"#ratingLabel\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private static final String FEEDBACK_FIELD_ID \u003d \"#feedbackLabel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private final Label salaryLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private final Label departmentLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private final Label managerLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private final Label ratingLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private final Label feedbackLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public StaffPanelHandle(Node staffNode) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        super(staffNode);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        salaryLabel \u003d getChildNode(SALARY_FIELD_ID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        departmentLabel \u003d getChildNode(DEPARTMENT_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        managerLabel \u003d getChildNode(MANAGER_FIELD_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        ratingLabel \u003d getChildNode(RATING_FIELD_ID);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        feedbackLabel \u003d getChildNode(FEEDBACK_FIELD_ID);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public String getSalary() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return salaryLabel.getText();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public String getDepartment() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return departmentLabel.getText();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public String getManager() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return managerLabel.getText();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public String getRating() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return ratingLabel.getText();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public String getFeedback() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return feedbackLabel.getText();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Returns true if this handle contains {@code person}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public boolean equals(Person person) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return getName().equals(person.getName().fullName)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                \u0026\u0026 getPhone().equals(person.getPhone().value)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                \u0026\u0026 getEmail().equals(person.getEmail().value)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                \u0026\u0026 getAddress().equals(person.getAddress().value)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                \u0026\u0026 getSalary().equals(person.getSalary().salary)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                \u0026\u0026 getDepartment().equals(person.getDepartment().value)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                \u0026\u0026 getManager().equals(person.getManager().fullName)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                \u0026\u0026 getRating().equals(person.getRating().value)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                \u0026\u0026 getFeedback().equals(person.getFeedback().value);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanKhoo": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.ReadOnlySsenisub;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.Ssenisub;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.storage.XmlSerializableSsenisub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    protected Supplier\u003cReadOnlySsenisub\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlySsenisub\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            createDataFileWithData(new XmlSerializableSsenisub(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        userPrefs.setSsenisubFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Returns a defensive copy of SSENISUB data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public Ssenisub readStorageSsenisub() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            return new Ssenisub(storage.readSsenisub().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            throw new AssertionError(\"Data is not in SSENISUB format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return storage.getSsenisubFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Model copy \u003d new ModelManager((model.getSsenisub()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 13,
      "-": 107
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : SSENISUB\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/ssenisub.png\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false, errorMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.Ssenisub;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedPerson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.storage.XmlSerializableSsenisub;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.testutil.SsenisubBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validSsenisub.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingPersonField.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonField.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"validPerson.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempSsenisub.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private static final String VALID_PHONE \u003d \"94824241\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"hans@example\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"4th street\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private static final String VALID_DEPARTMENT \u003d \"Accounting\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private static final String VALID_MANAGER \u003d \"Ben Leong\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        XmlUtil.getDataFromFile(null, Ssenisub.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, Ssenisub.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, Ssenisub.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Ssenisub dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableSsenisub.class).toModelType();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(9, dataFromFile.getPersonList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DEPARTMENT, VALID_MANAGER,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                false, false, false, false, VALID_TAGS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DEPARTMENT, VALID_MANAGER,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                false, false, false, false, VALID_TAGS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DEPARTMENT, VALID_MANAGER,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                false, false, false, false, VALID_TAGS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        XmlUtil.saveDataToFile(null, new Ssenisub());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new Ssenisub());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        XmlSerializableSsenisub dataToWrite \u003d new XmlSerializableSsenisub(new Ssenisub());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        XmlSerializableSsenisub dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableSsenisub.class);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        SsenisubBuilder builder \u003d new SsenisubBuilder(new Ssenisub());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        dataToWrite \u003d new XmlSerializableSsenisub("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                builder.withPerson(new PersonBuilder().build()).build());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableSsenisub.class);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlRootElement(name \u003d \"person\")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 6,
      "IamRENCE": 16,
      "DanKhoo": 3,
      "-": 126
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getSsenisub(), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "-": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalSsenisub;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        model \u003d new ModelManager(getTypicalSsenisub(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getSsenisub(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.commitSsenisub();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Person personInList \u003d model.getSsenisub().getPersonList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 5,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.ReadOnlySsenisub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.Ssenisub;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        public void resetData(ReadOnlySsenisub newData) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        public ReadOnlySsenisub getSsenisub() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        public boolean hasName(Person person) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        public boolean hasPhoneNumber(Person person) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        public boolean hasEmail(Person person) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        public void favouritePerson(Person target, Person favouritedPerson) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        public void unfavouritePerson(Person target, Person unfavouritedPerson) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        public void sortByName() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        public void sortByDept() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        public void sortByRatingUp() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        public void sortByRatingDown() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        public boolean canUndoSsenisub() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        public boolean canRedoSsenisub() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        public void undoSsenisub() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        public void redoSsenisub() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        public void commitSsenisub() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        public boolean hasPhoneNumber(Person person) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            return personsAdded.stream().anyMatch(person::hasSamePhone);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        public boolean hasEmail(Person person) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            return personsAdded.stream().anyMatch(person::hasSameEmail);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        public void commitSsenisub() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        public ReadOnlySsenisub getSsenisub() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            return new Ssenisub();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 31,
      "IamRENCE": 12,
      "abtyx": 27,
      "-": 192
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalSsenisub;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.Ssenisub;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void execute_emptySsenisub_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.commitSsenisub();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void execute_nonEmptySsenisub_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalSsenisub(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalSsenisub(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.resetData(new Ssenisub());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.commitSsenisub();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 9,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEDUCTIBLES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEPARTMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MANAGER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OTHOUR;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OTRATE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIVATE_ADDRESS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIVATE_EMAIL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIVATE_PHONE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALARY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.Ssenisub;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"91231234\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"81231234\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String VALID_DEPARTMENT_AMY \u003d \"Accounting\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String VALID_DEPARTMENT_BOB \u003d \"Marketing\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String VALID_MANAGER_AMY \u003d \"Ben Leong\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String VALID_MANAGER_BOB \u003d \"Marcus Tan\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String VALID_SALARY_AMY \u003d \"2000\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String VALID_SALARY_BOB \u003d \"1000\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String VALID_OTHOUR_AMY \u003d \"20\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String VALID_OTHOUR_BOB \u003d \"10\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String VALID_OTRATE_AMY \u003d \"20\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String VALID_OTRATE_BOB \u003d \"10\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String VALID_DEDUCTIBLES_AMY \u003d \"200\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String VALID_DEDUCTIBLES_BOB \u003d \"100\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    //    public static final String PRIVATE_PHONE_DESC_AMY \u003d \" \" + PREFIX_PRIVATE_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public static final String PRIVATE_PHONE_DESC_BOB \u003d \" \" + PREFIX_PRIVATE_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    //    public static final String PRIVATE_EMAIL_DESC_AMY \u003d \" \" + PREFIX_PRIVATE_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public static final String PRIVATE_EMAIL_DESC_BOB \u003d \" \" + PREFIX_PRIVATE_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    //    public static final String PRIVATE_ADDRESS_DESC_AMY \u003d \" \" + PREFIX_PRIVATE_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public static final String PRIVATE_ADDRESS_DESC_BOB \u003d \" \" + PREFIX_PRIVATE_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String DEPARTMENT_DESC_AMY \u003d \" \" + PREFIX_DEPARTMENT + VALID_DEPARTMENT_AMY;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String DEPARTMENT_DESC_BOB \u003d \" \" + PREFIX_DEPARTMENT + VALID_DEPARTMENT_BOB;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String MANAGER_DESC_AMY \u003d \" \" + PREFIX_MANAGER + VALID_MANAGER_AMY;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String MANAGER_DESC_BOB \u003d \" \" + PREFIX_MANAGER + VALID_MANAGER_BOB;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String SALARY_DESC_AMY \u003d \" \" + PREFIX_SALARY + VALID_SALARY_AMY;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String SALARY_DESC_BOB \u003d \" \" + PREFIX_SALARY + VALID_SALARY_BOB;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String OTHOUR_DESC_AMY \u003d \" \" + PREFIX_OTHOUR + VALID_OTHOUR_AMY;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String OTHOUR_DESC_BOB \u003d \" \" + PREFIX_OTHOUR + VALID_OTHOUR_BOB;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String OTRATE_DESC_AMY \u003d \" \" + PREFIX_OTRATE + VALID_OTRATE_AMY;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String OTRATE_DESC_BOB \u003d \" \" + PREFIX_OTRATE + VALID_OTRATE_BOB;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String DEDUCTIBLES_DESC_AMY \u003d \" \" + PREFIX_DEDUCTIBLES + VALID_DEDUCTIBLES_AMY;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String DEDUCTIBLES_DESC_BOB \u003d \" \" + PREFIX_DEDUCTIBLES + VALID_DEDUCTIBLES_BOB;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String INVALID_DEPARTMENT_DESC \u003d \" \" + PREFIX_DEPARTMENT + \"Accounting123\"; // \u0027123\u0027 not allowed"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String INVALID_MANAGER_DESC \u003d \" \" + PREFIX_MANAGER + \"B@N\"; // \u0027@\u0027 not allowed in names"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String INVALID_SALARY_DESC \u003d \" \" + PREFIX_SALARY + \"$2000\"; // \u0027$\u0027 not allowed in salary"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String INVALID_OTHOUR_DESC \u003d \" \" + PREFIX_OTHOUR + \"25hrs\"; // letters not allowed in hours"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String INVALID_OTRATE_DESC \u003d \" \" + PREFIX_OTRATE + \"20/hr\"; // letters not allowed in rate"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String INVALID_DEDUCTIBLES_DESC \u003d \" \" + PREFIX_DEDUCTIBLES"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        + \"$1000\"; // \u0027$\u0027 not allowed in deductibles"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                .withDepartment(VALID_DEPARTMENT_AMY).withManager(VALID_MANAGER_AMY)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                .withSalary(VALID_SALARY_AMY).withHour(VALID_OTHOUR_AMY)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                .withRate(VALID_OTRATE_AMY).withDeductibles(VALID_DEDUCTIBLES_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                .withDepartment(VALID_DEPARTMENT_BOB).withManager(VALID_MANAGER_BOB)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                .withSalary(VALID_SALARY_BOB).withHour(VALID_OTHOUR_BOB)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "                .withRate(VALID_OTRATE_BOB).withDeductibles(VALID_DEDUCTIBLES_BOB)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * - SSENISUB and the filtered person list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Ssenisub expectedSsenisub \u003d new Ssenisub(actualModel.getSsenisub());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            assertEquals(expectedSsenisub, actualModel.getSsenisub());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        model.commitSsenisub();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 32,
      "IamRENCE": 5,
      "abtyx": 6,
      "DanKhoo": 16,
      "-": 134
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalSsenisub;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSsenisub(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getSsenisub(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.commitSsenisub();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getSsenisub(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.commitSsenisub();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getSsenisub().getPersonList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getSsenisub(), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.commitSsenisub();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e first person deleted"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // undo -\u003e reverts Ssenisub back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.undoSsenisub();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person deleted again"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.redoSsenisub();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Deletes a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getSsenisub(), new UserPrefs());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.commitSsenisub();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // undo -\u003e reverts Ssenisub back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.undoSsenisub();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e deletes same second person in unfiltered person list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.redoSsenisub();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 17,
      "-": 160
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalSsenisub;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.Ssenisub;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSsenisub(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Ssenisub(model.getSsenisub()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.commitSsenisub();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Ssenisub(model.getSsenisub()), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.commitSsenisub();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Ssenisub(model.getSsenisub()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.commitSsenisub();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Ssenisub(model.getSsenisub()), new UserPrefs());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.commitSsenisub();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PHONE_NUMBER);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Person personInList \u003d model.getSsenisub().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PHONE_NUMBER);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getSsenisub().getPersonList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Ssenisub(model.getSsenisub()), new UserPrefs());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.commitSsenisub();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // undo -\u003e reverts Ssenisub back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.undoSsenisub();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.redoSsenisub();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Edits a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Ssenisub(model.getSsenisub()), new UserPrefs());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.commitSsenisub();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // undo -\u003e reverts Ssenisub back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.undoSsenisub();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e edits same second person in unfiltered person list"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.redoSsenisub();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 23,
      "abtyx": 2,
      "-": 223
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FavouriteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalSsenisub;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " * {@code FavouriteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "public class FavouriteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSsenisub(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void execute_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Person personToFavourite \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Person favouritedPerson \u003d new PersonBuilder(personToFavourite).withFavourite(true).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        FavouriteCommand favouriteCommand \u003d new FavouriteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        String expectedFavouriteMessage \u003d String.format(FavouriteCommand.MESSAGE_FAVOURITE_PERSON_SUCCESS,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                favouritedPerson.getName().fullName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getSsenisub(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        expectedModel.favouritePerson(personToFavourite, favouritedPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.commitSsenisub();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertCommandSuccess(favouriteCommand, model, commandHistory, expectedFavouriteMessage, model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        // favourite fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        FavouriteCommand failFavouriteCommand \u003d new FavouriteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        String expectedFailFavouriteMessage \u003d String.format(FavouriteCommand.MESSAGE_FAVOURITE_PERSON_FAIL,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                favouritedPerson.getName().fullName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertCommandSuccess(failFavouriteCommand, model, commandHistory, expectedFailFavouriteMessage, model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        FavouriteCommand favouriteCommand \u003d new FavouriteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertCommandFailure(favouriteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getSsenisub().getPersonList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        FavouriteCommand favouriteCommand \u003d new FavouriteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertCommandFailure(favouriteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        FavouriteCommand favouriteCommand \u003d new FavouriteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertCommandFailure(favouriteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        FavouriteCommand favouriteFirstCommand \u003d new FavouriteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        FavouriteCommand favouriteSecondCommand \u003d new FavouriteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertTrue(favouriteFirstCommand.equals(favouriteFirstCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        FavouriteCommand favouriteFirstCommandCopy \u003d new FavouriteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertTrue(favouriteFirstCommand.equals(favouriteFirstCommandCopy));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertFalse(favouriteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertFalse(favouriteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertFalse(favouriteFirstCommand.equals(favouriteSecondCommand));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 117,
      "IamRENCE": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FeedbackCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalSsenisub;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.Ssenisub;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Feedback;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class FeedbackCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSsenisub(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        FeedbackCommand feedbackFirstCommand \u003d new FeedbackCommand(INDEX_FIRST_PERSON, new Feedback(\"Good\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        FeedbackCommand feedbackSecondCommand \u003d new FeedbackCommand(INDEX_SECOND_PERSON, new Feedback(\"Bad\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(feedbackFirstCommand.equals(feedbackFirstCommand));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        FeedbackCommand feedbackFirstCommandCopy \u003d new FeedbackCommand(INDEX_FIRST_PERSON, new Feedback(\"Good\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(feedbackFirstCommand.equals(feedbackFirstCommandCopy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(feedbackFirstCommand.equals(1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(feedbackFirstCommand.equals(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(feedbackFirstCommand.equals(feedbackSecondCommand));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void execute_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Person editedPerson \u003d personInList.withFeedback(\"You are cool!\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        FeedbackCommand feedbackCommand \u003d new FeedbackCommand(indexLastPerson, new Feedback(\"You are cool!\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        String expectedMessage \u003d String.format(FeedbackCommand.MESSAGE_FEEDBACK_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Ssenisub(model.getSsenisub()), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.updatePerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.commitSsenisub();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandSuccess(feedbackCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getSsenisub().getPersonList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        FeedbackCommand feedbackCommand \u003d new FeedbackCommand(outOfBoundIndex, new Feedback(\"Work harder.\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandFailure(feedbackCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalSsenisub;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSsenisub(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalSsenisub(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 3,
      "-": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindDepartmentCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.GEORGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalSsenisub;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.DepartmentContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " * Contains integration tests (interaction with the Model) for (@code FindDepartmentCommand)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "public class FindDepartmentCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSsenisub(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalSsenisub(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        DepartmentContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new DepartmentContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        DepartmentContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new DepartmentContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        FindDepartmentCommand findFirstCommand \u003d new FindDepartmentCommand(firstPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        FindDepartmentCommand findSecondCommand \u003d new FindDepartmentCommand(secondPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        FindDepartmentCommand findFirstCommandCopy \u003d new FindDepartmentCommand(firstPredicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        DepartmentContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        FindDepartmentCommand command \u003d new FindDepartmentCommand(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 5);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        DepartmentContainsKeywordsPredicate predicate \u003d preparePredicate(\"Accounting Tech\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        FindDepartmentCommand command \u003d new FindDepartmentCommand(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, CARL, DANIEL, FIONA, GEORGE), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Parses {@code userInput} into a {@code DepartmentContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private DepartmentContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return new DepartmentContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 3,
      "DanKhoo": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindEmailCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalSsenisub;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.EmailContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " * Contains integration tests (interaction with the Model) for (@code FindEmailCommand)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "public class FindEmailCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSsenisub(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalSsenisub(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        EmailContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new EmailContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        EmailContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new EmailContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        FindEmailCommand findFirstCommand \u003d new FindEmailCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        FindEmailCommand findSecondCommand \u003d new FindEmailCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        FindEmailCommand findFirstCommandCopy \u003d new FindEmailCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        EmailContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        FindEmailCommand command \u003d new FindEmailCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        EmailContainsKeywordsPredicate predicate \u003d preparePredicate(\"daniel@example.com\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        FindEmailCommand command \u003d new FindEmailCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertEquals(Arrays.asList(DANIEL), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Parses {@code userInput} into a {@code EmailContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private EmailContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return new EmailContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 3,
      "DanKhoo": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindManagerCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalSsenisub;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.ManagerContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " * Contains integration tests (interaction with the Model) for (@code FindManagerCommand)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "public class FindManagerCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSsenisub(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalSsenisub(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        ManagerContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new ManagerContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        ManagerContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new ManagerContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        FindManagerCommand findFirstCommand \u003d new FindManagerCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        FindManagerCommand findSecondCommand \u003d new FindManagerCommand(secondPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        FindManagerCommand findFirstCommandCopy \u003d new FindManagerCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        ManagerContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        FindManagerCommand command \u003d new FindManagerCommand(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        ManagerContainsKeywordsPredicate predicate \u003d preparePredicate(\"Moses Marcus\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        FindManagerCommand command \u003d new FindManagerCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertEquals(Arrays.asList(BENSON, CARL), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Parses {@code userInput} into a {@code ManagerContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private ManagerContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return new ManagerContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 3,
      "DanKhoo": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalSsenisub;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        model \u003d new ModelManager(getTypicalSsenisub(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getSsenisub(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 3,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/PrivacyCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abtyx"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalSsenisub;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.logic.commands.PrivacyCommand.FieldsToChange;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.Ssenisub;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.testutil.FieldsToChangeBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abtyx"
        },
        "content": "public class PrivacyCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSsenisub(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Person editedPerson \u003d TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        FieldsToChange fieldsToChange \u003d new FieldsToChangeBuilder().withNotPrivate().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        PrivacyCommand privacyCommand \u003d new PrivacyCommand(INDEX_FIRST_PERSON, fieldsToChange);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        String expectedMessage \u003d String.format(PrivacyCommand.MESSAGE_EDIT_PRIVACY_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Ssenisub(model.getSsenisub()), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.commitSsenisub();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertCommandSuccess(privacyCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        FieldsToChange fieldsToChange \u003d new FieldsToChangeBuilder().withPrivatePhone().withPrivateEmail().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        PrivacyCommand privacyCommand \u003d new PrivacyCommand(indexLastPerson, fieldsToChange);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            CommandResult result \u003d privacyCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            Assert.assertEquals(model.getFilteredPersonList().get(indexLastPerson.getZeroBased())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                            .getPhone().isPrivate(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                    true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            Assert.assertEquals(model.getFilteredPersonList().get(indexLastPerson.getZeroBased())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                            .getEmail().isPrivate(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                    true);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            Assert.assertEquals(model.getFilteredPersonList().get(indexLastPerson.getZeroBased())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                            .getAddress().isPrivate(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                    false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        FieldsToChange fieldsToChange \u003d new FieldsToChangeBuilder().withPrivateEmail().build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        PrivacyCommand privacyCommand \u003d new PrivacyCommand(outOfBoundIndex, fieldsToChange);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertCommandFailure(privacyCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getSsenisub().getPersonList().size());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        PrivacyCommand privacyCommand \u003d new PrivacyCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                new FieldsToChangeBuilder().withPrivateEmail().build());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertCommandFailure(privacyCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        FieldsToChange fieldsToChange \u003d new FieldsToChangeBuilder().withAllPrivate().build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        PrivacyCommand privacyCommand \u003d new PrivacyCommand(INDEX_FIRST_PERSON, fieldsToChange);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Ssenisub(model.getSsenisub()), new UserPrefs());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.commitSsenisub();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        privacyCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Assert.assertEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                        .getPhone().isPrivate(), true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Assert.assertEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                        .getEmail().isPrivate(), true);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Assert.assertEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                        .getAddress().isPrivate(), true);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // undo -\u003e reverts Ssenisub back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        model.undoSsenisub();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Assert.assertEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                        .getPhone().isPrivate(), false);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Assert.assertEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                        .getEmail().isPrivate(), false);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Assert.assertEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                        .getAddress().isPrivate(), false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        model.redoSsenisub();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Assert.assertEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                        .getPhone().isPrivate(), true);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Assert.assertEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                        .getEmail().isPrivate(), true);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Assert.assertEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                        .getAddress().isPrivate(), true);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "abtyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 11,
      "abtyx": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RateCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalSsenisub;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.Ssenisub;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Rating;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class RateCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSsenisub(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        RateCommand rateFirstCommand \u003d new RateCommand(INDEX_FIRST_PERSON, new Rating(\"1\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        RateCommand rateSecondCommand \u003d new RateCommand(INDEX_SECOND_PERSON, new Rating(\"10\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(rateFirstCommand.equals(rateFirstCommand));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        RateCommand rateFirstCommandCopy \u003d new RateCommand(INDEX_FIRST_PERSON, new Rating(\"1\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(rateFirstCommand.equals(rateFirstCommandCopy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(rateFirstCommand.equals(1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(rateFirstCommand.equals(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(rateFirstCommand.equals(rateSecondCommand));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void execute_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Person editedPerson \u003d personInList.withRating(\"6\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        RateCommand rateCommand \u003d new RateCommand(indexLastPerson, new Rating(\"6\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        String expectedMessage \u003d String.format(RateCommand.MESSAGE_RATING_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Ssenisub(model.getSsenisub()), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.updatePerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.commitSsenisub();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandSuccess(rateCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getSsenisub().getPersonList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        RateCommand rateCommand \u003d new RateCommand(outOfBoundIndex, new Rating(\"0\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandFailure(rateCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalSsenisub;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalSsenisub(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalSsenisub(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        model.undoSsenisub();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        model.undoSsenisub();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.undoSsenisub();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.undoSsenisub();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.redoSsenisub();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.redoSsenisub();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 9,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalSsenisub;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSsenisub(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalSsenisub(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getSsenisub().getPersonList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 4,
      "-": 114
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SortCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HARRY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.Ssenisub;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.testutil.SsenisubBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void execute_sortList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Ssenisub ssenisub \u003d new SsenisubBuilder().withPerson(BOB).withPerson(ALICE).build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Ssenisub expectedSsenisub \u003d new SsenisubBuilder().withPerson(ALICE).withPerson(BOB).build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        ssenisub.sortByName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertEquals(ssenisub, expectedSsenisub);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void execute_sortListWithFavourite() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        // typical person Carl is set to be favourited"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Ssenisub ssenisub \u003d new SsenisubBuilder().withPerson(BOB).withPerson(ALICE).withPerson(HARRY).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Ssenisub expectedSsenisub \u003d new SsenisubBuilder().withPerson(HARRY).withPerson(ALICE)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                .withPerson(BOB).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        ssenisub.sortByName();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertEquals(ssenisub, expectedSsenisub);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 26,
      "IamRENCE": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SortDeptCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HARRY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.model.Ssenisub;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.testutil.SsenisubBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "public class SortDeptCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void execute_sortList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Ssenisub ssenisub \u003d new SsenisubBuilder().withPerson(BENSON).withPerson(ALICE).withPerson(CARL).build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Ssenisub expectedSsenisub \u003d new SsenisubBuilder().withPerson(ALICE).withPerson(BENSON).withPerson(CARL).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        ssenisub.sortByDept();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertEquals(ssenisub, expectedSsenisub);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void execute_sortListWithFavourite() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        // typical person Harry is set to be favourited"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Ssenisub ssenisub \u003d new SsenisubBuilder().withPerson(BENSON).withPerson(HARRY).withPerson(ALICE)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                .withPerson(CARL).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Ssenisub expectedSsenisub \u003d new SsenisubBuilder().withPerson(ALICE).withPerson(BENSON).withPerson(HARRY)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                .withPerson(CARL).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        ssenisub.sortByDept();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertEquals(ssenisub, expectedSsenisub);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        ssenisub.sortByDept();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertEquals(ssenisub, expectedSsenisub);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SortRatingDownCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.JASON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEVIN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.MICHAEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.model.Ssenisub;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.testutil.SsenisubBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "public class SortRatingDownCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void execute_sortList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Ssenisub ssenisub \u003d new SsenisubBuilder().withPerson(KEVIN).withPerson(MICHAEL).withPerson(JASON).build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Ssenisub expectedSsenisub \u003d new SsenisubBuilder().withPerson(MICHAEL).withPerson(KEVIN)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                .withPerson(JASON).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        ssenisub.sortByRatingDown();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertEquals(ssenisub, expectedSsenisub);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SortRatingUpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.JASON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEVIN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.MICHAEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.model.Ssenisub;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.testutil.SsenisubBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "public class SortRatingUpCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void execute_sortList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Ssenisub ssenisub \u003d new SsenisubBuilder().withPerson(KEVIN).withPerson(MICHAEL).withPerson(JASON).build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Ssenisub expectedSsenisub \u003d new SsenisubBuilder().withPerson(JASON).withPerson(KEVIN)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                .withPerson(MICHAEL).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        ssenisub.sortByRatingUp();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertEquals(ssenisub, expectedSsenisub);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalSsenisub;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalSsenisub(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalSsenisub(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.undoSsenisub();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.undoSsenisub();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 5,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UnfavouriteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalSsenisub;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " * {@code FavouriteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "public class UnfavouriteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalSsenisub(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void execute_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        // person needs to be favourited first"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Person personToFavourite \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Person favouritedPerson \u003d new PersonBuilder(personToFavourite).withFavourite(true).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        FavouriteCommand favouriteCommand \u003d new FavouriteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        String expectedFavouriteMessage \u003d String.format(FavouriteCommand.MESSAGE_FAVOURITE_PERSON_SUCCESS,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                favouritedPerson.getName().fullName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Model expectedFavouriteModel \u003d new ModelManager(model.getSsenisub(), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        expectedFavouriteModel.favouritePerson(personToFavourite, favouritedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedFavouriteModel.commitSsenisub();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertCommandSuccess(favouriteCommand, model, commandHistory, expectedFavouriteMessage, model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Person personToUnfavourite \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Person unfavouritedPerson \u003d new PersonBuilder(personToUnfavourite).withFavourite(false).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        UnfavouriteCommand unfavouriteCommand \u003d new UnfavouriteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        String expectedUnfavouriteMessage \u003d String.format(UnfavouriteCommand.MESSAGE_UNFAVOURITE_PERSON_SUCCESS,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                unfavouritedPerson.getName().fullName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getSsenisub(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        expectedModel.unfavouritePerson(personToUnfavourite, unfavouritedPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.commitSsenisub();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertCommandSuccess(unfavouriteCommand, model, commandHistory, expectedUnfavouriteMessage, model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        // unfavourite fail"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        UnfavouriteCommand failUnfavouriteCommand \u003d new UnfavouriteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        String expectedFailUnfavouriteMessage \u003d String.format(UnfavouriteCommand.MESSAGE_UNFAVOURITE_PERSON_FAIL,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                unfavouritedPerson.getName().fullName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertCommandSuccess(failUnfavouriteCommand, model, commandHistory, expectedFailUnfavouriteMessage, model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        UnfavouriteCommand unfavouriteCommand \u003d new UnfavouriteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertCommandFailure(unfavouriteCommand, model, commandHistory,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getSsenisub().getPersonList().size());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        UnfavouriteCommand unfavouriteCommand \u003d new UnfavouriteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertCommandFailure(unfavouriteCommand, model, commandHistory,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        UnfavouriteCommand unfavouriteCommand \u003d new UnfavouriteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertCommandFailure(unfavouriteCommand, model, commandHistory,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        UnfavouriteCommand unfavouriteFirstCommand \u003d new UnfavouriteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        UnfavouriteCommand unfavouriteSecondCommand \u003d new UnfavouriteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertTrue(unfavouriteFirstCommand.equals(unfavouriteFirstCommand));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        UnfavouriteCommand unfavouriteFirstCommandCopy \u003d new UnfavouriteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertTrue(unfavouriteFirstCommand.equals(unfavouriteFirstCommandCopy));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertFalse(unfavouriteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertFalse(unfavouriteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertFalse(unfavouriteFirstCommand.equals(unfavouriteSecondCommand));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 135,
      "IamRENCE": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEPARTMENT_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEPARTMENT_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DEPARTMENT_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MANAGER_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MANAGER_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MANAGER_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abtyx"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PRIVATE_ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIVATE_ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abtyx"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PRIVATE_EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIVATE_EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abtyx"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PRIVATE_PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIVATE_PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Manager;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        // private number accepted"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //expectedPerson.getPhone().setPrivate(\"Y\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Person expectedPersonPrivatePhone \u003d new PersonBuilder(BOB).withPrivatePhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PRIVATE_PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                new AddCommand(expectedPersonPrivatePhone));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        // private number and email"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //expectedPerson.getEmail().setPrivate(\"Y\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Person expectedPersonPrivateEmail \u003d new PersonBuilder(BOB).withPrivatePhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                .withPrivateEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PRIVATE_PHONE_DESC_BOB + PRIVATE_EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                new AddCommand(expectedPersonPrivateEmail));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        // private number, email and address"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //expectedPerson.getAddress().setPrivate(\"Y\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Person expectedPersonPrivateAddress \u003d new PersonBuilder(BOB).withPrivatePhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                .withPrivateEmail(VALID_EMAIL_BOB).withPrivateAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PRIVATE_PHONE_DESC_BOB + PRIVATE_EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                + PRIVATE_ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                new AddCommand(expectedPersonPrivateAddress));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                        + DEPARTMENT_DESC_AMY + MANAGER_DESC_AMY,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        // invalid department"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + INVALID_DEPARTMENT_DESC + MANAGER_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                Department.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        // invalid manager"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                        + DEPARTMENT_DESC_BOB + INVALID_MANAGER_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                Manager.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abtyx": 29,
      "DanKhoo": 45,
      "-": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DEDUCTIBLES_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_OTHOUR_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_OTRATE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SALARY_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.OtHour;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.OtRate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.PayDeductibles;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.Salary;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_SALARY_DESC, Salary.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_OTHOUR_DESC, OtHour.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_OTRATE_DESC, OtRate.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DEDUCTIBLES_DESC, PayDeductibles"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 13,
      "-": 211
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FavouriteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.logic.commands.FavouriteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "public class FavouriteCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    private FavouriteCommandParser parser \u003d new FavouriteCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void parse_validArgs_returnsFavouriteCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertParseSuccess(parser, \"1\", new FavouriteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FavouriteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FeedbackCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FEEDBACK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.logic.commands.FeedbackCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Feedback;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * outside of the FeedbackCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * same path through the FeedbackCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class FeedbackCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FeedbackCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private FeedbackCommandParser parser \u003d new FeedbackCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void parse_validArgs_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertParseSuccess(parser, \"1 \" + PREFIX_FEEDBACK + \"Great\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                new FeedbackCommand(INDEX_FIRST_PERSON, new Feedback(\"Great\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertParseFailure(parser, \"-5 \" + PREFIX_FEEDBACK + \"Sweet\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertParseFailure(parser, \"0 \" + PREFIX_FEEDBACK + \"Awesome\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // missing index"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertParseFailure(parser, PREFIX_FEEDBACK + \"Wow you are great\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // missing feedback prefix"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertParseFailure(parser, \"1 Good job!\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void parse_invalidArgs_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // empty input"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PREFIX_FEEDBACK, Feedback.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindDepartmentCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.logic.commands.FindDepartmentCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.DepartmentContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "public class FindDepartmentCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private FindDepartmentCommandParser parser \u003d new FindDepartmentCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindDepartmentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        FindDepartmentCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new FindDepartmentCommand(new DepartmentContainsKeywordsPredicate(Arrays.asList(\"Accounting\", \"Tech\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertParseSuccess(parser, \"Accounting Tech\", expectedFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertParseSuccess(parser, \" \\n Accounting \\n \\t Tech  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanKhoo": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindEmailCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.logic.commands.FindEmailCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.EmailContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "public class FindEmailCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private FindEmailCommandParser parser \u003d new FindEmailCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindEmailCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        FindEmailCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new FindEmailCommand(new EmailContainsKeywordsPredicate(Arrays.asList(\"daniel@example.com\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertParseSuccess(parser, \"daniel@example.com\", expectedFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertParseSuccess(parser, \" \\n daniel@example.com \\n \\t   \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanKhoo": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindManagerCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.logic.commands.FindManagerCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.ManagerContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "public class FindManagerCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private FindManagerCommandParser parser \u003d new FindManagerCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindManagerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        FindManagerCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new FindManagerCommand(new ManagerContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanKhoo": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Feedback;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Rating;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.Salary;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    private static final String INVALID_SALARY \u003d \"salary\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private static final String INVALID_RATING \u003d \"13\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private static final String INVALID_FEEDBACK \u003d \" \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private static final String VALID_PHONE \u003d \"91821289\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    private static final String VALID_SALARY \u003d \"100\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private static final String VALID_RATING \u003d \"5\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private static final String VALID_FEEDBACK \u003d \"Great progress!\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public void parsePrivacy_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePrivacy(\"a\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public void parsePrivacy_validValueWithoutWhitespace_returnsPrivacy() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        String expectedPrivacy \u003d \"Y\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertEquals(expectedPrivacy, ParserUtil.parsePrivacy(\"Y\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public void parsePrivacy_validValueWithWhitespace_returnsTrimmedPrivacy() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        String expectedPrivacy \u003d \"N\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertEquals(expectedPrivacy, ParserUtil.parsePrivacy(\"    N  \"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    //parse salary test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public void parseSalary_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSalary((String) null));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public void parseSalary_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseSalary(INVALID_SALARY));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public void parseSalary_validValueWithWhitespace_returnsTrimmedSalary() throws Exception {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        String salaryWithWhitespace \u003d WHITESPACE + VALID_SALARY + WHITESPACE;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        Salary expectedSalary \u003d new Salary(VALID_SALARY);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertEquals(expectedSalary, ParserUtil.parseSalary(salaryWithWhitespace));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void parseRating_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseRating((String) null));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void parseRating_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseRating(INVALID_RATING));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void parseRating_validValueWithoutWhitespace_returnsRating() throws Exception {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Rating expectedRating \u003d new Rating(VALID_RATING);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertEquals(expectedRating, ParserUtil.parseRating(VALID_RATING));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void parseRating_validValueWithWhitespace_returnsTrimmedRating() throws Exception {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        String ratingWithWhitespace \u003d WHITESPACE + VALID_RATING + WHITESPACE;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Rating expectedRating \u003d new Rating(VALID_RATING);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertEquals(expectedRating, ParserUtil.parseRating(ratingWithWhitespace));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void parseFeedback_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseFeedback((String) null));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void parseFeedback_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseFeedback(INVALID_FEEDBACK));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void parseFeedback_validValueWithoutWhitespace_returnsFeedback() throws Exception {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Feedback expectedFeedback \u003d new Feedback(VALID_FEEDBACK);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertEquals(expectedFeedback, ParserUtil.parseFeedback(VALID_FEEDBACK));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void parseFeedback_validValueWithWhitespace_returnsTrimmedFeedback() throws Exception {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        String feedbackWithWhitespace \u003d WHITESPACE + VALID_FEEDBACK + WHITESPACE;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Feedback expectedFeedback \u003d new Feedback(VALID_FEEDBACK);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertEquals(expectedFeedback, ParserUtil.parseFeedback(feedbackWithWhitespace));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 52,
      "NgeowXiuQi": 22,
      "abtyx": 17,
      "DanKhoo": 1,
      "-": 207
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/PrivacyCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abtyx"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.logic.commands.PrivacyCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.logic.commands.PrivacyCommand.FieldsToChange;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.testutil.FieldsToChangeBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abtyx"
        },
        "content": "public class PrivacyCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    private static final String PRIVACY_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            \"Privacy option should be only Y or N!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, PrivacyCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    private PrivacyCommandParser parser \u003d new PrivacyCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertParseFailure(parser, \"1\", PrivacyCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //negative index"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //zero index"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertParseFailure(parser, \"1 something\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertParseFailure(parser, \"1\" + \" a/g\", PRIVACY_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        // invalid phone privacy followed by valid email privacy"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertParseFailure(parser, \"1\" + \" p/s e/y\", PRIVACY_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        // valid phone privacy followed by invalid phone privacy"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertParseFailure(parser, \"1\" + \" p/y p/g\", PRIVACY_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        // multiple invalid values, but only the first invalid value captured"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertParseFailure(parser, \"1\" + \" p/g a/g e/g\", PRIVACY_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + \" p/y e/y a/y\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        FieldsToChange fieldsToChange \u003d new FieldsToChangeBuilder().withAllPrivate().build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        PrivacyCommand expectedCommand \u003d new PrivacyCommand(targetIndex, fieldsToChange);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + \" p/y a/y\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        FieldsToChange fieldsToChange \u003d new FieldsToChangeBuilder().withPrivateAddress().withPrivatePhone()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        PrivacyCommand expectedCommand \u003d new PrivacyCommand(targetIndex, fieldsToChange);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        // phone privacy"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + \" p/y\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        FieldsToChange fieldsToChange \u003d new FieldsToChangeBuilder().withPrivatePhone().build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        PrivacyCommand expectedCommand \u003d new PrivacyCommand(targetIndex, fieldsToChange);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //address privacy"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + \" a/y\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        fieldsToChange \u003d new FieldsToChangeBuilder().withPrivateAddress().build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        expectedCommand \u003d new PrivacyCommand(targetIndex, fieldsToChange);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //email privacy"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + \" e/y\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        fieldsToChange \u003d new FieldsToChangeBuilder().withPrivateEmail().build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        expectedCommand \u003d new PrivacyCommand(targetIndex, fieldsToChange);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + \" p/n a/n e/n p/y a/y e/y\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        FieldsToChange fieldsToChange \u003d new FieldsToChangeBuilder().withAllPrivate().build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        PrivacyCommand expectedCommand \u003d new PrivacyCommand(targetIndex, fieldsToChange);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public void parser_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + \" p/g p/y\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        FieldsToChange fieldsToChange \u003d new FieldsToChangeBuilder().withPrivatePhone().build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        PrivacyCommand expectedCommand \u003d new PrivacyCommand(targetIndex, fieldsToChange);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "abtyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abtyx": 131
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RateCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.logic.commands.RateCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Rating;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * outside of the RateCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * same path through the RateCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class RateCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, RateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private RateCommandParser parser \u003d new RateCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void parse_validArgs_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertParseSuccess(parser, \"1 \" + PREFIX_RATING + \"5\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                new RateCommand(INDEX_FIRST_PERSON, new Rating(\"5\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertParseFailure(parser, \"-5 \" + PREFIX_RATING + \"5\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertParseFailure(parser, \"0 \" + PREFIX_RATING + \"5\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // missing index"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertParseFailure(parser, PREFIX_RATING + \"8\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // missing rating prefix"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertParseFailure(parser, \"1 8\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void parse_invalidArgs_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // larger than 10"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PREFIX_RATING + \"11\", Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // non-numeric argument"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PREFIX_RATING + \"five\", Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // empty input"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertParseFailure(parser, \"1 \" + PREFIX_RATING, Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SsenisubParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FEEDBACK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.logic.commands.FavouriteCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.logic.commands.FeedbackCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.logic.commands.PrivacyCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.logic.commands.PrivacyCommand.FieldsToChange;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.logic.commands.RateCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.logic.commands.SortDeptCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.logic.commands.SortRatingDownCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.logic.commands.SortRatingUpCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.logic.commands.UnfavouriteCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.testutil.FieldsToChangeBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class SsenisubParserTest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private final SsenisubParser parser \u003d new SsenisubParser();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public void parseCommand_privacy() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        FieldsToChange fieldsToChange \u003d new FieldsToChangeBuilder().withPrivateAddress().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        PrivacyCommand command \u003d (PrivacyCommand) parser.parseCommand(PrivacyCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "abtyx"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + \"a/y\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertEquals(new PrivacyCommand(INDEX_FIRST_PERSON, fieldsToChange), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Person person \u003d new PersonBuilder().withRating(\"0\").build(); // Rating set to 0 to simulate newly added staff"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void parseCommand_favourite() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        String command \u003d FavouriteCommand.COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertTrue(parser.parseCommand(command) instanceof FavouriteCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void parseCommand_unfavourite() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        String command \u003d UnfavouriteCommand.COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertTrue(parser.parseCommand(command) instanceof UnfavouriteCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void parseCommand_sort() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertTrue(parser.parseCommand(SortCommand.COMMAND_WORD) instanceof SortCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void parseCommand_sortDept() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertTrue(parser.parseCommand(SortDeptCommand.COMMAND_WORD) instanceof SortDeptCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void parseCommand_sortRatingDown() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertTrue(parser.parseCommand(SortRatingDownCommand.COMMAND_WORD) instanceof SortRatingDownCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void parseCommand_sortRatingUp() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertTrue(parser.parseCommand(SortRatingUpCommand.COMMAND_WORD) instanceof SortRatingUpCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void parseCommand_parseCommand_rate() throws Exception {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        String command \u003d RateCommand.COMMAND_WORD + \" 1 \" + PREFIX_RATING + \"5\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(parser.parseCommand(command) instanceof RateCommand);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void parseCommand_parseCommand_feedback() throws Exception {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        String command \u003d FeedbackCommand.COMMAND_WORD + \" 1 \" + PREFIX_FEEDBACK + \"Excellent!\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(parser.parseCommand(command) instanceof FeedbackCommand);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 38,
      "IamRENCE": 19,
      "abtyx": 11,
      "-": 142
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/UnfavouriteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "import seedu.address.logic.commands.UnfavouriteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "valensia0711"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "public class UnfavouriteCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    private UnfavouriteCommandParser parser \u003d new UnfavouriteCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void parse_validArgs_returnsFavouriteCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertParseSuccess(parser, \"1\", new UnfavouriteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                UnfavouriteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.testutil.SsenisubBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.hasPerson(null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void hasPerson_personNotInSsenisub_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void hasPerson_personInSsenisub_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Ssenisub ssenisub \u003d new SsenisubBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Ssenisub differentSsenisub \u003d new Ssenisub();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        modelManager \u003d new ModelManager(ssenisub, userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(ssenisub, userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // different ssenisub -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentSsenisub, userPrefs)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(ssenisub, userPrefs)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        differentUserPrefs.setSsenisubFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(ssenisub, differentUserPrefs)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 12,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/model/SsenisubTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalSsenisub;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class SsenisubTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private final Ssenisub ssenisub \u003d new Ssenisub();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertEquals(Collections.emptyList(), ssenisub.getPersonList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        ssenisub.resetData(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void resetData_withValidReadOnlySsenisub_replacesData() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Ssenisub newData \u003d getTypicalSsenisub();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        ssenisub.resetData(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertEquals(newData, ssenisub);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        SsenisubStub newData \u003d new SsenisubStub(newPersons);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        ssenisub.resetData(newData);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        ssenisub.hasPerson(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void hasPerson_personNotInSsenisub_returnsFalse() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(ssenisub.hasPerson(ALICE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void hasPerson_personInSsenisub_returnsTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        ssenisub.addPerson(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(ssenisub.hasPerson(ALICE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInSsenisub_returnsTrue() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        ssenisub.addPerson(ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(ssenisub.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        ssenisub.getPersonList().remove(0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * A stub ReadOnlySsenisub whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private static class SsenisubStub implements ReadOnlySsenisub {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        SsenisubStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 24,
      "-": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedSsenisubTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.testutil.SsenisubBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class VersionedSsenisubTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private final ReadOnlySsenisub ssenisubWithAmy \u003d new SsenisubBuilder().withPerson(AMY).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private final ReadOnlySsenisub ssenisubWithBob \u003d new SsenisubBuilder().withPerson(BOB).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private final ReadOnlySsenisub ssenisubWithCarl \u003d new SsenisubBuilder().withPerson(CARL).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private final ReadOnlySsenisub emptySsenisub \u003d new SsenisubBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void commit_singleSsenisub_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        VersionedSsenisub versionedSsenisub \u003d prepareSsenisubList(emptySsenisub);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        versionedSsenisub.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertSsenisubListStatus(versionedSsenisub,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                Collections.singletonList(emptySsenisub),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                emptySsenisub,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void commit_multipleSsenisubPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        VersionedSsenisub versionedSsenisub \u003d prepareSsenisubList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                emptySsenisub, ssenisubWithAmy, ssenisubWithBob);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        versionedSsenisub.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertSsenisubListStatus(versionedSsenisub,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                Arrays.asList(emptySsenisub, ssenisubWithAmy, ssenisubWithBob),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                ssenisubWithBob,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void commit_multipleSsenisubPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        VersionedSsenisub versionedSsenisub \u003d prepareSsenisubList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                emptySsenisub, ssenisubWithAmy, ssenisubWithBob);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedSsenisub, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        versionedSsenisub.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertSsenisubListStatus(versionedSsenisub,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                Collections.singletonList(emptySsenisub),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                emptySsenisub,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void canUndo_multipleSsenisubPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        VersionedSsenisub versionedSsenisub \u003d prepareSsenisubList("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                emptySsenisub, ssenisubWithAmy, ssenisubWithBob);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(versionedSsenisub.canUndo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void canUndo_multipleSsenisubPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        VersionedSsenisub versionedSsenisub \u003d prepareSsenisubList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                emptySsenisub, ssenisubWithAmy, ssenisubWithBob);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedSsenisub, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(versionedSsenisub.canUndo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void canUndo_singleSsenisub_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        VersionedSsenisub versionedSsenisub \u003d prepareSsenisubList(emptySsenisub);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(versionedSsenisub.canUndo());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void canUndo_multipleSsenisubPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        VersionedSsenisub versionedSsenisub \u003d prepareSsenisubList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                emptySsenisub, ssenisubWithAmy, ssenisubWithBob);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedSsenisub, 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(versionedSsenisub.canUndo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void canRedo_multipleSsenisubPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        VersionedSsenisub versionedSsenisub \u003d prepareSsenisubList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                emptySsenisub, ssenisubWithAmy, ssenisubWithBob);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedSsenisub, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(versionedSsenisub.canRedo());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void canRedo_multipleSsenisubPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        VersionedSsenisub versionedSsenisub \u003d prepareSsenisubList("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                emptySsenisub, ssenisubWithAmy, ssenisubWithBob);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedSsenisub, 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(versionedSsenisub.canRedo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void canRedo_singleSsenisub_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        VersionedSsenisub versionedSsenisub \u003d prepareSsenisubList(emptySsenisub);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(versionedSsenisub.canRedo());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void canRedo_multipleSsenisubPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        VersionedSsenisub versionedSsenisub \u003d prepareSsenisubList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                emptySsenisub, ssenisubWithAmy, ssenisubWithBob);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(versionedSsenisub.canRedo());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void undo_multipleSsenisubPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        VersionedSsenisub versionedSsenisub \u003d prepareSsenisubList("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                emptySsenisub, ssenisubWithAmy, ssenisubWithBob);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        versionedSsenisub.undo();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertSsenisubListStatus(versionedSsenisub,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                Collections.singletonList(emptySsenisub),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                ssenisubWithAmy,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                Collections.singletonList(ssenisubWithBob));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void undo_multipleSsenisubPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        VersionedSsenisub versionedSsenisub \u003d prepareSsenisubList("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                emptySsenisub, ssenisubWithAmy, ssenisubWithBob);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedSsenisub, 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        versionedSsenisub.undo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertSsenisubListStatus(versionedSsenisub,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                emptySsenisub,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                Arrays.asList(ssenisubWithAmy, ssenisubWithBob));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void undo_singleSsenisub_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        VersionedSsenisub versionedSsenisub \u003d prepareSsenisubList(emptySsenisub);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertThrows(VersionedSsenisub.NoUndoableStateException.class, versionedSsenisub::undo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void undo_multipleSsenisubPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        VersionedSsenisub versionedSsenisub \u003d prepareSsenisubList("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                emptySsenisub, ssenisubWithAmy, ssenisubWithBob);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedSsenisub, 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertThrows(VersionedSsenisub.NoUndoableStateException.class, versionedSsenisub::undo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void redo_multipleSsenisubPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        VersionedSsenisub versionedSsenisub \u003d prepareSsenisubList("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                emptySsenisub, ssenisubWithAmy, ssenisubWithBob);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedSsenisub, 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        versionedSsenisub.redo();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertSsenisubListStatus(versionedSsenisub,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                Arrays.asList(emptySsenisub, ssenisubWithAmy),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                ssenisubWithBob,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void redo_multipleSsenisubPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        VersionedSsenisub versionedSsenisub \u003d prepareSsenisubList("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                emptySsenisub, ssenisubWithAmy, ssenisubWithBob);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedSsenisub, 2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        versionedSsenisub.redo();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertSsenisubListStatus(versionedSsenisub,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                Collections.singletonList(emptySsenisub),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                ssenisubWithAmy,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                Collections.singletonList(ssenisubWithBob));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void redo_singleSsenisub_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        VersionedSsenisub versionedSsenisub \u003d prepareSsenisubList(emptySsenisub);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertThrows(VersionedSsenisub.NoRedoableStateException.class, versionedSsenisub::redo);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void redo_multipleSsenisubPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        VersionedSsenisub versionedSsenisub \u003d prepareSsenisubList("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                emptySsenisub, ssenisubWithAmy, ssenisubWithBob);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertThrows(VersionedSsenisub.NoRedoableStateException.class, versionedSsenisub::redo);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        VersionedSsenisub versionedSsenisub \u003d prepareSsenisubList(ssenisubWithAmy, ssenisubWithBob);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        VersionedSsenisub copy \u003d prepareSsenisubList(ssenisubWithAmy, ssenisubWithBob);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(versionedSsenisub.equals(copy));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(versionedSsenisub.equals(versionedSsenisub));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(versionedSsenisub.equals(null));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(versionedSsenisub.equals(1));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        VersionedSsenisub differentSsenisubList \u003d prepareSsenisubList(ssenisubWithBob, ssenisubWithCarl);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(versionedSsenisub.equals(differentSsenisubList));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        VersionedSsenisub differentCurrentStatePointer \u003d prepareSsenisubList("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                ssenisubWithAmy, ssenisubWithBob);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedSsenisub, 1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(versionedSsenisub.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Asserts that {@code versionedSsenisub} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * states before {@code versionedSsenisub#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * and states after {@code versionedSsenisub#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private void assertSsenisubListStatus(VersionedSsenisub versionedSsenisub,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                                             List\u003cReadOnlySsenisub\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                                             ReadOnlySsenisub expectedCurrentState,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                                             List\u003cReadOnlySsenisub\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertEquals(new Ssenisub(versionedSsenisub), expectedCurrentState);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        while (versionedSsenisub.canUndo()) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            versionedSsenisub.undo();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        for (ReadOnlySsenisub expectedSsenisub : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            assertEquals(expectedSsenisub, new Ssenisub(versionedSsenisub));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            versionedSsenisub.redo();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        for (ReadOnlySsenisub expectedSsenisub : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            versionedSsenisub.redo();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            assertEquals(expectedSsenisub, new Ssenisub(versionedSsenisub));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(versionedSsenisub.canRedo());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedSsenisub.undo());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Creates and returns a {@code VersionedSsenisub} with the {@code ssenisubStates} added into it, and the"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * {@code VersionedSsenisub#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private VersionedSsenisub prepareSsenisubList(ReadOnlySsenisub... ssenisubStates) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(ssenisubStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        VersionedSsenisub versionedSsenisub \u003d new VersionedSsenisub(ssenisubStates[0]);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        for (int i \u003d 1; i \u003c ssenisubStates.length; i++) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            versionedSsenisub.resetData(ssenisubStates[i]);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            versionedSsenisub.commit();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return versionedSsenisub;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Shifts the {@code versionedSsenisub#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedSsenisub versionedSsenisub, int count) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            versionedSsenisub.undo();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 298
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/AddressTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertTrue(Address.isValidAddress(\"1234 Market St; San Francisco CA 2349879;\")); // long address"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public void isPrivate() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Address address \u003d new Address(\"Boon Lay\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //default address"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertFalse(address.isPrivate());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abtyx": 6,
      "DanKhoo": 1,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/DepartmentTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "public class DepartmentTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Department(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void constructor_invalidDepartment_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        String invalidDepartment \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Department(invalidDepartment));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void isValidDepartment() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        // null department"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Department.isValidDepartment(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        // invalid department"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertFalse(Department.isValidDepartment(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertFalse(Department.isValidDepartment(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertFalse(Department.isValidDepartment(\"123\")); // numbers only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertFalse(Department.isValidDepartment(\"Accounting123\")); // alphabets + numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        // valid department"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertTrue(Department.isValidDepartment(\"Accounting\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanKhoo": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/EmailTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public void isPrivate() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Email email \u003d new Email(\"yxt@msn.com\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //default email"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertFalse(email.isPrivate());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abtyx": 7,
      "-": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/FeedbackTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class FeedbackTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Feedback(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void constructor_invalidFeedback_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        String invalidFeedback \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Feedback(invalidFeedback));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void isValidFeedback() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // null feedback"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Feedback.isValidFeedback(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // invalid feedback"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(Feedback.isValidFeedback(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(Feedback.isValidFeedback(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // valid feedback"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(Feedback.isValidFeedback(\"Work harder.\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(Feedback.isValidFeedback(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(Feedback.isValidFeedback(\"I\u0027m really impressed by your work performance. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                                            + \"Keep it up!\")); // long feedback"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void hasNoProfanityFeedback() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // feedback with profanity --\u003e rejected"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(Feedback.hasNoProfanity(\"fuck\")); // one profanity"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(Feedback.hasNoProfanity(\"ass\")); // hard coded profanity"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(Feedback.hasNoProfanity(\"fuck asshole\")); // profanities split with space"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(Feedback.hasNoProfanity(\"zkanasaiz\")); // profanities within word"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(Feedback.hasNoProfanity(\"You very kpkb, nobody ask you to stfu meh \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            + \"jibai pubor kia\")); // many profanities"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // clean feedback --\u003e accepted"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(Feedback.hasNoProfanity(\"Work harder.\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(Feedback.hasNoProfanity(\"pakistan\")); // paki should be rejected but ignore check on pakistan"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(Feedback.hasNoProfanity(\"What happened to you? You were really rocking it last month, \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                + \"but it is evident that you are sloppy these few days.\")); // long feedback"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Feedback positiveFeedback \u003d new Feedback(\"You are good!\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Feedback negativeFeedback \u003d new Feedback(\"You are bad!\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(positiveFeedback.equals(positiveFeedback));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(positiveFeedback.equals(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(positiveFeedback.equals(\"0\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // different rating -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(positiveFeedback.equals(negativeFeedback));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/ManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "public class ManagerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Manager(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void constructor_invalidManager_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        String invalidManager \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Manager(invalidManager));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void isValidManager() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        // null manager"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Manager.isValidManager(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        // invalid manager"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertFalse(Manager.isValidManager(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertFalse(Manager.isValidManager(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertFalse(Manager.isValidManager(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertFalse(Manager.isValidManager(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertFalse(Manager.isValidManager(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertFalse(Manager.isValidManager(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        // valid manager"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertTrue(Manager.isValidManager(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertTrue(Manager.isValidManager(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertTrue(Manager.isValidManager(\"David Roger Jackson Ray Jr\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanKhoo": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"98271821\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"98271821\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanKhoo": 2,
      "-": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertFalse(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertFalse(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr nd\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DanKhoo": 3,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/OtHourTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "public class OtHourTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new OtHour(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public void constructor_invalidOtHour_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        String invalidHours \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new OtHour(invalidHours));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public void isValidOtHours() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        // null OT Hour"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e OtHour.isValidTwoDecimalNumber(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        // invalid OT hour"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(OtHour.isValidTwoDecimalNumber(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(OtHour.isValidTwoDecimalNumber(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(OtHour.isValidTwoDecimalNumber(\"hours\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(OtHour.isValidTwoDecimalNumber(\"2o\")); // alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(OtHour.isValidTwoDecimalNumber(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        // valid hours"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertTrue(OtHour.isValidTwoDecimalNumber(\"100\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertTrue(OtHour.isValidTwoDecimalNumber(\"100.00\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertTrue(OtHour.isValidTwoDecimalNumber(\"33123\")); // long hours"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/OtRateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "public class OtRateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new OtRate(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public void constructor_invalidOtRate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        String invalidRate \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new OtRate(invalidRate));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public void isValidOtRate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        // null OT rate"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e OtRate.isValidTwoDecimalNumber(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        // invalid OT rate"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(OtRate.isValidTwoDecimalNumber(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(OtRate.isValidTwoDecimalNumber(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(OtRate.isValidTwoDecimalNumber(\"hours\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(OtRate.isValidTwoDecimalNumber(\"2o\")); // alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(OtRate.isValidTwoDecimalNumber(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        // valid rate"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertTrue(OtRate.isValidTwoDecimalNumber(\"100\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertTrue(OtRate.isValidTwoDecimalNumber(\"100.00\")); // decimal places"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertTrue(OtRate.isValidTwoDecimalNumber(\"33123\")); // long rate"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PayDeductiblesTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "public class PayDeductiblesTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new PayDeductibles(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public void constructor_invalidPayDeductibles_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        String invalidHours \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new OtHour(invalidHours));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public void isValidPayDeductibles() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        // null pay deductibles"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e PayDeductibles.isValidTwoDecimalNumber(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        // invalid pay deductibles"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(PayDeductibles.isValidTwoDecimalNumber(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(PayDeductibles.isValidTwoDecimalNumber(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(PayDeductibles.isValidTwoDecimalNumber(\"hours\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(PayDeductibles.isValidTwoDecimalNumber(\"2o\")); // alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(PayDeductibles.isValidTwoDecimalNumber(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        // valid pay deductibles"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertTrue(OtHour.isValidTwoDecimalNumber(\"100\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertTrue(OtHour.isValidTwoDecimalNumber(\"100.00\")); // decimal places"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertTrue(OtHour.isValidTwoDecimalNumber(\"102948200098\")); // long hours"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PhoneTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9112312\")); // less than 8 numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"83121534\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public void isPrivate() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        Phone phone \u003d new Phone(\"92349234\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //default phone"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertFalse(phone.isPrivate());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        phone \u003d new Phone(\"92349234\", \"N\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertFalse(phone.isPrivate());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        phone \u003d new Phone(\"92349234\", \"Y\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertTrue(phone.isPrivate());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        phone \u003d new Phone(\"92349234\", \"y\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertFalse(phone.isPrivate());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abtyx": 14,
      "DanKhoo": 4,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/RatingTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class RatingTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Rating(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void constructor_invalidRating_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        String invalidRating \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Rating(invalidRating));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void isValidRating() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // null rating"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Rating.isValidRating(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // invalid rating"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(Rating.isValidRating(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(Rating.isValidRating(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(Rating.isValidRating(\"91\")); // more than 10"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(Rating.isValidRating(\"rating\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(Rating.isValidRating(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(Rating.isValidRating(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // valid rating"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(Rating.isValidRating(\"0\")); // between 0 to 10"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(Rating.isValidRating(\"10\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(Rating.isValidRating(\"5\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void isValidInputRating() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // null input rating"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Rating.isValidInputRating(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // invalid input rating"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(Rating.isValidInputRating(\"\")); // empty string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(Rating.isValidInputRating(\" \")); // spaces only"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(Rating.isValidInputRating(\"91\")); // more than 10"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(Rating.isValidInputRating(\"0\")); // less than 1"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(Rating.isValidInputRating(\"rating\")); // non-numeric"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(Rating.isValidInputRating(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(Rating.isValidInputRating(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // valid input rating"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(Rating.isValidInputRating(\"1\")); // between 1 to 10"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(Rating.isValidInputRating(\"10\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(Rating.isValidInputRating(\"5\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Rating zeroRating \u003d new Rating(\"0\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Rating fullRating \u003d new Rating(\"10\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(zeroRating.equals(zeroRating));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(zeroRating.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(zeroRating.equals(\"0\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        // different rating -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(zeroRating.equals(fullRating));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/SalaryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "public class SalaryTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Salary(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public void constructor_invalidSalary_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        String invalidSalary \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Salary(invalidSalary));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public void isValidSalary() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        // null salary"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Salary.isValidSalary(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        // invalid salaries"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(Salary.isValidSalary(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(Salary.isValidSalary(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(Salary.isValidSalary(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(Salary.isValidSalary(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertFalse(Salary.isValidSalary(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        // valid salaries"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertTrue(Salary.isValidSalary(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertTrue(Salary.isValidSalary(\"93121534\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertTrue(Salary.isValidSalary(\"124293842033123\")); // long salary"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(1000, 500, 300, 100);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        userPrefs.setSsenisubFilePath(Paths.get(\"ssenisub.xml\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(1200, 200, 0, 2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(5, 5, 5, 5);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalSsenisub;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.commons.events.model.SsenisubChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.ReadOnlySsenisub;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.Ssenisub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        XmlSsenisubStorage ssenisubStorage \u003d new XmlSsenisubStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        storageManager \u003d new StorageManager(ssenisubStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void ssenisubReadSave() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "         * {@link XmlSsenisubStorage} class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlSsenisubStorageTest} class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Ssenisub original \u003d getTypicalSsenisub();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        storageManager.saveSsenisub(original);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        ReadOnlySsenisub retrieved \u003d storageManager.readSsenisub().get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertEquals(original, new Ssenisub(retrieved));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void getSsenisubFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertNotNull(storageManager.getSsenisubFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void handleSsenisubChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlSsenisubStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                                             new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        storage.handleSsenisubChangedEvent(new SsenisubChangedEvent(new Ssenisub()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    class XmlSsenisubStorageExceptionThrowingStub extends XmlSsenisubStorage {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        public XmlSsenisubStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        public void saveSsenisub(ReadOnlySsenisub ssenisub, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 21,
      "-": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.NINJA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Manager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPersonTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private static final String INVALID_DEPARTMENT \u003d \"Accounting123\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private static final String INVALID_MANAGER \u003d \"B@N\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private static final String VALID_DEPARTMENT \u003d BENSON.getDepartment().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private static final String VALID_MANAGER \u003d BENSON.getManager().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private static final String VALID_NAME_2 \u003d CARL.getName().toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private static final String VALID_PHONE_2 \u003d CARL.getPhone().toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private static final String VALID_EMAIL_2 \u003d CARL.getEmail().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private static final String VALID_ADDRESS_2 \u003d CARL.getAddress().toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private static final String VALID_DEPARTMENT_2 \u003d CARL.getDepartment().toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private static final String VALID_MANAGER_2 \u003d CARL.getManager().toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS_2 \u003d CARL.getTags().stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public void toModelType_validPersonWithPrivateDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(NINJA);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertEquals(NINJA, person.toModelType());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DEPARTMENT,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                        VALID_MANAGER, false, false, false, false, VALID_TAGS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                VALID_DEPARTMENT, VALID_MANAGER, false, false, false, false, VALID_TAGS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DEPARTMENT,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                        VALID_MANAGER, false, false, false, false, VALID_TAGS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                VALID_DEPARTMENT, VALID_MANAGER, false, false, false, false, VALID_TAGS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_DEPARTMENT,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                        VALID_MANAGER, false, false, false, false, VALID_TAGS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                VALID_DEPARTMENT, VALID_MANAGER, false, false, false, false, VALID_TAGS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_DEPARTMENT,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                        VALID_MANAGER, false, false, false, false, VALID_TAGS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                VALID_DEPARTMENT, VALID_MANAGER, false, false, false, false, VALID_TAGS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void toModelType_invalidDepartment_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, INVALID_DEPARTMENT,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                        VALID_MANAGER, false, false, false, false, VALID_TAGS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        String expectedMessage \u003d Department.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void toModelType_nullDepartment_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                null, VALID_MANAGER, false, false, false, false, VALID_TAGS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Department.class.getSimpleName());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void toModelType_invalidManager_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DEPARTMENT,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                        INVALID_MANAGER, false, false, false, false, VALID_TAGS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        String expectedMessage \u003d Manager.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void toModelType_nullManager_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                VALID_DEPARTMENT, null, false, false, false, false, VALID_TAGS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Manager.class.getSimpleName());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DEPARTMENT,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                        VALID_MANAGER, false, false, false, false, invalidTags);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void test_equals() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        XmlAdaptedPerson personOne \u003d"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DEPARTMENT,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                        VALID_MANAGER, false, false, false, false, VALID_TAGS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        XmlAdaptedPerson personTwo \u003d"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME_2, VALID_PHONE_2, VALID_EMAIL_2, VALID_ADDRESS_2, VALID_DEPARTMENT_2,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "                        VALID_MANAGER_2, false, false, false, false, VALID_TAGS_2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(personOne.equals(personOne)); // same person"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(personOne.equals(personTwo)); // different person"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 15,
      "IamRENCE": 24,
      "abtyx": 7,
      "DanKhoo": 45,
      "-": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableSsenisubTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.Ssenisub;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class XmlSerializableSsenisubTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableSsenisubTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsSsenisub.xml\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonSsenisub.xml\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonSsenisub.xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        XmlSerializableSsenisub dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                XmlSerializableSsenisub.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Ssenisub ssenisubFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Ssenisub typicalPersonsSsenisub \u003d TypicalPersons.getTypicalSsenisub();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertEquals(ssenisubFromFile, typicalPersonsSsenisub);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        XmlSerializableSsenisub dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                XmlSerializableSsenisub.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        XmlSerializableSsenisub dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                XmlSerializableSsenisub.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        thrown.expectMessage(XmlSerializableSsenisub.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 16,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSsenisubStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalSsenisub;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.ReadOnlySsenisub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.Ssenisub;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class XmlSsenisubStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSsenisubStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void readSsenisub_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        readSsenisub(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private java.util.Optional\u003cReadOnlySsenisub\u003e readSsenisub(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return new XmlSsenisubStorage(Paths.get(filePath)).readSsenisub(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(readSsenisub(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        readSsenisub(\"NotXmlFormatSsenisub.xml\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void readSsenisub_invalidPersonSsenisub_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        readSsenisub(\"invalidPersonSsenisub.xml\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void readSsenisub_invalidAndValidPersonSsenisub_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        readSsenisub(\"invalidAndValidPersonSsenisub.xml\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void readAndSaveSsenisub_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempSsenisub.xml\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Ssenisub original \u003d getTypicalSsenisub();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        XmlSsenisubStorage xmlSsenisubStorage \u003d new XmlSsenisubStorage(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        xmlSsenisubStorage.saveSsenisub(original, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        ReadOnlySsenisub readBack \u003d xmlSsenisubStorage.readSsenisub(filePath).get();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertEquals(original, new Ssenisub(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        xmlSsenisubStorage.saveSsenisub(original, filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        readBack \u003d xmlSsenisubStorage.readSsenisub(filePath).get();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertEquals(original, new Ssenisub(readBack));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        xmlSsenisubStorage.saveSsenisub(original); //file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        readBack \u003d xmlSsenisubStorage.readSsenisub().get(); //file path not specified"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertEquals(original, new Ssenisub(readBack));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void saveSsenisub_nullSsenisub_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        saveSsenisub(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Saves {@code ssenisub} at the specified {@code filePath}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private void saveSsenisub(ReadOnlySsenisub ssenisub, String filePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            new XmlSsenisubStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                    .saveSsenisub(ssenisub, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void saveSsenisub_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        saveSsenisub(new Ssenisub(), null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Manager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.OtHour;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.OtRate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.PayDeductibles;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.Salary;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        descriptor.setDepartment(person.getDepartment());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        descriptor.setManager(person.getManager());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        descriptor.setSalary(person.getSalary());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        descriptor.setHours(person.getOtHours());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        descriptor.setRate(person.getOtRate());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        descriptor.setDeductibles(person.getDeductibles());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Sets the {@code Department} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public EditPersonDescriptorBuilder withDepartment(String department) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        descriptor.setDepartment(new Department(department));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Sets the {@code Manager} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public EditPersonDescriptorBuilder withManager(String manager) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        descriptor.setManager(new Manager(manager));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * Sets the {@code Salary} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public EditPersonDescriptorBuilder withSalary(String salary) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        descriptor.setSalary(new Salary(salary));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * Sets the {@code OtHour} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public EditPersonDescriptorBuilder withHour(String hours) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        descriptor.setHours(new OtHour(hours));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * Sets the {@code OtRate} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public EditPersonDescriptorBuilder withRate(String rate) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        descriptor.setRate(new OtRate(rate));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * Sets the {@code PayDeductibles} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public EditPersonDescriptorBuilder withDeductibles(String deductibles) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        descriptor.setDeductibles(new PayDeductibles(deductibles));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 40,
      "DanKhoo": 20,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/FieldsToChangeBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "abtyx"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.logic.commands.PrivacyCommand.FieldsToChange;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abtyx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "abtyx"
        },
        "content": " * A utility class to help with building FieldsToChange objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "abtyx"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "abtyx"
        },
        "content": "public class FieldsToChangeBuilder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    private FieldsToChange fieldsToChange;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public FieldsToChangeBuilder() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        fieldsToChange \u003d new FieldsToChange();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Sets the phone value of the builder to private."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public FieldsToChangeBuilder withPrivatePhone() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        fieldsToChange.setPhonePrivacy(\"Y\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Sets the email value of the builder to private."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public FieldsToChangeBuilder withPrivateEmail() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        fieldsToChange.setEmailPrivacy(\"Y\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Sets the address value of the builder to private."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public FieldsToChangeBuilder withPrivateAddress() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        fieldsToChange.setAddressPrivacy(\"Y\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Sets the phone, email and address value of the builder to private."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public FieldsToChangeBuilder withAllPrivate() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        fieldsToChange.setPhonePrivacy(\"Y\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        fieldsToChange.setEmailPrivacy(\"Y\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        fieldsToChange.setAddressPrivacy(\"Y\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Sets the phone, email and address value of the builder to non-private."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public FieldsToChangeBuilder withNotPrivate() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        fieldsToChange.setPhonePrivacy(\"N\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        fieldsToChange.setEmailPrivacy(\"N\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        fieldsToChange.setAddressPrivacy(\"N\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Builds the FieldsToChange with the privacy values set."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * @return FieldsToChange"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public FieldsToChange build() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        return fieldsToChange;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "abtyx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abtyx": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Feedback;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Manager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.OtHour;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.OtRate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.PayDeductibles;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Rating;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import seedu.address.model.person.Salary;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static final String DEFAULT_RATING \u003d \"0\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String DEFAULT_SALARY \u003d \"0\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String DEFAULT_OTHOUR \u003d \"0\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String DEFAULT_OTRATE \u003d \"0\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public static final String DEFAULT_DEDUCTIBLES \u003d \"0\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String DEFAULT_DEPARTMENT \u003d \"Accounting\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String DEFAULT_MANAGER \u003d \"Ben Leong\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static final String DEFAULT_FEEDBACK \u003d \"-NO FEEDBACK YET-\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public static final boolean DEFAULT_FAVOURITE \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    private Salary salary;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    private OtHour hours;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    private OtRate rate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    private PayDeductibles deductibles;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private Rating rating;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private Department department;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private Manager manager;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    private boolean favourite;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private Feedback feedback;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        salary \u003d new Salary(DEFAULT_SALARY);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        hours \u003d new OtHour(DEFAULT_OTHOUR);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        rate \u003d new OtRate(DEFAULT_OTRATE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        deductibles \u003d new PayDeductibles(DEFAULT_DEDUCTIBLES);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        rating \u003d new Rating(DEFAULT_RATING);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        department \u003d new Department(DEFAULT_DEPARTMENT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        manager \u003d new Manager(DEFAULT_MANAGER);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        feedback \u003d new Feedback(DEFAULT_FEEDBACK);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        favourite \u003d Boolean.FALSE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        salary \u003d personToCopy.getSalary();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        hours \u003d personToCopy.getOtHours();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        rate \u003d personToCopy.getOtRate();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        deductibles \u003d personToCopy.getDeductibles();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        rating \u003d personToCopy.getRating();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        department \u003d personToCopy.getDepartment();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        manager \u003d personToCopy.getManager();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        feedback \u003d personToCopy.getFeedback();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        favourite \u003d personToCopy.getFavourite();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * Sets the (@code Salary) of the (@code Person) that we are building."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * @param salary"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public PersonBuilder withSalary(String salary) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        this.salary \u003d new Salary(salary);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * Sets the (@code OtHour) of the (@code Person) that we are building."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * @param hours"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public PersonBuilder withHours(String hours) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        this.hours \u003d new OtHour(hours);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * Sets the (@code OtRate) of the (@code Person) that we are building."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * @param rate"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public PersonBuilder withRate(String rate) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        this.rate \u003d new OtRate(rate);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * Sets the (@code PayDeductibles) of the (@code Person) that we are building."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * @param deductibles"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    public PersonBuilder withDeductibles(String deductibles) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        this.deductibles \u003d new PayDeductibles(deductibles);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Sets the private {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public PersonBuilder withPrivateAddress(String address) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        this.address \u003d new Address(address, \"Y\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Sets the private {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public PersonBuilder withPrivatePhone(String phone) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        this.phone \u003d new Phone(phone, \"Y\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     * Sets the private {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "abtyx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public PersonBuilder withPrivateEmail(String email) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        this.email \u003d new Email(email, \"Y\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Sets the {@code Rating} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public PersonBuilder withRating(String rating) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        this.rating \u003d new Rating(rating);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Sets the {@code Department} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public PersonBuilder withDepartment(String department) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        this.department \u003d new Department(department);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Sets the {@code Manager} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public PersonBuilder withManager(String manager) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        this.manager \u003d new Manager(manager);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     * Sets the {@code Favourite} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public PersonBuilder withFavourite(boolean favourite) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        this.favourite \u003d favourite;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "valensia0711"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Sets the {@code Feedback} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public PersonBuilder withFeedback(String feedback) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        this.feedback \u003d new Feedback(feedback);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     * Builds a new person based on the current one."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        return new Person(name, phone, email, address, rating, department, manager,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "          salary, hours, rate, deductibles, feedback, tags, favourite);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 13,
      "IamRENCE": 25,
      "NgeowXiuQi": 61,
      "abtyx": 24,
      "DanKhoo": 26,
      "-": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEDUCTIBLES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEPARTMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MANAGER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OTHOUR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OTRATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SALARY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        sb.append(PREFIX_DEPARTMENT + person.getDepartment().value + \" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        sb.append(PREFIX_MANAGER + person.getManager().fullName + \" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                    + s.tagName + \" \")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        descriptor.getDepartment().ifPresent(department -\u003e sb.append(PREFIX_DEPARTMENT).append(department.value)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                .append(\" \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        descriptor.getManager().ifPresent(manager -\u003e sb.append(PREFIX_MANAGER).append(manager.fullName).append(\" \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        descriptor.getSalary().ifPresent(salary -\u003e sb.append(PREFIX_SALARY).append(salary.salary).append(\" \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        descriptor.getHours().ifPresent(hour -\u003e sb.append(PREFIX_OTHOUR).append(hour.overTimeHour).append(\" \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        descriptor.getRate().ifPresent(rate -\u003e sb.append(PREFIX_OTRATE).append(rate.overTimeRate).append(\" \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        descriptor.getDeductibles().ifPresent(deductibles -\u003e sb.append(PREFIX_DEDUCTIBLES)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .append(deductibles.payDeductibles).append(\" \"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 9,
      "IamRENCE": 2,
      "DanKhoo": 7,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SsenisubBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.Ssenisub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * A utility class to help with building ssenisub objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " *     {@code ssenisub ab \u003d new SsenisubBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class SsenisubBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private Ssenisub ssenisub;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public SsenisubBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        ssenisub \u003d new Ssenisub();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public SsenisubBuilder(Ssenisub ssenisub) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        this.ssenisub \u003d ssenisub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Adds a new {@code Person} to the {@code ssenisub} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public SsenisubBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        ssenisub.addPerson(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public Ssenisub build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return ssenisub;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEPARTMENT_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DEPARTMENT_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MANAGER_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.Ssenisub;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            .withPhone(\"94351253\").withRating(\"0\").withDepartment(\"Accounting\").withManager(\"Ben Leong\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            .withSalary(\"0\").withHours(\"0\").withRate(\"0\").withDeductibles(\"0\").withFeedback(\"-NO FEEDBACK YET-\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            .withEmail(\"benson@example.com\").withPhone(\"98765432\").withRating(\"0\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            .withDepartment(\"Marketing\").withManager(\"Marcus Tan\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            .withSalary(\"0\").withHours(\"0\").withRate(\"0\").withDeductibles(\"0\").withFeedback(\"-NO FEEDBACK YET-\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            .withEmail(\"carl@example.com\").withAddress(\"wall street\").withRating(\"0\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .withDepartment(\"Tech\").withManager(\"Moses Lim\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            .withSalary(\"0\").withHours(\"0\").withRate(\"0\").withDeductibles(\"0\").withFeedback(\"-NO FEEDBACK YET-\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            .withEmail(\"daniel@example.com\").withAddress(\"10th street\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .withRating(\"0\").withDepartment(\"Accounting\").withManager(\"Lionel Lim\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            .withSalary(\"0\").withHours(\"0\").withRate(\"0\").withDeductibles(\"0\").withFeedback(\"-NO FEEDBACK YET-\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"94822241\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            .withEmail(\"elle@example.com\").withAddress(\"michegan ave\").withRating(\"0\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .withDepartment(\"Marketing\").withManager(\"Edward Loh\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            .withSalary(\"0\").withHours(\"0\").withRate(\"0\").withDeductibles(\"0\").withFeedback(\"-NO FEEDBACK YET-\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"94824271\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            .withEmail(\"fiona@example.com\").withAddress(\"little tokyo\").withRating(\"0\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .withDepartment(\"Tech\").withManager(\"Joanne Lee\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            .withSalary(\"0\").withHours(\"0\").withRate(\"0\").withDeductibles(\"0\").withFeedback(\"-NO FEEDBACK YET-\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"94824421\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            .withEmail(\"george@example.com\").withAddress(\"4th street\").withRating(\"0\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .withDepartment(\"Accounting\").withManager(\"Ben Leong\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            .withSalary(\"0\").withHours(\"0\").withRate(\"0\").withDeductibles(\"0\").withFeedback(\"-NO FEEDBACK YET-\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public static final Person HARRY \u003d new PersonBuilder().withName(\"Harry Potter\").withPhone(\"95284922\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            .withEmail(\"harry@example.com\").withAddress(\"9.75 platform\").withRating(\"0\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            .withDepartment(\"Tech\").withManager(\"Sirius Snape\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            .withSalary(\"0\").withHours(\"0\").withRate(\"0\").withDeductibles(\"0\").withFeedback(\"-NO FEEDBACK YET-\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            .withFavourite(true).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"84824241\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            .withEmail(\"hoon@example.com\").withAddress(\"little india\").withRating(\"0\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .withDepartment(\"Marketing\").withManager(\"Marcus Tan\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            .withSalary(\"0\").withHours(\"0\").withRate(\"0\").withDeductibles(\"0\").withFeedback(\"-NO FEEDBACK YET-\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"84821311\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            .withEmail(\"ida@example.com\").withAddress(\"chicago ave\").withRating(\"0\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .withDepartment(\"Tech\").withManager(\"Moses Lim\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            .withSalary(\"0\").withHours(\"0\").withRate(\"0\").withDeductibles(\"0\").withFeedback(\"-NO FEEDBACK YET-\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public static final Person JASON \u003d new PersonBuilder().withName(\"Jason Samuel\").withPhone(\"98832818\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            .withEmail(\"jasonsamuel@example.com\").withAddress(\"PGPR\").withRating(\"4\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            .withDepartment(\"Marketing\").withManager(\"Michael Lam\").withSalary(\"0\").withHours(\"0\").withRate(\"0\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            .withDeductibles(\"0\").withFeedback(\"-NO FEEDBACK YET-\").build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public static final Person KEVIN \u003d new PersonBuilder().withName(\"Kevin William\").withPhone(\"92734819\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            .withEmail(\"kevinwilliam@example.com\").withAddress(\"Surabaya\").withRating(\"7\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            .withDepartment(\"Tech\").withManager(\"Michael Lam\").withSalary(\"0\").withHours(\"0\").withRate(\"0\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            .withDeductibles(\"0\").withFeedback(\"-NO FEEDBACK YET-\").build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "    public static final Person MICHAEL \u003d new PersonBuilder().withName(\"Michael Lam\").withPhone(\"92734819\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            .withEmail(\"michaellam@example.com\").withAddress(\"Farrer Road\").withRating(\"9\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            .withDepartment(\"Tech\").withManager(\"Michael Lam\").withSalary(\"0\").withHours(\"0\").withRate(\"0\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "valensia0711"
        },
        "content": "            .withDeductibles(\"0\").withFeedback(\"-NO FEEDBACK YET-\").build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "abtyx"
        },
        "content": "    public static final Person NINJA \u003d new PersonBuilder().withName(\"Ninja Warrior\").withPrivatePhone(\"92349234\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            .withPrivateEmail(\"ninja@example.com\").withPrivateAddress(\"Ninja Cave\").withRating(\"0\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            .withDepartment(\"Assasin\").withManager(\"Bruce Lee\").withSalary(\"0\").withHours(\"0\").withRate(\"0\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            .withDeductibles(\"0\").withFeedback(\"-NO FEEDBACK YET-\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withRating(\"0\")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            .withDepartment(VALID_DEPARTMENT_AMY).withManager(VALID_MANAGER_AMY)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withRating(\"0\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            .withDepartment(VALID_DEPARTMENT_BOB).withManager(VALID_MANAGER_BOB)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String KEYWORD_MATCHING_MOSES \u003d \"Moses\"; // A keyword that matches MOSES"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String KEYWORD_MATCHING_TECH \u003d \"Tech\"; // A keyword that matches TECH"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static final String KEYWORD_MATCHING_EMAIL \u003d \"benson@example.com\"; // A keyword that matches EMAIL"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Returns an {@code Ssenisub} with all the typical persons."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public static Ssenisub getTypicalSsenisub() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Ssenisub ab \u003d new Ssenisub();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "valensia0711": 17,
      "IamRENCE": 13,
      "NgeowXiuQi": 14,
      "abtyx": 5,
      "DanKhoo": 28,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * A GUI unit test class for Ssenisub."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.storage.XmlSerializableSsenisub;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final ObservableList\u003cPerson\u003e TYPICAL_PERSONS \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.observableList(getTypicalPersons());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanelHandle personListPanelHandle;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            Person expectedPerson \u003d TYPICAL_PERSONS.get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(expectedPerson, actualCard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle expectedPerson \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle selectedPerson \u003d personListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardEquals(expectedPerson, selectedPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code PersonListPanel} requires lesser than"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cPerson\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }, \"Creation and deletion of person cards exceeded time limit\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of persons containing {@code personCount} persons that is used to populate the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code PersonListPanel}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObservableList\u003cPerson\u003e createBackingList(int personCount) throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithPersons(personCount);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        XmlSerializableSsenisub xmlSsenisub \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                XmlUtil.getDataFromFile(xmlFile, XmlSerializableSsenisub.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return FXCollections.observableArrayList(xmlSsenisub.toModelType().getPersonList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a .xml file containing {@code personCount} persons. This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path createXmlFileWithPersons(int personCount) throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        builder.append(\"\u003cssenisub\u003e\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c personCount; i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cpersons\u003e\\n\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            builder.append(\"\u003cname\u003e\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            for (int n \u003d 0; n \u003c i; n++) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                builder.append(\"a\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            builder.append(\"a\u003c/name\u003e\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            builder.append(\"\u003cphone\u003e91239090\u003c/phone\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cemail\u003ea@aa\u003c/email\u003e\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003caddress\u003ea\u003c/address\u003e\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            builder.append(\"\u003crating\u003e0\u003c/rating\u003e\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            builder.append(\"\u003cdepartment\u003ea\u003c/department\u003e\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            builder.append(\"\u003cmanager\u003ea\u003c/manager\u003e\\n\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            builder.append(\"\u003csalary\u003e0\u003c/salary\u003e\\n\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            builder.append(\"\u003chours\u003e0\u003c/hours\u003e\\n\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            builder.append(\"\u003crate\u003e0\u003c/rate\u003e\\n\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            builder.append(\"\u003cdeductibles\u003e0\u003c/deductibles\u003e\\n\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            builder.append(\"\u003cfeedback\u003e-NO FEEDBACK YET-\u003c/feedback\u003e\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003c/persons\u003e\\n\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        builder.append(\"\u003c/ssenisub\u003e\\n\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Path manyPersonsFile \u003d TEST_DATA_FOLDER.resolve(\"manyPersons.xml\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(manyPersonsFile);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(manyPersonsFile, builder.toString());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        manyPersonsFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return manyPersonsFile;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes {@code personListPanelHandle} with a {@code PersonListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code PersonListPanel}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initUi(ObservableList\u003cPerson\u003e backingList) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonListPanel personListPanel \u003d new PersonListPanel(backingList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personListPanel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 8,
      "NgeowXiuQi": 4,
      "DanKhoo": 8,
      "-": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StaffPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.NINJA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertPanelDisplaysPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import guitests.guihandles.StaffPanelHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "public class StaffPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private PersonPanelSelectionChangedEvent selectionChangeEventStub;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private StaffPanel staffPanel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        selectionChangeEventStub \u003d new PersonPanelSelectionChangedEvent(ALICE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        guiRobot.interact(() -\u003e staffPanel \u003d new StaffPanel());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        uiPartRule.setUiPart(staffPanel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        postNow(selectionChangeEventStub);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertPanelDisplay(ALICE, staffPanel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        selectionChangeEventStub \u003d new PersonPanelSelectionChangedEvent(NINJA);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        guiRobot.interact(() -\u003e staffPanel \u003d new StaffPanel());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        uiPartRule.setUiPart(staffPanel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "abtyx"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        postNow(selectionChangeEventStub);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertPanelDisplay(NINJA, staffPanel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Asserts that {@code staffPanel} displays the details of {@code expectedPerson} correctly"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private void assertPanelDisplay(Person expectedPerson, StaffPanel staffPanel) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        StaffPanelHandle staffPanelHandle \u003d new StaffPanelHandle(staffPanel.getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertPanelDisplaysPerson(expectedPerson, staffPanelHandle);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "abtyx": 8,
      "DanKhoo": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.commons.events.model.SsenisubChangedEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.Ssenisub;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private static final SsenisubChangedEvent EVENT_STUB \u003d new SsenisubChangedEvent(new Ssenisub());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // after address book is updated"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(EVENT_STUB);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 3,
      "-": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import guitests.guihandles.StaffPanelHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertEquals(expectedCard.getDepartment(), actualCard.getDepartment());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertEquals(expectedPerson.getDepartment().value, actualCard.getDepartment());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Asserts that {@code actualPanel} displays the details of {@code expectedPerson}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public static void assertPanelDisplaysPerson(Person expectedPerson, StaffPanelHandle actualPanel) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertEquals(expectedPerson.getName().fullName, actualPanel.getName());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (expectedPerson.getPhone().isPrivate()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            assertEquals(\"Private\", actualPanel.getPhone());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            assertEquals(expectedPerson.getPhone().value, actualPanel.getPhone());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (expectedPerson.getEmail().isPrivate()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            assertEquals(\"Private\", actualPanel.getEmail());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            assertEquals(expectedPerson.getEmail().value, actualPanel.getEmail());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        if (expectedPerson.getAddress().isPrivate()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "abtyx"
        },
        "content": "            assertEquals(\"Private\", actualPanel.getAddress());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "            assertEquals(expectedPerson.getAddress().value, actualPanel.getAddress());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        double salary \u003d Double.valueOf(expectedPerson.getSalary().salary);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        double otPay \u003d Double.valueOf(expectedPerson.getOtHours().overTimeHour)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "            * Double.valueOf(expectedPerson.getOtRate().overTimeRate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        double deductibles \u003d Double.valueOf(expectedPerson.getDeductibles().payDeductibles);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        double expectedNetSalary \u003d salary + otPay - deductibles;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NgeowXiuQi"
        },
        "content": "        assertEquals(Double.toString(expectedNetSalary), actualPanel.getSalary());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertEquals(expectedPerson.getDepartment().value, actualPanel.getDepartment());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertEquals(expectedPerson.getManager().fullName, actualPanel.getManager());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertEquals(expectedPerson.getRating().value, actualPanel.getRating());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertEquals(expectedPerson.getFeedback().value, actualPanel.getFeedback());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.length; i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d personListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NgeowXiuQi": 6,
      "abtyx": 12,
      "DanKhoo": 17,
      "-": 70
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEPARTMENT_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEPARTMENT_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DEPARTMENT_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MANAGER_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MANAGER_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MANAGER_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "abtyx"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Manager;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class AddCommandSystemTest extends SsenisubSystemTest {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toAdd \u003d AMY;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + DEPARTMENT_DESC_AMY + \"  \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + MANAGER_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        ///* Case: add a person with all fields same as another person in SSENISUB except name -\u003e added */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //toAdd \u003d new PersonBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //        + DEPARTMENT_DESC_AMY + MANAGER_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        /* Case: add a person with all fields same as another person in SSENISUB except phone and email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + EMAIL_DESC_BOB + MANAGER_DESC_BOB + DEPARTMENT_DESC_BOB + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + DEPARTMENT_DESC_AMY"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + MANAGER_DESC_AMY;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + DEPARTMENT_DESC_AMY"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + MANAGER_DESC_AMY;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY + DEPARTMENT_DESC_AMY"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + MANAGER_DESC_AMY;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + DEPARTMENT_DESC_AMY"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + MANAGER_DESC_AMY;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: missing department -\u003e rejected */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + MANAGER_DESC_AMY;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: missing manager -\u003e rejected */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + MANAGER_DESC_AMY;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + DEPARTMENT_DESC_AMY + MANAGER_DESC_AMY;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + DEPARTMENT_DESC_AMY + MANAGER_DESC_AMY;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + DEPARTMENT_DESC_AMY + MANAGER_DESC_AMY;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + DEPARTMENT_DESC_AMY + MANAGER_DESC_AMY;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: invalid department -\u003e rejected */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + INVALID_DEPARTMENT_DESC + MANAGER_DESC_AMY;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandFailure(command, Department.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: invalid manager -\u003e rejected */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + DEPARTMENT_DESC_AMY + INVALID_MANAGER_DESC;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandFailure(command, Manager.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + DEPARTMENT_DESC_AMY + MANAGER_DESC_AMY + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * {@code SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @see SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * {@code SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @see SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 6,
      "abtyx": 6,
      "DanKhoo": 45,
      "-": 225
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class ClearCommandSystemTest extends SsenisubSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in person list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * {@code SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @see SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * {@code SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @see SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 5,
      "-": 96
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class DeleteCommandSystemTest extends SsenisubSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the last person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo deleting the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        removePerson(modelBeforeDeletingLast, lastPersonIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the middle person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middlePersonIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(middlePersonIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        int invalidIndex \u003d getModel().getSsenisub().getPersonList().size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(selectedIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                getModel().getSsenisub().getPersonList().size() + 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the removed person"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person removePerson(Model model, Index index) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Person targetPerson \u003d getPerson(model, index);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(targetPerson);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetPerson;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * {@code SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @see SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * {@code SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @see SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 7,
      "-": 180
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEPARTMENT_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DEPARTMENT_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DEPARTMENT_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MANAGER_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MANAGER_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MANAGER_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FEEDBACK;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "abtyx"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Department;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.person.Manager;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class EditCommandSystemTest extends SsenisubSystemTest {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + DEPARTMENT_DESC_BOB + \" \" + MANAGER_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo editing the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo editing the last person in the list -\u003e last person edited again */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(getModel().getSsenisub().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(getModel().getFilteredPersonList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PHONE_NUMBER);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        int invalidIndex \u003d getModel().getSsenisub().getPersonList().size();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //showAllPersons();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //selectPerson(index);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //        + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //        + ADDRESS_DESC_AMY + DEPARTMENT_DESC_AMY + MANAGER_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // browser\u0027s url is updated to reflect the new person\u0027s name"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        //assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        /* Case: editing rating -\u003e rejected */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 1 \" + PREFIX_RATING + \"5\","
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        /* Case: editing feedback -\u003e rejected */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 1 \" + PREFIX_FEEDBACK + \"Cool beans.\","
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                        + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                        + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                        + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                        + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: invalid department -\u003e rejected */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                        + INVALID_DEPARTMENT_DESC, Department.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: invalid manager -\u003e rejected */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                        + INVALID_MANAGER_DESC, Manager.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                        + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        executeCommand(PersonUtil.getAddCommand(AMY));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(PersonUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(getModel().getSsenisub().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PHONE_NUMBER);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PHONE_NUMBER);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different address -\u003e rejected */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + ADDRESS_DESC_AMY + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PHONE_NUMBER);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_EMAIL);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different email -\u003e rejected */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + MANAGER_DESC_BOB + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PHONE_NUMBER);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different department -\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        rejected */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + DEPARTMENT_DESC_AMY + MANAGER_DESC_BOB + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PHONE_NUMBER);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different manager -\u003e rejected */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + DEPARTMENT_DESC_BOB + MANAGER_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "abtyx"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PHONE_NUMBER);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedPerson, null);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * {@code SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @see SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * {@code SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @see SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 18,
      "abtyx": 19,
      "DanKhoo": 45,
      "-": 254
    }
  },
  {
    "path": "src/test/java/systemtests/ErrorDialogGuiTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postLater;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_STAGE_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.AlertDialogHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class ErrorDialogGuiTest extends SsenisubSystemTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException IO_EXCEPTION_STUB \u003d new IOException(\"Stub\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showErrorDialogs() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        postLater(new DataSavingExceptionEvent(IO_EXCEPTION_STUB));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.waitForEvent(() -\u003e guiRobot.isWindowShown(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        AlertDialogHandle alertDialog \u003d new AlertDialogHandle(guiRobot.getStage(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, alertDialog.getHeaderText());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE + \":\\n\" + IO_EXCEPTION_STUB.toString(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                alertDialog.getContentText());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/systemtests/FeedbackCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FEEDBACK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.logic.commands.FeedbackCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Feedback;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class FeedbackCommandSystemTest extends SsenisubSystemTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void feedback() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        /* -------------- Performing feedback operation while an unfiltered list is being shown ------------------- */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        /* Case: feedback field, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "         */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        String command \u003d \" \" + FeedbackCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                + PREFIX_FEEDBACK + \"wow u cool\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(ALICE).withFeedback(\"wow u cool\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        /* Case: undo editing the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        /* Case: redo editing the last person in the list -\u003e last person edited again */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        model.updatePerson("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        /* --------------- Performing feedback operation while a filtered list is being shown --------------------- */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        /* Case: filtered person list, feedback index within bounds of address book and person list -\u003e edited */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        command \u003d FeedbackCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + PREFIX_FEEDBACK"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                + \"you are superb!\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withFeedback(\"you are superb!\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        /* Case: filtered person list, feedback index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        int invalidIndex \u003d getModel().getSsenisub().getPersonList().size();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandFailure(FeedbackCommand.COMMAND_WORD + \"  \" + invalidIndex + \" \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                        + PREFIX_FEEDBACK + \"lame\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        /* ------------------------------ Performing invalid feedback operation ----------------------------------- */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandFailure(FeedbackCommand.COMMAND_WORD + \" 0 \" + PREFIX_FEEDBACK + \"haha\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, FeedbackCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandFailure(FeedbackCommand.COMMAND_WORD + \" -1 \" + PREFIX_FEEDBACK + \"haha\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, FeedbackCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandFailure(FeedbackCommand.COMMAND_WORD + \" \" + invalidIndex + \" \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                        + PREFIX_FEEDBACK + \"haha\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandFailure(FeedbackCommand.COMMAND_WORD + \" \" + PREFIX_FEEDBACK + \"haha\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, FeedbackCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        /* Case: missing feedback field -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandFailure(FeedbackCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, FeedbackCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        /* Case: feedback has profanity -\u003e rejected */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        String feedbackWithProfanity \u003d \"you are an asshole.\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandFailure(FeedbackCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                + \" \" + PREFIX_FEEDBACK + feedbackWithProfanity,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                String.format(Feedback.MESSAGE_PROFANITY_FOUND"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                        + new Feedback.ProfanityFilter().findProfanity(feedbackWithProfanity)));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @see FeedbackCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedPerson, null);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code FeedbackCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @see FeedbackCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.updatePerson(expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                String.format(FeedbackCommand.MESSAGE_FEEDBACK_PERSON_SUCCESS, editedPerson),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @see FeedbackCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * {@code SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @see SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * {@code SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @see SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 182
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class FindCommandSystemTest extends SsenisubSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: repeat previous find command where person list is displaying the persons we are finding"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertFalse(getModel().getSsenisub().getPersonList().contains(BENSON));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person not in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find phone number of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find address of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find email of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find tags of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find while a person is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in empty address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * {@code SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @see SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * {@code SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @see SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 6,
      "-": 189
    }
  },
  {
    "path": "src/test/java/systemtests/FindDepartmentCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_TECH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.logic.commands.FindDepartmentCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class FindDepartmentCommandSystemTest extends SsenisubSystemTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "         */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        String command \u003d \"   \" + FindDepartmentCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_TECH + \"   \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL, FIONA); // departments of Carl and Fiona are \"Tech\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: repeat previous find department command where person list is displaying the persons we are finding"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "         */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d FindDepartmentCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_TECH;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: find person where person list is not displaying the person we are finding -\u003e 2 person found */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d FindDepartmentCommand.COMMAND_WORD + \" Marketing\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, ELLE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords -\u003e 4 persons found */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d FindDepartmentCommand.COMMAND_WORD + \" Marketing Tech\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL, FIONA, BENSON, ELLE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 4 persons found */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d FindDepartmentCommand.COMMAND_WORD + \" Tech Marketing\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 4 persons found */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d FindDepartmentCommand.COMMAND_WORD + \" Tech Marketing Tech\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "         * -\u003e 4 persons found"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "         */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d FindDepartmentCommand.COMMAND_WORD + \" Tech Marketing NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: find person in address book, keyword is same as name but of different case -\u003e 2 person found */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d FindDepartmentCommand.COMMAND_WORD + \" TeCh\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL, FIONA);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: find person in address book, keyword is substring of department -\u003e 0 persons found */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d FindDepartmentCommand.COMMAND_WORD + \" Tec\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: find person in address book, department is substring of keyword -\u003e 0 persons found */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d FindDepartmentCommand.COMMAND_WORD + \" Techs\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: find department not in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d FindDepartmentCommand.COMMAND_WORD + \" Illegal\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: find phone number of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d FindDepartmentCommand.COMMAND_WORD + \" \" + FIONA.getPhone().value;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: find address of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d FindDepartmentCommand.COMMAND_WORD + \" \" + FIONA.getAddress().value;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: find email of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d FindDepartmentCommand.COMMAND_WORD + \" \" + FIONA.getEmail().value;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d \"FiNd-d Tech\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * {@code SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @see SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * {@code SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @see SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 5,
      "DanKhoo": 154
    }
  },
  {
    "path": "src/test/java/systemtests/FindEmailCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.logic.commands.FindEmailCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class FindEmailCommandSystemTest extends SsenisubSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "         * -\u003e 1 persons found"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "         */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        String command \u003d \"   \" + FindEmailCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_EMAIL + \"   \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON); // Email of Benson"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: repeat previous find email command where person list is displaying the persons we are finding"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "         * -\u003e 1 persons found"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "         */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d FindEmailCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_EMAIL;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: find person where person list is not displaying the person we are finding -\u003e 2 person found */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d FindEmailCommand.COMMAND_WORD + \" daniel@example.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d FindEmailCommand.COMMAND_WORD + \" daniel@example.com benson@example.com\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d FindEmailCommand.COMMAND_WORD + \" benson@example.com daniel@example.com\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d FindEmailCommand.COMMAND_WORD + \" benson@example.com daniel@example.com benson@example.com\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d FindEmailCommand.COMMAND_WORD + \" benson@example.com daniel@example.com NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d FindEmailCommand.COMMAND_WORD + \" beNSon@example.com\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: find person in address book, keyword is substring of email -\u003e 0 persons found */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d FindEmailCommand.COMMAND_WORD + \" benso@example.com\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: find person in address book, email is substring of keyword -\u003e 0 persons found */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d FindEmailCommand.COMMAND_WORD + \" bensonT@example.com\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: find email not in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d FindEmailCommand.COMMAND_WORD + \" Illegal\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: find phone number of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d FindEmailCommand.COMMAND_WORD + \" \" + BENSON.getPhone().value;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: find address of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d FindEmailCommand.COMMAND_WORD + \" \" + BENSON.getAddress().value;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d \"FiNd-e bensonT@example.com\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * {@code SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @see SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * {@code SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @see SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 5,
      "DanKhoo": 146
    }
  },
  {
    "path": "src/test/java/systemtests/FindManagerCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MOSES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.logic.commands.FindManagerCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class FindManagerCommandSystemTest extends SsenisubSystemTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "         * -\u003e 1 persons found"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        String command \u003d \"   \" + FindManagerCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MOSES + \"   \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL); // manager of Carl is \"Moses\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: repeat previous find manager command where person list is displaying the persons we are finding"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "         * -\u003e 1 persons found"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "         */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d FindManagerCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MOSES;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d FindManagerCommand.COMMAND_WORD + \" Marcus\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d FindManagerCommand.COMMAND_WORD + \" Marcus Moses\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, CARL);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d FindManagerCommand.COMMAND_WORD + \" Moses Marcus\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d FindManagerCommand.COMMAND_WORD + \" Moses Marcus Moses\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d FindManagerCommand.COMMAND_WORD + \" Moses Marcus NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: find person in address book, keyword is same as name but of different case -\u003e 2 person found */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d FindManagerCommand.COMMAND_WORD + \" MarcUs\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: find person in address book, keyword is substring of manager -\u003e 0 persons found */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d FindManagerCommand.COMMAND_WORD + \" Mar\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: find person in address book, manager is substring of keyword -\u003e 0 persons found */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d FindManagerCommand.COMMAND_WORD + \" Marcuss\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: find manager not in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d FindManagerCommand.COMMAND_WORD + \" Ravi\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: find phone number of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d FindManagerCommand.COMMAND_WORD + \" \" + BENSON.getPhone().value;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: find address of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d FindManagerCommand.COMMAND_WORD + \" \" + BENSON.getAddress().value;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: find email of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d FindManagerCommand.COMMAND_WORD + \" \" + BENSON.getEmail().value;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        command \u003d \"FiNd-m Marcus\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * {@code SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @see SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * {@code SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @see SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "DanKhoo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 5,
      "DanKhoo": 152
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class HelpCommandSystemTest extends SsenisubSystemTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 1,
      "-": 100
    }
  },
  {
    "path": "src/test/java/systemtests/RateCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.logic.commands.RateCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.person.Rating;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class RateCommandSystemTest extends SsenisubSystemTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void rate() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        /* ----------------- Performing rate operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        /* Case: rate field, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "         */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        String command \u003d \" \" + RateCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + PREFIX_RATING + \"1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(ALICE).withRating(\"1\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        /* Case: undo editing the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        /* Case: redo editing the last person in the list -\u003e last person edited again */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        model.updatePerson("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        /* ------------------ Performing rate operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        /* Case: filtered person list, rate index within bounds of address book and person list -\u003e edited */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        command \u003d RateCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + PREFIX_RATING + \"1\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withRating(\"1\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        /* Case: filtered person list, rate index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "         */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        int invalidIndex \u003d getModel().getSsenisub().getPersonList().size();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandFailure(RateCommand.COMMAND_WORD + \"  \" + invalidIndex + \" \" + PREFIX_RATING + \"1\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        /* --------------------------------- Performing invalid rate operation -------------------------------------- */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        /* Case: rate a person with new values same as existing values -\u003e rejected */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        command \u003d \" \" + RateCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + PREFIX_RATING + \"1\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandFailure(command,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                String.format(RateCommand.MESSAGE_RATING_UNCHANGED));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandFailure(RateCommand.COMMAND_WORD + \" 0 \" + PREFIX_RATING + \"5\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, RateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandFailure(RateCommand.COMMAND_WORD + \" -1 \" + PREFIX_RATING + \"5\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, RateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandFailure(RateCommand.COMMAND_WORD + \" \" + invalidIndex + \" \" + PREFIX_RATING + \"5\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandFailure(RateCommand.COMMAND_WORD + \" \" + PREFIX_RATING + \"5\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, RateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        /* Case: missing rating fields -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandFailure(RateCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, RateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        /* Case: invalid rating (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandFailure(RateCommand.COMMAND_WORD + \"  \" + index.getOneBased()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                        + \"  \" + PREFIX_RATING + \"-1\", Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        /* Case: invalid rating (11) -\u003e rejected */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandFailure(RateCommand.COMMAND_WORD + \"  \" + index.getOneBased()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                        + \"  \" + PREFIX_RATING + \"11\", Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @see RateCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedPerson, null);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code RateCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @see RateCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.updatePerson(expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                String.format(RateCommand.MESSAGE_RATING_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @see RateCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * {@code SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @see SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * {@code SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @see SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 182
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.Ssenisub;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class SampleDataTest extends SsenisubSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    protected Ssenisub getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public void ssenisub_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person[] expectedList \u003d SampleDataUtil.getSamplePersons();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 4,
      "-": 47
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public class SelectCommandSystemTest extends SsenisubSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the last card in the person list -\u003e selected */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Index personCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the middle card in the person list -\u003e selected */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        int invalidIndex \u003d getModel().getSsenisub().getPersonList().size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select from empty address book -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * {@code SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @see SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * {@code SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * @see SsenisubSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 6,
      "-": 141
    }
  },
  {
    "path": "src/test/java/systemtests/SsenisubSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.Ssenisub;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": " * A system test class for Ssenisub, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "public abstract class SsenisubSystemTest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    protected Ssenisub getInitialData() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        return TypicalPersons.getTypicalSsenisub();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Displays all persons in SSENISUB."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertEquals(getModel().getSsenisub().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getSsenisub().getPersonList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "     * Deletes all persons in SSENISUB."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertEquals(0, getModel().getSsenisub().getPersonList().size());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "        assertEquals(new Ssenisub(expectedModel.getSsenisub()), testApp.readStorageSsenisub());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * of the previously selected person."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 11,
      "-": 243
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "import seedu.address.model.ReadOnlySsenisub;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlySsenisub\u003e ssenisub, Path saveFileLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "IamRENCE"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(ssenisub, saveFileLocation));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "IamRENCE": 3,
      "-": 71
    }
  }
]
