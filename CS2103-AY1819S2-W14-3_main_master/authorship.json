[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d Battleship"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S2-W14-3/main[image:https://travis-ci.org/CS2103-AY1819S2-W14-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "https://github.com/CS2103-AY1819S2-W14-3/main[image:https://travis-ci.org/CS2103-AY1819S2-W14-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S2-W14-3/main[image:https://coveralls.io/repos/github/CS2103-AY1819S2-W14-3/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "ifdef::sdsdds[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/damithc/addressbook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level4/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* This is a desktop Battleship application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* One can play the classic Battleship game against the computer on this app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* This application is designed for people who want to play Battleship but prefer to use the command-line or are otherwise unable to operate a GUI."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "** This project is written in an OOP style."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "** This project supports _Build Automation_ using Gradle and _Continuous Integration_ using Travis CI."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* This application is a fork of https://github.com/nus-cs2103-AY1819S2/[addressbook-level4] by"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": "the se-edu team."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 5,
      "iwle": 4,
      "bos10": 1,
      "s-tr": 6,
      "-": 26
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"githubId\": \"bos10\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"displayName\": \"CHE...TON\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"authorNames\": [\"bos10\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"githubId\": \"s-tr\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"displayName\": \"CHO...WEI\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"authorNames\": [\"s-tr\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"githubId\": \"iwle\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"displayName\": \"IAN... EN\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"authorNames\": [\"iwle\", \"Ian Wu\", \"iwle@u.nus.edu\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"githubId\": \"lucydotc\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"displayName\": \"LUC...YAN\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"authorNames\": [\"lucydotc\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"githubId\": \"erjillsison\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"displayName\": \"SIS...NES\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "      \"authorNames\": [\"erjillsison\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 30
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    archiveName \u003d \u0027battleship.jar\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        \u0027site-name\u0027: \u0027Battleship\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S2-W14-3/main\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 3,
      "-": 234
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "Battleship was developed by Team W14-G3. We are a team from Singapore developing retro games for the world. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "We are based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d Boston Cheong"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "image::bos10.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bos10"
        },
        "content": "{empty}[https://github.com/bos10[github]] [\u003c\u003cbos10#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Responsibility: Statistics management feature"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d Erjill Sison"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "image::erjillsison.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "{empty}[http://github.com/erjillsison[github]] [\u003c\u003cerjillsison#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Responsibilities: Map management feature"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d Esther Chong"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "image::s-tr.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "{empty}[http://github.com/s-tr[github]] [\u003c\u003cs-tr#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Responsibilities: Battle management feature"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d Ian Wu"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "image::iwle.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "{empty}[http://github.com/iwle[github]] [\u003c\u003ciwle#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Responsibilities: Ship management feature"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d Lucy Chan"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "image::lucydotc.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "{empty}[http://github.com/lucydotc[github]] [\u003c\u003clucydotc#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Responsibilities: Computer Enemy management feature"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 11,
      "iwle": 10,
      "lucydotc": 2,
      "bos10": 1,
      "-": 32
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103-AY1819S2-W14-3/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "* *Email us* : You can also reach us at `battleshipdevelopers [at] gmail.com`"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "iwle": 1,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d Battleship - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": ":toclevels: 4"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": ":sectnumlevels: 4"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S2-W14-3/main/tree/master"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bos10"
        },
        "content": "By: `Team W14-3`      Since: `Jan 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d Setup"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "To set up the project, the following must be installed on your machine:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d Configuring the project writing code"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "s-tr"
        },
        "content": "After forking the repo, the documentation will still have the Battleships branding and refer to the `CS2103-AY1819S2-W14-3/main` repo."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "s-tr"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `CS2103-AY1819S2-W14-3/main`), you should do the following:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `attack a1`."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "s-tr"
        },
        "content": ".Component interactions for `attack a1` command"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "image::HighLevelAttackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `Map`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "s-tr"
        },
        "content": ".  `Logic` uses the `BattleshipParser` class to parse the user command."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "s-tr"
        },
        "content": ".  The command execution can affect the `Model` (e.g. putting a ship)."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iwle"
        },
        "content": "// tag::model[]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iwle"
        },
        "content": "// end::model[]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iwle"
        },
        "content": "// tag::model2[]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "s-tr"
        },
        "content": "The `Model` component,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* stores a `PlayerStatistics` object that represents the user\u0027s statistics."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iwle"
        },
        "content": "* manages the players, maps and ships in the game"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iwle"
        },
        "content": "// end::model2[]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "bos10"
        },
        "content": "// tag::storage[]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "bos10"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "bos10"
        },
        "content": "* can save `PlayerStatistics` objects in json format and read it back."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "bos10"
        },
        "content": "//end::storage[]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "s-tr"
        },
        "content": "// tag::battle[]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "s-tr"
        },
        "content": "[[Design-Battle]]"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d Battle component"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "s-tr"
        },
        "content": ".Structure of the `Battle` Component and interactions with `Model` and `Logic`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "s-tr"
        },
        "content": "image::BattleClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "s-tr"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/logic/battle/Battle.java[`Battle.java`]"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "s-tr"
        },
        "content": "// end::battle[]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "s-tr"
        },
        "content": "The `Battle` component:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* keeps track of the progress of the battle,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* restricts the computer to place its ships at the correct time,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* allows the user and the computer enemy to attack each other and maintain proper turn-taking while doing so."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "s-tr"
        },
        "content": "As the battle involves many different components (map, player, etc.),"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "s-tr"
        },
        "content": "this component cannot be reduced to just one interface class of `Battle`."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Classes used by multiple components are in the `seedu.address.commons` package."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "// tag::map[]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d Map feature"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "The map feature handles the interactions of the game in the map level. The map feature does the following:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* Initialise both players\u0027 maps."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iwle"
        },
        "content": "* Allow placing of ships in the cells."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* Allow attacking of cells."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation of map initialisation"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "The map feature is facilitated by `MapGrid` and `Cell`."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "The map grid is stored internally in `MapGrid` as a 2D array of `Cell` objects."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "`MapGrid` implements the following method to initialise the map:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* `MapGrid#initialise(Cell[][] map)` -- initialises the map using the given `Cell` 2D array."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Below is the code snippet for the `initialise` method. `cellGrid` is the internal 2D array comprising of `Cell` objects. +"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "The method `copy2dArray` copies the `map` parameter passed in to the internal `cellGrid`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "----"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "include::../src/main/java/seedu/address/model/MapGrid.java[lines\u003d39..46]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "----"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Below is the code snippet for the `copy2dArray` method. The `copy2dArray` method creates a new `Cell` object for each of the input `Cell` objects."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "The copying is done using a constructor in `Cell` that takes in a parameter `Cell`."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "This constructor copies the private attributes of the given `Cell` parameter."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "----"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "include::../src/main/java/seedu/address/model/MapGrid.java[lines\u003d99..105]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "----"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "The following sequence diagram shows what happens when the \"initialise map\" command is used.:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ".Sequence diagram of initialising the maps"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "image::InitialiseMapCommandSequenceDiagram.png[width\u003d800]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "The following activity diagram shows when the \"initialise map\" command can be used by the user:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ".Activity diagram displaying when the user can initialise the maps"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "image::InitActivityDiagram.png[width\u003d800]"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation of the `Cell` class"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "The cells are the lowest-level feature of the game and is represented by the `Cell` class. Each `Cell` allows one ship to be placed on it but the same ship can be referenced from multiple `Cell` objects. `Cell` also allows receiving of an attack and will propagate the attack call to the `Battleship` in it. To support the above, the following methods are available:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "iwle"
        },
        "content": "* `void putShip(Battleship ship)` - places a ship in the `Cell`."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* `boolean receiveAttack()` - receives an attack and returns true if it\u0027s a hit, false otherwise."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Also, each `Cell` has a `Status` attribute which is an `enum` of the following:"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "[cols\u003d\"1,3\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "| Status | Description"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "| HIDDEN | This cell has not been hit."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "| EMPTY | This cell is empty and has not been hit."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "| EMPTYHIT | This cell has been hit before, and is empty."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "| SHIP | This cell has a ship in it."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "| SHIPHIT | This cell has been hit before, and there is a damaged ship here."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "| DESTROYED | This cell has been hit before, and the ship here has been destroyed."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "The `Status` of a `Cell` can be checked through the following method:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* `Status getStatus()` - returns the `Status` of the `Cell`."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "The `Status` is used by several higher level functionality such as:"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* the UI to know what colour should a `Cell` be displayed as."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* placing ships to check whether a ship has already been placed."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How the maps are initialised"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* **Alternative 1 (current choice):** `MapGrid` will have an initialise method that takes in a 2D array of `Cell` objects."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "The initialise method in `MapGrid` will then do a deep copy of the passed in 2D array to initialise the internal 2D array of `Cell`."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Pros: The underlying 2D array in `MapGrid` is better protected from modification as it can only be modified through the initialise method."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Cons: Might have more overhead due to deep copying."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* **Alternative 2:** `MapGrid` will have a getter method that returns the 2D array of `Cell`."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "`InitialiseMapCommand` will then use this method to get the internal 2D array and populate it from outside of the `MapGrid` class."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Cons: The 2D array within `MapGrid` is unprotected and open for modification."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Alternative 1 was chosen as the overhead is negligible and a defensive approach to the design is preferable."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the map"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* **Alternative 1 (current choice):** 2D array of `Cell` objects."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Pros: Resulting code is simple and readable."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Cons: More changes to be done from the original AB4 codebase."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* **Alternative 2:** List of lists of `Cell` objects."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Pros: Easier to implement from the original AB4 codebase."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Cons: Worse readability and more complicated compared to using a 2D array."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Alternative 1 was chosen because of good code readability and it being the simpler implementation."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Good code readability is important for new developers taking on the project."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Simpler implementation means the likelihood of bugs being introduced is less when changes are made."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "// end::map[]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "iwle"
        },
        "content": "// tag::putShip1[]"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d Ship Management feature"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "iwle"
        },
        "content": "The Ship Management feature is named as such to avoid confusion with the main title of the game, Battleship. In this section, the words \"battleship\" and \"ship\" are used interchangeably. The capitalised word `Battleship` in monospace font is used to refer to the Java class."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "iwle"
        },
        "content": "The ship management feature handles the following:"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "iwle"
        },
        "content": "* Putting ships on the map grid and ensuring that ships are placed in valid areas on the map grid."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "iwle"
        },
        "content": "* Keeping track of the status of ships in the player."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "iwle"
        },
        "content": "We can see the use case scenarios in the diagram below."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "iwle"
        },
        "content": "// end::putShip1[]"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "iwle"
        },
        "content": ".Use case diagram for Ship Management"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "iwle"
        },
        "content": "image::ShipManagementUseCaseDiagram.png[]"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "iwle"
        },
        "content": "// tag::putShip2[]"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "iwle"
        },
        "content": "`Battleship` is a class representing a ship that can be placed on the map grid. A `FleetEntry` class is internally used to store the `Battleship` in a player\u0027s `Fleet`. `FleetEntry` is a nested class within `Fleet` that contains a `Battleship`, its head `Coordinates` and its `Orientation` on the map grid."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "iwle"
        },
        "content": "The length of the ship varies depending on the type of ship. The user can tag a ship using a `t/[TAG]` parameter in the `put` command. Tagging a ship is optional. +"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "iwle"
        },
        "content": "There are three types of ships and the number of each ship depends on the size of the map. The relationship between map size and the number of each ship is illustrated in the table below."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "iwle"
        },
        "content": "[width\u003d\"100%\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "iwle"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "iwle"
        },
        "content": "|Type of Ship   |Length |Number"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "iwle"
        },
        "content": "|Cruiser        |2      |`mapSize - 5`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "iwle"
        },
        "content": "|Destroyer      |3      |`(mapSize + 2) / 5`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "iwle"
        },
        "content": "|Aircraft carrier |5    |`1`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "iwle"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "iwle"
        },
        "content": "The management of ships can be carried out with three commands, namely `put`, `listTags` and `list`."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Putting ships"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "iwle"
        },
        "content": "The `put` command puts a ship on the map grid, specified by the __head coordinates__."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "iwle"
        },
        "content": "// end::putShip2[]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "iwle"
        },
        "content": "// tag::putShipHeadCoordinates[]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "iwle"
        },
        "content": "*__What are the head coordinates?__*"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "iwle"
        },
        "content": "The head coordinates are the coordinates of the top-most and left-most cell of a ship. When coordinates are specified in the `put` command, they refer to the head coordinates of the ship."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "iwle"
        },
        "content": "image:BattleshipHeadExample.png[width\u003d800]"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "iwle"
        },
        "content": "// end::putShipHeadCoordinates[]"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "iwle"
        },
        "content": "// tag::putShip3[]"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "iwle"
        },
        "content": "The following operations are called when the `put` command is called."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "iwle"
        },
        "content": "* `performChecks()` - Performs checks to ensure that the ship can be put on the map."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "iwle"
        },
        "content": "* `putShip()` - Puts the ship into the cell."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "iwle"
        },
        "content": "The boundary checks are essential to the functionality of both the human and computer player. This is because `BoundaryValueChecker` is used by the human player in the `put` command and when the computer player deploying its own ships after the human player\u0027s turn has ended. `BoundaryValueChecker` relies on four separate methods to perform its checks. They are:"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. `isHeadWithinBounds()` - Checks if the head coordinates falls within the map grid."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. `isBodyWithinBounds()` - Checks if the body of the ship falls within the map grid."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. `isBattleshipAbsent()` - Checks if there are no other ships that are situated on the head coordinates."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. `isClear()` - Checks if there are no other ships that situated along the body of the ship."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "iwle"
        },
        "content": "These methods check the horizontal and vertical boundaries when a ship is being deployed. They distinguish between the head and body of a ship in order to provide more specific feedback for the user. For the methods `isBattleshipAbsent()` and `isClear()`, `BoundaryValueChecker` calls the `getCellStatus()` method of the `mapGrid` object to obtain the status of `Cell` for checks."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "iwle"
        },
        "content": "Once `BoundaryValueChecker` has finished its checks and there are no exceptions thrown, the `put` command proceeds to call the `putShip()` method of the `mapGrid` object to put the ship on the map grid. It then updates the `Fleet` in the human player. The following sequence diagram shows what happens when the `put` command is called."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "iwle"
        },
        "content": "// end::putShip3[]"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "iwle"
        },
        "content": ".Sequence diagram of putting a ship on the map."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "iwle"
        },
        "content": "image::PutShipSequenceDiagram.png[width\u003d800, align\u003d\"center\"]"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "iwle"
        },
        "content": "// tag::listTags[]"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Listing tags"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "iwle"
        },
        "content": "Ships can be tagged. You can list all the tags used by ships that have been deployed on the map grid with the `listTags` command. The command uses the `getAllTags()` method of the `Fleet` class. The code snippet below shows the operation of the `getAllTags()` method. The method returns a list of all the unique tags present in the player\u0027s fleet of deployed ships."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "iwle"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "iwle"
        },
        "content": "----"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "iwle"
        },
        "content": "include::../src/main/java/seedu/address/model/player/Fleet.java[lines\u003d204..209]"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "iwle"
        },
        "content": "----"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "iwle"
        },
        "content": "// end::listTags[]"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "iwle"
        },
        "content": "// tag::listShips[]"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Listing ships"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "iwle"
        },
        "content": "Ships that have been deployed can also be listed in four different ways:"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "iwle"
        },
        "content": ". List all ships: `list`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "iwle"
        },
        "content": ". List ships with certain tags: `list t/t1 t/t2`"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "iwle"
        },
        "content": ". List certain ships: `list n/destroyer n/cruiser`"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "iwle"
        },
        "content": ". List certain ships with certain tags: `list n/destroyer n/cruiser t/t1 t/t2`"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "iwle"
        },
        "content": "The set of unique tags and the set of unique names are presented to the `ListCommand` as an `Optional` class. This is because both sets may be empty. In such cases, instead of redudantly checking whether each `fleetEntry` contains the ship and an empty set, `ListCommand` simply returns the entire fleet."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "iwle"
        },
        "content": "The `list` command can list certain ships with certain tags by filtering the list of deployed ships. The following sequence diagram shows how deployed ships are listed when the `list` command is entered into the command line."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "iwle"
        },
        "content": "// end::listShips[]"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "iwle"
        },
        "content": ".Sequence diagram of listing ships deployed on the map."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "iwle"
        },
        "content": "image::ListShipSequenceDiagram.png[ align\u003d\"center\"]"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "iwle"
        },
        "content": "// tag::ship_activity[]"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d\u003d Activity Diagram"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "iwle"
        },
        "content": "Ship management functions throughout the entirety of the game. As there are multiple states during the game, it is beneficial to visualise the operations of the `put`, `listTags` and `list` commands with respect to the different game states. The activity diagram below illustrates these operations."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "iwle"
        },
        "content": "// end::ship_activity[]"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "iwle"
        },
        "content": ".Activity diagram of ship management throughout the game."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "iwle"
        },
        "content": "image::ShipManagementActivityDiagram.png[height\u003d400, align\u003d\"center\"]"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "iwle"
        },
        "content": "// tag::ship_aspect_1[]"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How a ship is placed on the map"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "iwle"
        },
        "content": "* **Current choice:** +"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "iwle"
        },
        "content": " The same `Battleship` object is put in multiple cells. Each cell contains a reference to the same `Battleship` object. When a ship on the `Cell` needs to be modified, the `Battleship` attribute in the `Cell` is accessed."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "iwle"
        },
        "content": "** Pros: This allows any cell that is hit to access the same `Battleship` object without having to separately find the `Battleship` object."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "iwle"
        },
        "content": "** Cons: Difficult to keep track of each `Battleship` position."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "iwle"
        },
        "content": "* **Alternative:** +"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "iwle"
        },
        "content": "Two separate `Battleship` and `BattleshipPart` objects are used. The `BattleshipPart` object represents the body of the `Battleship` and contains an attribute that points to the `Battleship`. When a battleship on the `Cell` needs to be modified, the `BattleshipPart` is accessed, which then accesses the main `Battleship` object."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "iwle"
        },
        "content": "** Pros: Clearer separation between the body of the ship and the ship itself."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "iwle"
        },
        "content": "** Cons: Difficult to handle hits on the cell."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "iwle"
        },
        "content": "// end::ship_aspect_1[]"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "iwle"
        },
        "content": "// tag::ship_aspect_2[]"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How a ship is stored in each player\u0027s fleet"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "iwle"
        },
        "content": "* **Current choice:** +"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "iwle"
        },
        "content": "An `ArrayList` of `FleetEntry` objects is used for storage, where `FleetEntry` contains a reference to the `Battleship`, its `Orientation` and `Coordinates` of the head coordinates. The `FleetEntry` class is a nested class in `Fleet`. Whenever a `Fleet` method is called, it accesses the `ArrayList` of `FleetEntry` to obtain information about the `Battleship` and its position on the `MapGrid`."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "iwle"
        },
        "content": "** Pros: Can identify `Battleship` by position."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "iwle"
        },
        "content": "** Cons: Harder to implement, as a nested class has to be implemented from scratch, compared to using an `ArrayList`."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "iwle"
        },
        "content": "* **Alternative:** `ArrayList` of `Battleship`."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "iwle"
        },
        "content": "** Pros: Easier to implement and provides a cleaner design."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "iwle"
        },
        "content": "** Cons: Harder check position of `Battleship` on the map grid. In order to do so, a separate data structure must be created to store the coordinates and orientation of the ship. This data structure then has to be aligned with the original `ArrayList` that stores the ships."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "iwle"
        },
        "content": "// end::ship_aspect_2[]"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "s-tr"
        },
        "content": "// tag::battle_aspect_1[]"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d Battle feature"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "s-tr"
        },
        "content": "The Battle feature handles the following:"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* keeping track of the stage of the battle, and ensuring that the player does not"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  enter a command in the wrong stage of the game,"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* allowing the computer to place its ships at the correct time,"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* allowing the user and the computer enemy to attack each other and maintain proper turn-taking while doing so."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "s-tr"
        },
        "content": "The Battle feature is split between several packages:"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  * `seedu.address.battle`: the main `Battle` class is implemented here."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  * `seedu.address.battle.state`: the `BattleState` class is implemented here, and"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    can be stored and retrieved via `Model`."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  * `seedu.address.battle.result`: the attack result classes are implemented here."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    These classes are returned by `Battle#humanPerformAttack(Coordinates)` and"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    `Battle#takeComputerTurn()`."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  * `BeginCommand` and `AttackCommand` handle the player\u0027s interaction"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    with this component."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "s-tr"
        },
        "content": "In the following sections, we will explain the workings of each of these"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "s-tr"
        },
        "content": "different packages."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation of battle state"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "s-tr"
        },
        "content": ".State diagram of the application"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "s-tr"
        },
        "content": "image::BattleStateDiagram.png[width\u003d800]"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "s-tr"
        },
        "content": "In this program, there are certain commands that may only be executed at"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "s-tr"
        },
        "content": "specific phases of the game (e.g. `attack` must only be used when battling,"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "s-tr"
        },
        "content": "not while placing ships). To implement this, the battle state must be tracked."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "s-tr"
        },
        "content": "The battle state is implemented as a `BattleState` enumeration, and stored"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "s-tr"
        },
        "content": "within the `Model`. When `LogicManager` executes a `Command` object, it checks"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "s-tr"
        },
        "content": "whether that command is allowed to be executed in the current state using"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "s-tr"
        },
        "content": "`Command#canExecuteIn(BattleState)`. Only if the command is allowed to execute"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "s-tr"
        },
        "content": "does `LogicManager` then call `Command#execute` - if it is not, then execution"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "s-tr"
        },
        "content": "is prevented and the user is notified."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "s-tr"
        },
        "content": "In addition, certain commands may change the battle state - for example, `start`"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "s-tr"
        },
        "content": "changes the battle state from `PLAYER_PUT_SHIP` to `ENEMY_PUT_SHIP` then finally"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "s-tr"
        },
        "content": "to `PLAYER_ATTACK`."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation of the `BattleManager` class"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "s-tr"
        },
        "content": "// end::battle_aspect_1[]"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "s-tr"
        },
        "content": "The `BattleManager` class contains four important methods, detailed as follows."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d `void startGame()`"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "s-tr"
        },
        "content": ".Sequence diagram of the `startGame` method"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "s-tr"
        },
        "content": "image::StartGameSequenceDiagram.png[width\u003d600]"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "s-tr"
        },
        "content": "`startGame` is called when the player begins the battle (via `BeginCommand`,"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "s-tr"
        },
        "content": "see next section for more details)."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "s-tr"
        },
        "content": "`startGame` prepares the `Enemy` for battle by calling `Enemy#prepEnemy`,"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "s-tr"
        },
        "content": "which causes the enemy to place its ships and set up other data structures."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "s-tr"
        },
        "content": "For more information, please see the \"Enemy AI Feature\" section below."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d `AttackResult performAttack(Player, Player, Coordinates)`"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "s-tr"
        },
        "content": ".Sequence diagram of the `performAttack` method"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "s-tr"
        },
        "content": "image::PerformAttackSequenceDiagram.png[width\u003d800]"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "s-tr"
        },
        "content": "`performAttack` is the method that actually performs the attack from one"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "s-tr"
        },
        "content": "player to another. It takes in an attacker `Player`, a target `Player` and"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "s-tr"
        },
        "content": "the attacked `Coordinates`, and returns an `AttackResult`. (See section"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "s-tr"
        },
        "content": "3.3.3 for the description of what `AttackResult` is returned in what scenario.)"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "s-tr"
        },
        "content": "This method is an internal method, used by both `humanPerformAttack` and"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "s-tr"
        },
        "content": "`takeComputerTurn`."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d `AttackResult humanPerformAttack(Coordinates)`"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "s-tr"
        },
        "content": ".Sequence diagram of the `humanPerformAttack` method"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "s-tr"
        },
        "content": "image::HumanPerformAttackSequenceDiagram.png[width\u003d300]"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "s-tr"
        },
        "content": "`humanPerformAttack` is called when the player makes an attack (via"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "s-tr"
        },
        "content": "`AttackCommand`, see below.)"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "s-tr"
        },
        "content": "This method simply calls `performAttack` with the human player as the"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "s-tr"
        },
        "content": "attacker, the computer player as the target and the argument coordinate"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "s-tr"
        },
        "content": "as the attacked coordinate."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "s-tr"
        },
        "content": "// tag::battle_aspect_2[]"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d `List\u003cAttackResult\u003e takeComputerTurn()`"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "s-tr"
        },
        "content": ".Sequence diagram of the `takeComputerTurn` method"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "s-tr"
        },
        "content": "image::TakeComputerTurnSequenceDiagram.png[width\u003d800]"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "s-tr"
        },
        "content": "`takeComputerTurn` is called after the player makes an attack but misses"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "s-tr"
        },
        "content": "(via `AttackCommand`, see below). As mentioned in the game rules, after"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "s-tr"
        },
        "content": "the player misses the computer may begin to attack until it misses, and"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "s-tr"
        },
        "content": "this method implements that functionality."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation of attack result"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "s-tr"
        },
        "content": "The representation of the result of an attack is the class `AttackResult` and"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "s-tr"
        },
        "content": "its subclasses. To help the receiver in deciphering the attack result without"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "s-tr"
        },
        "content": "needing to resort to `instanceof`, methods are provided to test for attributes"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "s-tr"
        },
        "content": "such as whether the attack is a hit."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "s-tr"
        },
        "content": "The methods are:"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    * `isSuccessful`: tests whether the attack actually completed"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    * `isHit`: tests whether the attack damaged a ship"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    * `isDestroy`: tests whether the attack destroyed the ship"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    * `isWin`: tests whether the attack caused the attacker to win"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "s-tr"
        },
        "content": "A summary of each type of `AttackResult` can be seen from the following table:"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "s-tr"
        },
        "content": "[width\u003d\"88%\",cols\u003d\"22%,66%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "s-tr"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "s-tr"
        },
        "content": "|Result type          |Scenario"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "s-tr"
        },
        "content": "|`AttackFailed`       |The `Coordinates` provided was out of bounds, or"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                       some error occurred during the attack."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "s-tr"
        },
        "content": "|`AttackMissed`       |The attack did not hit an enemy ship."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "s-tr"
        },
        "content": "|`AttackHit`          |The attack hit an enemy ship but did not sink it."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "s-tr"
        },
        "content": "|`AttackDestroyedShip`|The attack hit an enemy ship and sank it,"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                       but the enemy still has ships remaining."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "s-tr"
        },
        "content": "|`AttackDefeatedEnemy`|The attack hit the last of the enemy\u0027s ships and sank"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                       it, resulting in a victory for the attacker."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "s-tr"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation of player interaction via commands"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "s-tr"
        },
        "content": ".Use case diagram of the `Battle` Component."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "s-tr"
        },
        "content": "image::BattleUseCaseDiagram.png[width\u003d800]"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "s-tr"
        },
        "content": ".Activity diagram of the process of battling."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "s-tr"
        },
        "content": "image::BattleActivityDiagram.png[width\u003d800]"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "s-tr"
        },
        "content": "The upper diagram is a use case diagram which shows briefly the possible"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "s-tr"
        },
        "content": "interactions between the user and the application during the battling phase."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Below is a more detailed activity diagram of what happens when the"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "s-tr"
        },
        "content": "user does battle against the computer enemy. As shown, the player"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "s-tr"
        },
        "content": "does battle by using the `begin` command to initiate the battle,"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "s-tr"
        },
        "content": "then the `attack` command to attack the enemy."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "s-tr"
        },
        "content": "The following sequence diagrams show what happens when the user enters"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "s-tr"
        },
        "content": "the `begin` command, then the `attack a1` command."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "s-tr"
        },
        "content": ".Sequence diagram of `begin`."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "s-tr"
        },
        "content": "image::BeginSequenceDiagram.png[width\u003d800]"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "s-tr"
        },
        "content": ".Sequence diagram of `attack a1`."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "s-tr"
        },
        "content": "image::AttackSequenceDiagram.png[width\u003d800]"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* **Current choice:** +"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  `BattleManager` is stored under `Model`. Every time `Attack` or `Begin` commands"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  are executed, they will use this `BattleManager` to actually perform the actions,"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  with the logic in the `Command`-s mostly being error handling. +"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  When AI performs attacks, the `BattleManager` will call the AI to compute its attack"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  and return it, then call an internal method to actually perform the attack."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "s-tr"
        },
        "content": "*** Command logic is abstracted into places where it can be reused by the AI."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "s-tr"
        },
        "content": "*** Flow of program is clear - it always is a higher level component calling a lower-level component. +"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    (e.g. when the player types in an Attack command, user interacts with `UI`, which calls `Logic`,"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    which calls `Model` and `BattleManager`,"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    which call the lowest level classes `Map` and `Player`)"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "s-tr"
        },
        "content": "*** The `Model` component now contains game logic (`BattleManager`) within it."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* **Alternative** +"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  `BattleManager` is stored under `Logic`. Every time `Attack` or `Begin` commands"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  are executed, they will perform the action using the logic coded within themselves, not"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  interfacing with `BattleManager`. +"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  When AI performs attacks, the `BattleManager` will create these commands and execute them."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  In the `Model`, the current attacking player is kept track of, allowing the commands to be"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  used for both a human and AI player."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "s-tr"
        },
        "content": "*** The game\u0027s model and logic are kept separate from each other."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "s-tr"
        },
        "content": "*** `AttackCommand` is now state-dependent (the state being the current attacking player) which"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    can more easily lead to bugs and race conditions."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "s-tr"
        },
        "content": "+"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "s-tr"
        },
        "content": "In the end, we decided to implement Option 1. Even though some team members preferred either option,"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "s-tr"
        },
        "content": "we decided that `Logic` and `Model` not being kept separate was a worthy tradeoff"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "s-tr"
        },
        "content": "for the advantages of Option 1."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "s-tr"
        },
        "content": "// end::battle_aspect_2[]"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d Enemy AI feature"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "s-tr"
        },
        "content": "The enemy player serves as a computerised opponent for this single-player game."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "// tag::enemyCurrentImplementation[]"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "The Enemy AI feature is currently implemented as an extension of the Player class,"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "and serves as the opponent player since `Battleship` is a single-player game."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "The Enemy AI can automatically perform initialising actions similar to the human player."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "Mainly, the Enemy AI can randomly initialise its own mapGrid with randomly generated ships,"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "which is invoked by the command `start game`."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "We can see these scenarios here:"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ".Use Case Diagram for Enemy Deploying Ships"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "image::EnemyDeployingUseCaseDiagram.png[width\u003d600]"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "The Enemy AI also supports the ability for the enemy to automatically and intelligently shoot"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "the player\u0027s map when the player ends their turn, encapsulated by these scenarios:"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ".Use Case Diagram for Enemy Shooting"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "image::EnemyShootingUseCaseDiagram.png[width\u003d600]"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "Note that the Enemy AI feature does not contain any explicit commands to be"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "entered by the Player. Its methods are called by other features instead, and does its"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "magic in the background."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "// end::enemyCurrentImplementation[]"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "// tag::enemyInitialiseMap[]"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d\u003d Initialisation of Enemy MapGrid"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "The Enemy AI has the method `populateMapGrid()` which is called by the method `prepEnemy()`,"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "which is in turn called by the Battle Manager when the Player enters the command `start game`."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ".Sequence Diagram for prepEnemy()"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "image::PrepEnemySequenceDiagram.png[width\u003d800]"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "It can be seen from the above sequence diagram that `populateMapGrid()` goes on to call the methods"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "`placeAirCraftCarrier()` and `placeMultipleDestroyerAndCruiser()`."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "`placeAirCraftCarrier()` is called once, and places only one `Aircraft Carrier` onto the map, since the game rules state that"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "no matter the map size, every game will only feature a single `Aircraft Carrier`."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "On the other hand, `placeMultipleDestroyerAndCruiser()` is called twice consecutively. The first call takes in the parameters required"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "to put as many `Destroyers` as available onto the enemy map, while the second call will do so for `Cruisers`."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "The reason why `placeMultipleDestroyerAndCruiser()` is called twice is because the implementation to place `Destroyers` and `Cruisers`"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "are identical, but we still want to keep their placement separate for better abstraction and easier testing."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "The following two sequence diagrams illustrate how `placeAirCraftCarrier()` and `placeMultipleDestroyerAndCruiser()` prepare the"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "enemy ships and put them on the enemy map grid."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "**Sequence Diagram for `placeAirCraftCarrier()`**"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ".Sequence Diagram for placeAirCraftCarrier()"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "image::PlaceAirCraftCarrierSequenceDiagram.png[width\u003d800]"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "**Sequence Diagram for `placeMultipleDestroyerAndCruiser()`**"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ".Sequence Diagram for placeMultipleDestroyerAndCruiser()"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "image::PlaceMultipleDestroyerAndCruiserSequenceDiagram.png[width\u003d800]"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "iwle"
        },
        "content": "`populateMapGrid()` will generate randomised ships based on the number of ships"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "available to it for the current game, as specified in its Parent class - Player."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "iwle"
        },
        "content": "The number of ships available to the Enemy AI is congruent to the number of ships"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "iwle"
        },
        "content": "available to the Player. The exact number of the different types of ships is decided from on"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "a formula that is based on the map size specified by the player in the `init` command."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "// end::enemyInitialiseMap[]"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "// tag::enemyShoot[]"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d\u003d Calculation of Coordinate to Attack"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "The Enemy AI has the method `enemyShootAt()` that is invoked when the player ends their turn upon a miss."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "The Enemy AI will attempt to generate a random Coordinate to attack,"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "and pass this Coordinate to the `BattleManager`. The Enemy AI supports the ability to"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "check that its generated coordinates are all valid, and will perform certain calculations that will"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "increase its accuracy upon detecting a successful hit on any part of a ship."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "The following activity diagram illustrates the conditions taken into account by the Enemy AI as part of its shooting algorithm, and shows"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "how it decides on which Coordinate to target, depending on the success of previous hits."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ".Activity Diagram of the Enemy Shooting Process"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "image::EnemyShootingActivityDiagram.png[width\u003d800]"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "We can see from the diagram that the start of the game, when scouting for the Player\u0027s ships, the Enemy first divides the cells with a parity of 1"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "on the map into two groups - we will name these groups White and Black for ease of explanation."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "The enemy will then randomly pick a Coordinate from the White group whenever it is guessing where the"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "next Player ship might be. The reason for this is that since every ship must be at least of length 2, all ships will"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "consist of at least one of each White or Black coordinates."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "The Black-White groupings of Coordinates through the concept of parity is illustrated here in the following diagram:"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ".Checkered Board illusrating concept of parity"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "image::CheckeredBoard.png[width\u003d650]"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "Once the Enemy hits a Coordinate that has a ship on it, it will note down every valid Coordinate that is cardinal (to the North, South, East and West) to the"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "cell that was discovered to hold a ship."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ".Examples of valid and invalid cardinal coordinates"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "image::CardinalCoordinates.png[width\u003d650]"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "The validity of these cardinal Coordinates are evaluated by checking if they are within the bounds of the map grid, and"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "whether they have not been hit before. If these two conditions are satisfied, then the Enemy will note down the cardinal Coordinate into a `watchlist`, and"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "will from that point shoot everything in the `watchlist`, until the ship that it is targeting is destroyed."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "When the Enemy AI detects that it has successfully destroyed the Player ship, it will empty out the `watchlist`, and go back to scouting the"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "map for another part of the Player ship, by randomly targeting coordinates in the Black cells, as illustrated in the previous image."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "The following code snippet gives a clearer view of how the algorithm flows for the enemy shooting strategy:"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "----"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "include::../src/main/java/seedu/address/model/player/Enemy.java[lines\u003d85..105]"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "----"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "__Note: All actions taken by the Enemy AI are seeded by a pseudo-random generator."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "Thus, its behaviour will be different for every game session.__"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "// end::enemyShoot[]"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "// tag::enemyDesign[]"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "* **Current choice:** seed all methods with pseudo-random seed"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "** Pros: each game will be a different experience"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "** Cons: testing will be more difficult"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "* **Alternative:** pre-calculate and hardcode the actions the Enemy AI performs"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "** Pros: testing is made very much easier"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "** Cons: games would be less dynamic since the enemy\u0027s behaviour is non-organic"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "// end::enemyDesign[]"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "bos10"
        },
        "content": "// tag::stats[]"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d Statistics feature"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "bos10"
        },
        "content": "The statistics feature allows users to view their current gameplay information. This information will be displayed in a"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "bos10"
        },
        "content": "pop-up window that includes: Number of Attacks Made, Number of Successful Hits, Number of Misses and Number of Enemy Ships"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "bos10"
        },
        "content": " Destroyed. The statistics command can be called at any juncture of the game."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "bos10"
        },
        "content": "Upon a successful win game, the statistics feature also implements a save command that automatically saves the"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "bos10"
        },
        "content": "statistical data into the game\u0027s storage. At the same time, the command will retrieve the statistical data from the"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "bos10"
        },
        "content": "previous game and perform a comparison of game data."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "bos10"
        },
        "content": "The following operations are invoked upon the calling of the `stats` command."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "bos10"
        },
        "content": "** `getAttacksMade()` - Returns the number of attacks made by the User."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "bos10"
        },
        "content": "** `getMovesLeft()` - Returns the remaining number of moves left for the User."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "bos10"
        },
        "content": "** `getHitCount()` - Returns the number of successful hit on enemy ships."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "bos10"
        },
        "content": "** `getMissCount()` Returns the number of misses made."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "bos10"
        },
        "content": "** `getEnemyShipsDestroyed()` Returns the number of Enemy Ships Destroyed by the player."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "bos10"
        },
        "content": "** `getAccuracy()` Returns the current Hit-Miss Ratio of the User based on the game so far."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "bos10"
        },
        "content": "** `generateData()` Formats the current statistical data into a json serializable format."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d\u003d Display statistics"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "bos10"
        },
        "content": "Given below is an example usage scenario and how the `stats` command behaves at each step."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "bos10"
        },
        "content": "Step 1. The User initializes the game with the `init 8` which will create a 8x8 map."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "bos10"
        },
        "content": "[Note]"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "bos10"
        },
        "content": "The Map can be initialized to any valid size (This is just a sample scenario)"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "bos10"
        },
        "content": "Step 2. Put the ships onto the grid via the `put` ship command."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "bos10"
        },
        "content": "Step 3. Input `stats` into the command-line and press enter to obtain the current statistical data."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "bos10"
        },
        "content": "Inputting `stats` :"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "bos10"
        },
        "content": "image::inputStatsCommandSS.png[width\u003d200]"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "bos10"
        },
        "content": "Pop-up window for `stats` :"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "bos10"
        },
        "content": ".Screenshot of empty statistics pop-up window."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "bos10"
        },
        "content": "image::StatsWindowSS.png[width\u003d350]"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "bos10"
        },
        "content": "There should not be any valid data at the moment as the game as not started."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "bos10"
        },
        "content": "Step 4. Now proceed with the game and perform an attack. Input `attack a1`."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "bos10"
        },
        "content": "Step 5. Invoke the `stats` command again to view the updated statistics of the attack result."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "bos10"
        },
        "content": ".Screenshot of populated statistics pop-up window."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "bos10"
        },
        "content": "image::StatsWindowUpdatedSS.PNG[width\u003d350]"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "bos10"
        },
        "content": "Besides the pop-up window, the data is also captured in the command-line result box."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "bos10"
        },
        "content": "image::StatsCommandBox.PNG[width\u003d200]"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "bos10"
        },
        "content": "The following sequence diagram summarizes what happens when a User invokes the `stats` command."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "bos10"
        },
        "content": ".Sequence diagram of `stats` command."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "bos10"
        },
        "content": "image::StatsSequenceDiagram.PNG[width\u003d600 ]"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d\u003d\u003d Save and Compare"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "bos10"
        },
        "content": "Given below is an example usage scenario of the automatic save and compare feature."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "bos10"
        },
        "content": "1. Upon winning a game, a user will be presented with the following screen."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "bos10"
        },
        "content": "image::StatsWinScreen.PNG[width\u003d350]"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "bos10"
        },
        "content": "Notice the displayed \u0027Statistics Analysis\u0027 section that displays a comparison of the player\u0027s accuracy in the current game and"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "bos10"
        },
        "content": "the previous game."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "bos10"
        },
        "content": "2. By inputting `init 6` and press enter. The game will be restarted with a new map."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "bos10"
        },
        "content": "3. Next, input the command `stats` to observe how the previous statistics data has also been cleared in preparation for the"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "bos10"
        },
        "content": "new game."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "bos10"
        },
        "content": "The following sequence diagram summarizes what happens at the end of a game and an automatic save is"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "bos10"
        },
        "content": "performed."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "bos10"
        },
        "content": ".Sequence diagram of how the statistics data is saved."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "bos10"
        },
        "content": "image::SaveSequenceDiag.PNG[width\u003d350]"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "bos10"
        },
        "content": "The following sequence diagram summarizes what happens at the end of the game where an automatic reading of previous"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "bos10"
        },
        "content": "statistics data is performed."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "bos10"
        },
        "content": ".Sequence diagram of how the previous statistics data is read from storage."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "bos10"
        },
        "content": "image::ReadSequenceDiagram.PNG[width\u003d350]"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d\u003d\u003d Activity Diagram"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "bos10"
        },
        "content": "The following Activity Diagram shows when the `stats` command can be used."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "bos10"
        },
        "content": ".Activity Diagram of the statistics feature."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "bos10"
        },
        "content": "image::StatisticsActivityDiagram.png[width\u003d450]"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d\u003d\u003d Use Case Diagram"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "bos10"
        },
        "content": "The following use-case diagram captures the behaviour of the statistics feature."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "bos10"
        },
        "content": ".Use case diagram on the statistics feature."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "bos10"
        },
        "content": "image::StatsUseCaseDiag.PNG[width\u003d250]"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design of data-tracking methods"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "bos10"
        },
        "content": "* **Alternative 1:** The methods that are responsible for incrementing the relevant game data are placed"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "bos10"
        },
        "content": "in each of the commands to be tracked. This meant that there would be a method call to the statistics class"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "bos10"
        },
        "content": "from within every method itself, which also meant that every method had to contain a parameter for the PlayerStatistics Object."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Pros: The methods are clearly visible within each command to be tracked and as a developer I can understand when each"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "bos10"
        },
        "content": "command is being tracked."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Cons: This implementation violates the DRY principle (Don\u0027t Repeat Yourself) Principle."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "bos10"
        },
        "content": "* **Alternative 2 (Current Choice) :** The method responsible for incrementing the statistical data is placed only at the AttackCommand class."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Pros: The implementation does not violate the DRY principle and contains less dependencies on the other components."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Cons: It is more difficult to code as it has to account for different CommandResult objects."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Type of Storage File"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "bos10"
        },
        "content": "* **Alternative 1 (Current Choice)** : Use JSON file to store statistics data"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Pros: Easy to implement as there are libraries pre-installed."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Cons: Formatting errors are not validated"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "bos10"
        },
        "content": "* **Alternative 2 ** : Use XML file to store statistics data"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Pros: Can put metadata into the tags in  the form of attributes."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Cons: Difficult to code as it is less readable and external libraries must be imported."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "bos10"
        },
        "content": "//end::stats[]"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d Logs"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d Editing documentation"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d Publishing documentation"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d Converting documentation to PDF format"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d Site-wide documentation settings"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d Per-file documentation settings"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "s-tr"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d Site template"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "s-tr"
        },
        "content": "The CS2103-AY1819S2-W14-3 team does not provide support for modified template files."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d Tests"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d Running tests"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "s-tr"
        },
        "content": "e.g. `seedu.address.storage.BattleManagerTest`"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d Troubleshooting testing"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d Build automation"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d Continuous integration"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d Coverage reports"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d Documentation previews"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d Release"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d Dependency management"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* likes retro games"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "*Value proposition*: able to play Battleship using a computer"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "s-tr"
        },
        "content": "|`* * *` |new player |see usage instructions |know how to begin using the App"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "s-tr"
        },
        "content": "|`* * *` |existing player |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "|`* * *` | player | initialise a new game board / map| start a new game"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "s-tr"
        },
        "content": "|`* * *` | player | initialise a new game board / map| play again after I finish"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "iwle"
        },
        "content": "|`* * *` | player | put a ships on the map | play the game"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "s-tr"
        },
        "content": "|`* *` | player | see where my ships are on the map |have a visual representation of the game"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "s-tr"
        },
        "content": "|`* *` | player | tag my ships | manage my ships during the game"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "s-tr"
        },
        "content": "|`* *` | player | list my ships | check the status of my ships during the game"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "s-tr"
        },
        "content": "|`* *` | player | list my ships by tag | check the status of specific ships during the game"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "s-tr"
        },
        "content": "|`* * *` | player | begin the battle | fight the enemy"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "s-tr"
        },
        "content": "|`* * *` | player | attack the enemy | destroy the enemy\u0027s ships and win"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "bos10"
        },
        "content": "|`* *` | player | see how many enemy ships I have destroyed | know how many more enemy ships to find"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "s-tr"
        },
        "content": "|`* *` | player | see game statistics | know how I am performing in the game"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "s-tr"
        },
        "content": "|`* *` | player | compare scores with previous games | know if I am getting better at winning the game"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "s-tr"
        },
        "content": "(For all use cases below, the *System* is the `Battleship` application and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "// tag::mapuse[]"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d Initialise Maps"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "1.  User requests to initialise maps"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "2.  Battleship creates and displays both player\u0027s maps"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* 2a. The map size is invalid."
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** 2a1. Battleship shows an error message"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "// end::mapuse[]"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d Put ship"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "iwle"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. User requests to add ship to given coordinate specified."
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "iwle"
        },
        "content": "2. Game adds a ship to the given coordinate specified, in the cell."
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "iwle"
        },
        "content": "+"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "iwle"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "iwle"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "iwle"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "iwle"
        },
        "content": "* 2a. If there is a ship present in the cell, show an error."
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d List ships"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "iwle"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. User requests to list ships deployed on map."
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "s-tr"
        },
        "content": "2. Game shows all of the user\u0027s ships deployed on map."
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "iwle"
        },
        "content": "+"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "iwle"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "iwle"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "iwle"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "iwle"
        },
        "content": "* 2a. If there are no ships deployed, inform the user."
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "iwle"
        },
        "content": "// tag::mssListTags[]"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d List all tags that ships have"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "iwle"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. User requests to list tags of ships that have already been deployed on map."
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "s-tr"
        },
        "content": "2. Game shows all of the tags of ships that have already been deployed on map."
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "iwle"
        },
        "content": "+"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "iwle"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "iwle"
        },
        "content": "// end::mssListTags[]"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "iwle"
        },
        "content": "// tag::mssListShip[]"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d List ships by tag"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "iwle"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. User requests to list ships deployed on map that have certain tags."
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "s-tr"
        },
        "content": "2. Game shows all of the user\u0027s ships deployed on map that have certain tags."
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "iwle"
        },
        "content": "+"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "iwle"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "iwle"
        },
        "content": "// end::mssListShip[]"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "iwle"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "iwle"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "iwle"
        },
        "content": "* 2a. If there are no ships deployed, inform the user."
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "s-tr"
        },
        "content": "// tag::beginusecase[]"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d Begin the battle"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "s-tr"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "s-tr"
        },
        "content": "1. User requests to begin the battle."
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "s-tr"
        },
        "content": "2. Game instructs the enemy to place their ships."
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "s-tr"
        },
        "content": "3. Game displays that the battle has begun."
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "s-tr"
        },
        "content": "+"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "s-tr"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "s-tr"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* 2a. The user has not placed any ships."
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "s-tr"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "s-tr"
        },
        "content": "** 2a1. The game prevents the user from starting the battle, and"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        informs them to place at least one ship."
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "s-tr"
        },
        "content": "// end::beginusecase[]"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "s-tr"
        },
        "content": "// begin::attackusecase[]"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d Attack the enemy"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "s-tr"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "s-tr"
        },
        "content": "1. User requests to attack a specific cell."
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "s-tr"
        },
        "content": "2. Game performs an attack on the specified cell on the enemy map."
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "s-tr"
        },
        "content": "3. Game displays the result of the user\u0027s attacks, and the enemy\u0027s attack(s) if any."
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "s-tr"
        },
        "content": "+"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "s-tr"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "s-tr"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* 2a. The user has already attacked the cell before."
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "s-tr"
        },
        "content": "+"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "s-tr"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "s-tr"
        },
        "content": "** 2a1. The game prevents the user from attacking the cell and prompts them for another."
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "s-tr"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* 2b. The user attacks a cell that is invalid, or a cell that is not on the map."
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "s-tr"
        },
        "content": "+"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "s-tr"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "s-tr"
        },
        "content": "** 2b1. The game prevents the user from attacking the cell and prompts them for another."
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "s-tr"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "s-tr"
        },
        "content": "// end::attackusecase[]"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "bos10"
        },
        "content": "//tag::StatsUseCase[]"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d See game statistics"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "bos10"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "bos10"
        },
        "content": "1. User requests to display current gameplay statistics"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "bos10"
        },
        "content": "2. User is presented with all of the user\u0027s gameplay data in a pop-up window."
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "bos10"
        },
        "content": "+"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "bos10"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "bos10"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "bos10"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "bos10"
        },
        "content": "* 2a. There is no statistics data to display"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "bos10"
        },
        "content": "+"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "bos10"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "bos10"
        },
        "content": "** 2a1. A single statement indicating no statistical data yet is displayed in the command box."
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d Compare scores with previous games"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "bos10"
        },
        "content": "1. User wins a game."
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "bos10"
        },
        "content": "2. User is presented with a comparison between the current game and previous game score."
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "bos10"
        },
        "content": "* 2a. There is no previous game data."
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "bos10"
        },
        "content": "** 2a1. A single statement indicating no statistical data yet is displayed in the command box."
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "bos10"
        },
        "content": "//end::StatsUseCase[]"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d Play enemy turn"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "*Actor:* `enemy player`"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "1. Enemy turn starts."
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "2. Enemy performs Enemy Attack(See Enemy Attack Use Case)."
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "3. Enemy turn ends."
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "4. Control is given back to Player"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "s-tr"
        },
        "content": ". The app should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": ". A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "s-tr"
        },
        "content": ". The app should not use up too much memory for the application and application data for typical usage."
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "iwle"
        },
        "content": ". Versions should be backward compatible with each other."
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "s-tr"
        },
        "content": ". The app should be usable by a novice who has never played Battleship before."
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "iwle"
        },
        "content": ". The map grid should be large enough for gameplay."
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "// tag::maptest[]"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d Initialise the maps"
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ". Initialising the maps after launching the game"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ".. Test case: `init 7` +"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "   Expected: Displays two empty map grids of size 7 in the GUI. Both maps will have the appropriate alphanumeric labels on the first row and column."
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ".. Test case: `init 0` +"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "   Expected: If this is the first command ran, no map will be displayed. Otherwise, no changes will be made to the displayed maps."
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "   Error message will be displayed in the result display box."
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ".. Other incorrect initialise commands to try: `init`, `init x` (where x is smaller or larger than the specified minimum or maximum map size respectively). +"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "   Expected: No map will be displayed if this is the first command ran. Otherwise, no changes will be made to the displayed map."
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "// end::maptest[]"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "iwle"
        },
        "content": "// tag::shiptest[]"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d Putting a ship"
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "iwle"
        },
        "content": ". Putting a ship on the map after initialising the map."
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "iwle"
        },
        "content": ".. Prerequisites: There are ships in your fleet ready to be deployed. This means that the number of ship in the fleet is more than 0. The map is initialised to a size between 6 and 10."
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "iwle"
        },
        "content": ".. Test case: `put n/destroyer r/horizontal c/b1` +"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "iwle"
        },
        "content": "   Expected: Destroyer ship of size 3 will be put horizontally on coordinates `b1`, `b2` and `b3`. The map is updated with 3 black cells on each of these coordinates representing the Destroyer ship."
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "iwle"
        },
        "content": ".. Test case: `put n/aircraft carrier r/horizontal c/c1 t/bluefleet` +"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "iwle"
        },
        "content": "   Expected: Aircraft Carrier ship of size 5 will be put horizontally on coordinates `c1`, `c2`, `c3`, `c4` and `c5`. The map is updated with 5 black cells on each of these coordinates representing the Aircraft Carrier ship."
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "iwle"
        },
        "content": ".. Test case: `put n/aircraft carrier r/horizontal c/e1 t/nomore` +"
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "iwle"
        },
        "content": "   Expected: No ship is put down on the map. Error details shown in the status message. Map remains the same."
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "iwle"
        },
        "content": "// end::shiptest[]"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "s-tr"
        },
        "content": "// tag::starttest[]"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d Starting the battle"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "s-tr"
        },
        "content": ". To test `begin`, we will test that it is only able to be executed at certain times."
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  Please follow the following steps in order."
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "s-tr"
        },
        "content": ".. Start the application, then execute `begin`. +"
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "s-tr"
        },
        "content": "   Expected result: The battle does not begin, and an error message is displayed in the result box."
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "s-tr"
        },
        "content": ".. Execute `init 6`, then execute `begin`. +"
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "s-tr"
        },
        "content": "   Expected result: The battle does not begin, and an error message is displayed in the result box."
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "s-tr"
        },
        "content": ".. Place one or more ships using `put`, then execute `begin`. +"
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "s-tr"
        },
        "content": "   Expected result: the battle successfully begins and a message stating as such is displayed."
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "s-tr"
        },
        "content": ".. Execute `begin` again."
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "s-tr"
        },
        "content": "   Expected result: an error message is displayed in the result box."
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "s-tr"
        },
        "content": "// end::starttest[]"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "s-tr"
        },
        "content": "// tag::battletest[]"
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d Attacking"
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "s-tr"
        },
        "content": ". To test `attack`, we will need to play through the game."
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  Please follow the following steps in order."
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "s-tr"
        },
        "content": ".. Start the application, then execute `attack`. +"
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "s-tr"
        },
        "content": "   Expected result: no attack is executed, and an error message is displayed."
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "s-tr"
        },
        "content": ".. Execute `init 6`, and place your ships on the board."
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "s-tr"
        },
        "content": ".. Execute `begin`."
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "s-tr"
        },
        "content": ".. Make an attack on a square that is out of bounds, e.g. `attack a9`. +"
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "s-tr"
        },
        "content": "   Expected result: no attack is executed, and"
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "s-tr"
        },
        "content": "   a prompt to select another cell is displayed."
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "s-tr"
        },
        "content": ".. Make an attack on a valid square that **misses**. +"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "s-tr"
        },
        "content": "   Expected result: the attacked square on the enemy map turns dark blue, and"
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "s-tr"
        },
        "content": "   a \"miss\" message is displayed. The enemy also makes one or more moves."
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "s-tr"
        },
        "content": ".. Make an attack on a square you have already attacked."
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "s-tr"
        },
        "content": "   Expected result: no attack is executed, and"
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "s-tr"
        },
        "content": "   a prompt to select another cell is displayed."
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "s-tr"
        },
        "content": ".. Make an attack on a valid square that **hits**.  +"
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "s-tr"
        },
        "content": "   Expected result: the attacked square on the enemy map turns orange, and"
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "s-tr"
        },
        "content": "   a \"hit\" message is displayed."
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "s-tr"
        },
        "content": ".. Make an attack that **destroys a ship**. +"
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "s-tr"
        },
        "content": "   Expected result: the destroyed ship on the enemy map turns red, and"
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "s-tr"
        },
        "content": "   a \"destroy\" message is displayed."
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "s-tr"
        },
        "content": ".. Destroy all the enemy\u0027s ships. +"
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "s-tr"
        },
        "content": "   Expected result: a \"win\" message is displayed."
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "s-tr"
        },
        "content": ".. Start another battle, then have all your ships be destroyed by the enemy. +"
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "s-tr"
        },
        "content": "   Expected result: a \"lose\" message is displayed."
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "s-tr"
        },
        "content": "// end::battletest[]"
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "bos10"
        },
        "content": "// tag::statstest[]"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d\u003d Viewing the statistics"
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "bos10"
        },
        "content": "To test the `stats` feature. We will perform a before and after check to see if the statistical data of a simple behaviour is captured. In this case, we will perform an attack with a miss result."
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "bos10"
        },
        "content": "1. Initialize a 8x8 map using `init 8`."
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "bos10"
        },
        "content": "2. Run the `stats` command and observe the results"
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "bos10"
        },
        "content": ".. Test case : `stats`  (before) +"
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "bos10"
        },
        "content": "   Expected: All fields are 0."
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "bos10"
        },
        "content": "3. Now input `attack c1` to simulate an attack on the enemy map."
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "bos10"
        },
        "content": ".. Test case : `stats` (after) +"
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "bos10"
        },
        "content": "    Expected: Number of attacks : 1, Number of Misses : 1"
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "bos10"
        },
        "content": "//end::statstest[]"
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "bos10"
        },
        "content": "//tag::savetest[]"
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d\u003d Saving statistics data"
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "bos10"
        },
        "content": "To test the statistics save and compare feature. We will use a debug command `save`."
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "bos10"
        },
        "content": "1. Initialize a 8x8 map using `init 8`."
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "bos10"
        },
        "content": "2. Input `save` into the command box and press enter."
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "bos10"
        },
        "content": ".. Test case : `save` (start of game) +"
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "bos10"
        },
        "content": "   Expected: Accuracy is same as before at 0%. This is because the application"
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "bos10"
        },
        "content": "   automatically compares to a default state of 0 if there is no previous game."
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "bos10"
        },
        "content": "3. Now play the game until you win."
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "bos10"
        },
        "content": "4. At the end of the game, the `save` command will be automatically called."
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "bos10"
        },
        "content": ".. Test case : Win the game +"
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "bos10"
        },
        "content": "    Expected: A comparison is made between your current game accuracy and the previous"
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "bos10"
        },
        "content": "    game accuracy which is 0. Your accuracy has improved."
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "bos10"
        },
        "content": "//end::savetest[]"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 117,
      "iwle": 206,
      "lucydotc": 132,
      "s-tr": 355,
      "bos10": 170,
      "-": 581
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d Battleship - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ":toclevels: 4"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ":sectnumlevels: 4"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S2-W14-3/main"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "By: `Team W14-3`      Since: `Jan 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "// tag::intro[]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "Ships ahoy! Battleship is a simple computer-based remake of the classic Battleship game."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "It is for people who want to experience the joy of playing Battleships without the hassle and fuss of dealing with physical game pieces."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "Battleship is optimised for people who want to use a Command Line Interface (CLI), while still retaining the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "It\u0027s a single-player game, and provides a fully functional computerised enemy player for the player to play against, guaranteeing many hours of fun! Can\u0027t wait to get started? Head over to \u003c\u003cQuick Start\u003e\u003e to fire away!"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "*What is a Command Line Interface (CLI) and a Graphical User Interface (GUI)?* +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "An interface is how a user interacts with the computer. For example, you can use a mouse to click on a file to open it in Windows or MacOS. This is part of the interface for these operating systems. +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "A Command Line Interface (CLI) interacts with the user by accepting words that are typed in by the user. Conversely, a Graphical User Interface (GUI) interacts with the user visually. It uses icons and graphics to show the user what the program is doing."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "As you will see, Battleship is a hybrid application. It combines both a CLI and GUI, meaning that the user must type in commands but will see the changes caused by those commands graphically."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "// end::intro[]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "// tag::quickstart[]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ".  Download the latest `battleship.jar` link:https://github.com/CS2103-AY1819S2-W14-3/main/releases[here]."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for Battleship."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ".  Type commands in the command box and press kbd:[Enter] to execute them. +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": ".  Initialise the map to a size between 6 to 10. eg: `init 6`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": ".  Deploy your battleships:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "..  Deploy your aircraft carrier: `put n/aircraft carrier c/a1 r/h`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "..  Deploy your cruiser(s): `put n/cruiser c/c1 r/h`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "..  Deploy your destroyer(s): `put n/destroyer c/e1 r/h`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": ".  Start the game: `start game`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ".  Shoot the enemy\u0027s map at a specific cell. eg: `shoot a1`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "The game will go on until either party\u0027s ships are totally destroyed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "// end::quickstart[]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "\u003d\u003d Game Rules"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "// tag::gamerules[]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "This section will describe the game rules and how to play the classic Battleship game."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "*Goal*"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": "Sink all your opponent\u0027s ships before they sink yours."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "*Captain, deploy ships!*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "Depending on the chosen size of the map, as specified through the `init \u003cmap_size\u003e` command,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "you will be given different numbers of each ship."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "The ships available are:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "* Cruiser: size 2"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "* Destroyer: size 3"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "* Aircraft Carrier: size 5"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": "Depending on your map size, your fleet will have different numbers of each ship."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "image::mapSizeFleetSize.png[width\u003d550]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "*Ready, aim, fire!*"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "s-tr"
        },
        "content": "After you have placed all your ships, enter `begin` to start the battle."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "You will always be given the first turn."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "You may fire shots at the enemy map through the command `shoot`, for example `shoot a1`."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "If the shot hits a ship, you may continue taking shots until they miss."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "Upon a miss, the turn will be handed over to the enemy."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "s-tr"
        },
        "content": "The same goes for the enemy - the enemy will take its shot automatically, firing until it misses, before"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "passing the turn back to you."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "*Good Game!*"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "Whoever is first to destroy all their opponent\u0027s ships will be declared the winner."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "Had fun? You can view the game statistics with the command `stats`."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "// end::gamerules[]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "This section will describe the features of the game in more detail."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by you e.g. in `init MAP_SIZE`, `MAP_SIZE` is a parameter which can be used as `init 10`."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* Items in square brackets are optional e.g `put n/NAME [t/TAG]` can be used as `put n/Destroyer t/bestship` or as `put n/Destroyer`."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/alpha`, `t/best t/captain` etc."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME c/COORDINATES`, `c/COORDINATES n/NAME` is also acceptable."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "s-tr"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "s-tr"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Some commands can only be executed at some part of the game, e.g. `attack` can only be executed"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "s-tr"
        },
        "content": "when the battle is ongoing. If you try to enter a command that is not allowed at that point in"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "s-tr"
        },
        "content": "time, the program will tell you so."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d General commands"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "This section describes commands that can be executed at any point of time during the game."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Opens a help window that displays this User Guide. +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "// tag::map[]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d Preparation phase"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "This section describes the commands used in the preparation phase."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d\u003d Initialising the maps : `init`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "The `init` command initialises both your map and the enemy AI\u0027s map to the size that you specify. The size of the maps must be between 6 and 10, inclusive. +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Format: `init MAP_SIZE` +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Example: `init 10`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* The `init` command can be used at any point in time during gameplay. When used in the middle of a game, the `init` command functions like a \"new game\" command and will reset the board to a clean state."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* Each cell is represented by its coordinates e.g \"b1\". The coordinates will be used by the other commands to refer to a cell."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "_Figure 1_ below shows how the maps will be displayed in the UI."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "s-tr"
        },
        "content": ".The maps as displayed in the UI"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "image::initmapresult.png[width\u003d750]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Throughout the course of the game, the cells in the map will change colour based on their status. +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ".Cell statuses:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "- Hidden - Enemy map cell that has not been hit"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "- Water - Empty (i.e cell with no ship) player cell that has not been hit"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "- Water Hit - Empty cell that has been hit"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "- Ship - Player cell that has a ship and has not been hit"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "- Ship Hit - Ship cell that has been hit but not yet destroyed"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "- Ship Destroyed - Ship cell that has been destroyed"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "_Figure 2_ below shows which colour is used for each status."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ".Cell colours"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "image::maplegend.png[width\u003d400]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "// end::map[]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iwle"
        },
        "content": "// tag::ship1[]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d\u003d Managing ships: `put`, `list`, `listTags`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Placing a ship on the map: `put`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iwle"
        },
        "content": "Adds a ship onto your map. The coordinates specified is the position of the ship\u0027s head. +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iwle"
        },
        "content": "Format: `put n/NAME c/COORDINATES r/ORIENTATION [t/TAGS]` +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iwle"
        },
        "content": "* `put n/destroyer c/a1 r/vertical`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iwle"
        },
        "content": "* `put n/aircraft carrier c/b1 r/h t/tag1` +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iwle"
        },
        "content": "The head of a ship is the top-most and left-most cell of the ship. When coordinates are specified in the `put` command, it specifies the coordinates of the head of the ship, as shown in the figure below."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iwle"
        },
        "content": "// end::ship1[]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iwle"
        },
        "content": ".The coordinates of the `put` command refer to the coordinates of the ship head."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iwle"
        },
        "content": "image::BattleshipHeadExample2.png[width\u003d400, align\u003d\"center\"]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iwle"
        },
        "content": "// tag::ship2[]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iwle"
        },
        "content": "The orientation of the ship can be `horizontal` or `vertical`. This may be shortened to `h` or `v`, respectively. The orientation of the ship must be specified. +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iwle"
        },
        "content": "When putting a ship on the map grid, you should specify the head coordinates such that:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iwle"
        },
        "content": "* The ship falls within the map grid."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iwle"
        },
        "content": "* The ship does not collide with another ship that is already on the map grid."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iwle"
        },
        "content": "// end::ship2[]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iwle"
        },
        "content": "// tag::list[]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Listing all ships : `list`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iwle"
        },
        "content": "Shows a list of all of your ships that have been deployed on the map. There are four ways of using the `list` command:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iwle"
        },
        "content": "1. List all ships: `list`."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iwle"
        },
        "content": "2. List ships that match certain tags: `list t/[TAGS]`."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iwle"
        },
        "content": "3. List certain ships: `list n/[NAME]`."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iwle"
        },
        "content": "4. List certain ships that match certain tags: `list n/[NAME] t/[TAGS]`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iwle"
        },
        "content": "* `list`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iwle"
        },
        "content": "* `list t/blueFleet`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iwle"
        },
        "content": "* `list n/destroyer`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iwle"
        },
        "content": "* `list n/destroyer n/cruiser t/blueFleet t/greenFleet`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iwle"
        },
        "content": "The list will show the ship\u0027s head coordinate, the ship\u0027s orientation, and the ship\u0027s tags in square brackets. The format of each entry in the list is: `[NAME] [CURRENT LIFE] at [HEAD COORDINATE] [ORIENTATION] [TAGS]`. An example is given below."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iwle"
        },
        "content": "[source,text]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iwle"
        },
        "content": "----"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iwle"
        },
        "content": "Input:      list n/destroyer t/blueFleet t/greenFleet"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iwle"
        },
        "content": "Output:     destroyer (3/3) at g5 vertical [redFleet][blueFleet][greenFleet]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iwle"
        },
        "content": "            destroyer (3/3) at c3 horizontal [blueFleet][greenFleet]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iwle"
        },
        "content": "----"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iwle"
        },
        "content": "// end::list[]"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iwle"
        },
        "content": "// tag::listTags[]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Listing all tags: `listTags`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iwle"
        },
        "content": "Lists all the tags that have been used to tag the ship deployed on the map. +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Format: `listTags`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iwle"
        },
        "content": "// end::listTags[]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "s-tr"
        },
        "content": "// tag::battle[]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d Battle phase"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d\u003d Beginning the battle: `begin`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Begins the battle against the computer enemy. +"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Format: `begin` +"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Alternative command: `start`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "s-tr"
        },
        "content": "****"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* After this command is entered, the program\u0027s AI will place its own ships."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* After the AI completes its placing of ships, you can take your first turn."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "s-tr"
        },
        "content": "****"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d\u003d Shooting at a coordinate: `shoot`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Launches an attack against given coordinate on the enemy\u0027s map. +"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Format: `shoot COORDINATES` +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Alternative commands: `attack`, `fire`, `hit`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* `shoot a6`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* `attack b5`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "iwle"
        },
        "content": "****"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* The program will prevent you from attacking an invalid coordinate."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* The program will prevent you from attacking a square that you have already attacked."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* If you hit one of the opponent\u0027s ships, you may make another attack."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  Otherwise, the enemy will take their turn(s), firing until they get a miss."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "iwle"
        },
        "content": "****"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "s-tr"
        },
        "content": "// end::battle[]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "bos10"
        },
        "content": "// tag::stats[]"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d\u003d Retrieving game statistics: `stats`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "bos10"
        },
        "content": "Retrieves the gameplay statistics data displays them on a pop-up window."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iwle"
        },
        "content": "Format: `stats`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "bos10"
        },
        "content": "****"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "bos10"
        },
        "content": "* The pop-up window will contain a bar chart visualisation of your game play data"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "bos10"
        },
        "content": "* To reload the statistics data, you must close the current pop-up window and call the `stats` command again"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "bos10"
        },
        "content": "to display the updated values."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "bos10"
        },
        "content": "****"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "bos10"
        },
        "content": "// end::stats[]"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "// tag::upcomingmap[]"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d Features Coming in v2.0"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "This section describes features that have not been implemented yet and are scheduled to be released in version 2.0."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d\u003d Special map shapes"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "You will be allowed to use maps that are randomised in shape. This adds an extra layer of challenge and fun."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Both yourself and the enemy AI will not be able to place ships on the grey tiles. The enemy AI will also have a randomised map that will not be the same as your map. You will not be able to see the shape of the enemy map and can shoot grey cells which will be counted as a miss."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "The image below shows an example of a randomised map."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ".Example of a random map shape"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "image::randommap.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "// end::upcomingmap[]"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "iwle"
        },
        "content": "// tag::upcomingQuickStart[]"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d Quick start"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Randomly deploys the all of your ships onto the map and starts the battle. +"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Format: `quickStart`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "iwle"
        },
        "content": "// end::upcomingQuickStart[]"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "iwle"
        },
        "content": "// tag::upcomingPattern[]"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d Save and load pattern of deployed ships"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "iwle"
        },
        "content": "Save and load the pattern that you used to deploy your ships. +"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Format: `pattern i/OPTION p/PATTERN]` +"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "iwle"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "iwle"
        },
        "content": "* `pattern i/save`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* `pattern i/load p/circle`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "iwle"
        },
        "content": "// end::upcomingPattern[]"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "bos10"
        },
        "content": "// tag::v2stats[]"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d\u003d Display high score across games"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "bos10"
        },
        "content": "Display the high score across more than two games. +"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Format: `stats highscore t/ATTRIBUTE` +"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "bos10"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "bos10"
        },
        "content": "* `stats highscore t/time` +"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "bos10"
        },
        "content": "Display game data from the game that won in the shortest amount of time"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "bos10"
        },
        "content": "* `stats highscore t/accuracy` +"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "bos10"
        },
        "content": "Display game data from the game with the highest accuracy."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "bos10"
        },
        "content": "// end::v2stats[]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "bos10"
        },
        "content": "//tag::commandsummary[]"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "s-tr"
        },
        "content": "[width\u003d\"200%\",cols\u003d\"\u003c30%,\u003c40%,50%,20%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "bos10"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "bos10"
        },
        "content": "|Feature |Format |Purpose   | Example"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "s-tr"
        },
        "content": "|*Attack*| `attack COORDINATE` |Attacks a selected cell on the enemy map.| `attack c1`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "s-tr"
        },
        "content": "|*Display manual*| `help` |Opens up the help guide window. | `help`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "s-tr"
        },
        "content": "|*Create map of size 6-10*| `init MAP_SIZE` | Initializes the map grid. | `init 8`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "iwle"
        },
        "content": "|*List ships*| `list [n/NAME] [t/TAG]…` |Lists all available ships, optionally filtering by name and tag(s)| `list`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "s-tr"
        },
        "content": "|*List tags*| `listTags` |Lists all tags.| `listTags`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "iwle"
        },
        "content": "|*Put ship on map*| `put n/NAME r/ORIENTATION c/COORDINATE [t/TAG]…` | Places a ship on the specified position on the map, optionally adding tag(s). | `put n/Destroyer r/vertical c/a1 t/myfleet`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "s-tr"
        },
        "content": "|*View statistics*| `stats` | Opens the Statistics window. | `stats`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "s-tr"
        },
        "content": "|*Start battle*| `start` | Begins the battle. | `start`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "bos10"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "bos10"
        },
        "content": "//end::commandsummary[]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "erjillsison": 52,
      "iwle": 91,
      "lucydotc": 51,
      "s-tr": 60,
      "bos10": 25,
      "-": 104
    }
  },
  {
    "path": "docs/stylesheets/asciidoctor.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/* Asciidoctor default stylesheet | MIT License | http://asciidoctor.org */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "/* Remove comment around @import statement below when using as a custom stylesheet */"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/*@import \"https://fonts.googleapis.com/css?family\u003dOpen+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700\";*/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "audio,canvas,video{display:inline-block}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "audio:not([controls]){display:none;height:0}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "[hidden],template{display:none}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "script{display:none!important}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "body{margin:0}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "a{background:transparent}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "a:focus{outline:thin dotted}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "a:active,a:hover{outline:0}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2em;margin:.67em 0}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "abbr[title]{border-bottom:1px dotted}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "b,strong{font-weight:bold}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "dfn{font-style:italic}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "mark{background:#ff0;color:#000}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "code,kbd,pre,samp{font-family:monospace;font-size:1em}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "pre{white-space:pre-wrap}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "q{quotes:\"\\201C\" \"\\201D\" \"\\2018\" \"\\2019\"}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "small{font-size:80%}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "sup{top:-.5em}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "sub{bottom:-.25em}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "img{border:0}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "svg:not(:root){overflow:hidden}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "figure{margin:0}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "legend{border:0;padding:0}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "button,input{line-height:normal}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "button,select{text-transform:none}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "button,html input[type\u003d\"button\"],input[type\u003d\"reset\"],input[type\u003d\"submit\"]{-webkit-appearance:button;cursor:pointer}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "button[disabled],html input[disabled]{cursor:default}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"checkbox\"],input[type\u003d\"radio\"]{box-sizing:border-box;padding:0}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"search\"]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"search\"]::-webkit-search-cancel-button,input[type\u003d\"search\"]::-webkit-search-decoration{-webkit-appearance:none}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "textarea{overflow:auto;vertical-align:top}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "table{border-collapse:collapse;border-spacing:0}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "*,*:before,*:after{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "html,body{font-size:100%}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "body{background:#fff;color:rgba(0,0,0,.8);padding:0;margin:0;font-family:\"Noto Serif\",\"DejaVu Serif\",serif;font-weight:400;font-style:normal;line-height:1;position:relative;cursor:auto}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "a:hover{cursor:pointer}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "img,object,embed{max-width:100%;height:auto}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "object,embed{height:100%}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "img{-ms-interpolation-mode:bicubic}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".left{float:left!important}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".right{float:right!important}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".text-left{text-align:left!important}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".text-right{text-align:right!important}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".text-center{text-align:center!important}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".text-justify{text-align:justify!important}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".hide{display:none}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "body{-webkit-font-smoothing:antialiased}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "img,object,svg{display:inline-block;vertical-align:middle}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "textarea{height:auto;min-height:50px}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "select{width:100%}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".center{margin-left:auto;margin-right:auto}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".spread{width:100%}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "p.lead,.paragraph.lead\u003ep,#preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{font-size:1.21875em;line-height:1.6}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".subheader,.admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0;direction:ltr}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "a{color:#2156a5;text-decoration:underline;line-height:inherit}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "a:hover,a:focus{color:#1d4b8f}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "a img{border:none}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "p{font-family:inherit;font-weight:400;font-size:1em;line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "p aside{font-size:.875em;line-height:1.35;font-style:italic}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-weight:300;font-style:normal;color:#ba3925;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1.0125em}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "h1 small,h2 small,h3 small,#toctitle small,.sidebarblock\u003e.content\u003e.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2.125em}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "h2{font-size:1.6875em}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.375em}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "h4,h5{font-size:1.125em}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "h6{font-size:1em}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "hr{border:solid #ddddd8;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em;height:0}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "em,i{font-style:italic;line-height:inherit}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "strong,b{font-weight:bold;line-height:inherit}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "small{font-size:60%;line-height:inherit}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "code{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;font-weight:400;color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "ul,ol,dl{font-size:1em;line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "ul,ol,ul.no-bullet,ol.no-bullet{margin-left:1.5em}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0;font-size:1em}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "ul.square li ul,ul.circle li ul,ul.disc li ul{list-style:inherit}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "ul.square{list-style-type:square}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "ul.circle{list-style-type:circle}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "ul.disc{list-style-type:disc}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "ul.no-bullet{list-style:none}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "dl dt{margin-bottom:.3125em;font-weight:bold}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "abbr,acronym{text-transform:uppercase;font-size:90%;color:rgba(0,0,0,.8);border-bottom:1px dotted #ddd;cursor:help}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "abbr{text-transform:none}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 1.1875em;border-left:1px solid #ddd}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite{display:block;font-size:.9375em;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite:before{content:\"\\2014 \\0020\"}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite a,blockquote cite a:visited{color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote,blockquote p{line-height:1.6;color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2.75em}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "h2{font-size:2.3125em}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.6875em}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "h4{font-size:1.4375em}}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "table{background:#fff;margin-bottom:1.25em;border:solid 1px #dedede}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "table thead,table tfoot{background:#f7f8f7;font-weight:bold}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;color:rgba(0,0,0,.8);text-align:left}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "table tr th,table tr td{padding:.5625em .625em;font-size:inherit;color:rgba(0,0,0,.8)}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "table tr.even,table tr.alt,table tr:nth-of-type(even){background:#f8f8f7}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{display:table-cell;line-height:1.6}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "body{tab-size:4}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2;word-spacing:-.05em}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "h1 strong,h2 strong,h3 strong,#toctitle strong,.sidebarblock\u003e.content\u003e.title strong,h4 strong,h5 strong,h6 strong{font-weight:400}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".clearfix:before,.clearfix:after,.float-group:before,.float-group:after{content:\" \";display:table}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".clearfix:after,.float-group:after{clear:both}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "*:not(pre)\u003ecode{font-size:.9375em;font-style:normal!important;letter-spacing:0;padding:.1em .5ex;word-spacing:-.15em;background-color:#e7e7e8;-webkit-border-radius:4px;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "pre,pre\u003ecode{line-height:1.45;color:rgba(0,0,0,.9);font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;font-weight:400;text-rendering:optimizeSpeed}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq{color:rgba(51,51,51,.8)}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "kbd{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;display:inline-block;color:rgba(0,0,0,.8);font-size:.65em;line-height:1.45;background-color:#f7f7f7;border:1px solid #ccc;-webkit-border-radius:3px;border-radius:3px;-webkit-box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em white inset;box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em #fff inset;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq kbd:first-child{margin-left:0}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq kbd:last-child{margin-right:0}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".menuseq,.menu{color:rgba(0,0,0,.8)}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:before,b.button:after{position:relative;top:-1px;font-weight:400}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:before{content:\"[\";padding:0 3px 0 2px}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:after{content:\"]\";padding:0 2px 0 3px}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "p a\u003ecode:hover{color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "#header,#content,#footnotes,#footer{width:100%;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;max-width:62.5em;*zoom:1;position:relative;padding-left:.9375em;padding-right:.9375em}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "#header:before,#header:after,#content:before,#content:after,#footnotes:before,#footnotes:after,#footer:before,#footer:after{content:\" \";display:table}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "#header:after,#content:after,#footnotes:after,#footer:after{clear:both}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "#content{margin-top:1.25em}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "#content:before{content:none}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:first-child{color:rgba(0,0,0,.85);margin-top:2.25rem;margin-bottom:0}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:first-child+#toc{margin-top:8px;border-top:1px solid #ddddd8}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:only-child,body.toc2 #header\u003eh1:nth-last-child(2){border-bottom:1px solid #ddddd8;padding-bottom:8px}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details{border-bottom:1px solid #ddddd8;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-left:.25em;color:rgba(0,0,0,.6);display:-ms-flexbox;display:-webkit-flex;display:flex;-ms-flex-flow:row wrap;-webkit-flex-flow:row wrap;flex-flow:row wrap}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details span:first-child{margin-left:-.125em}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details span.email a{color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br{display:none}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span:before{content:\"\\00a0\\2013\\00a0\"}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span.author:before{content:\"\\00a0\\22c5\\00a0\";color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span#revremark:before{content:\"\\00a0|\\00a0\"}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "#header #revnumber{text-transform:capitalize}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "#header #revnumber:after{content:\"\\00a0\"}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "#content\u003eh1:first-child:not([class]){color:rgba(0,0,0,.85);border-bottom:1px solid #ddddd8;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.25rem}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "#toc{border-bottom:1px solid #efefed;padding-bottom:.5em}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "#toc\u003eul{margin-left:.125em}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul.sectlevel0\u003eli\u003ea{font-style:italic}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul{font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;list-style-type:none}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "#toc li{line-height:1.3334;margin-top:.3334em}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "#toc a{text-decoration:none}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "#toc a:active{text-decoration:underline}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "#toctitle{color:#7a2518;font-size:1.2em}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){#toctitle{font-size:1.375em}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2{padding-left:15em;padding-right:0}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2{margin-top:0!important;background-color:#f8f8f7;position:fixed;width:15em;left:0;top:0;border-right:1px solid #efefed;border-top-width:0!important;border-bottom-width:0!important;z-index:1000;padding:1.25em 1em;height:100%;overflow:auto}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 #toctitle{margin-top:0;margin-bottom:.8rem;font-size:1.2em}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2\u003eul{font-size:.9em;margin-bottom:0}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul ul{margin-left:0;padding-left:1em}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right{padding-left:0;padding-right:15em}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid #efefed;left:auto;right:0}}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:1280px){body.toc2{padding-left:20em;padding-right:0}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2{width:20em}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 #toctitle{font-size:1.375em}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2\u003eul{font-size:.95em}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul ul{padding-left:1.25em}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right{padding-left:0;padding-right:20em}}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "#footer{max-width:100%;background-color:rgba(0,0,0,.8);padding:1.25em}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "#footer-text{color:rgba(255,255,255,.8);line-height:1.44}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1{padding-bottom:.625em}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){.sect1{padding-bottom:1.25em}}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1+.sect1{border-top:1px solid #efefed}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.anchor,h2\u003ea.anchor,h3\u003ea.anchor,#toctitle\u003ea.anchor,.sidebarblock\u003e.content\u003e.title\u003ea.anchor,h4\u003ea.anchor,h5\u003ea.anchor,h6\u003ea.anchor{position:absolute;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decoration:none!important;visibility:hidden;text-align:center;font-weight:400}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.anchor:before,h2\u003ea.anchor:before,h3\u003ea.anchor:before,#toctitle\u003ea.anchor:before,.sidebarblock\u003e.content\u003e.title\u003ea.anchor:before,h4\u003ea.anchor:before,h5\u003ea.anchor:before,h6\u003ea.anchor:before{content:\"\\00A7\";font-size:.85em;display:block;padding-top:.1em}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1:hover\u003ea.anchor,#content h1\u003ea.anchor:hover,h2:hover\u003ea.anchor,h2\u003ea.anchor:hover,h3:hover\u003ea.anchor,#toctitle:hover\u003ea.anchor,.sidebarblock\u003e.content\u003e.title:hover\u003ea.anchor,h3\u003ea.anchor:hover,#toctitle\u003ea.anchor:hover,.sidebarblock\u003e.content\u003e.title\u003ea.anchor:hover,h4:hover\u003ea.anchor,h4\u003ea.anchor:hover,h5:hover\u003ea.anchor,h5\u003ea.anchor:hover,h6:hover\u003ea.anchor,h6\u003ea.anchor:hover{visibility:visible}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.link,h2\u003ea.link,h3\u003ea.link,#toctitle\u003ea.link,.sidebarblock\u003e.content\u003e.title\u003ea.link,h4\u003ea.link,h5\u003ea.link,h6\u003ea.link{color:#ba3925;text-decoration:none}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.link:hover,h2\u003ea.link:hover,h3\u003ea.link:hover,#toctitle\u003ea.link:hover,.sidebarblock\u003e.content\u003e.title\u003ea.link:hover,h4\u003ea.link:hover,h5\u003ea.link:hover,h6\u003ea.link:hover{color:#a53221}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videoblock{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{text-rendering:optimizeLegibility;text-align:left;font-family:\"Noto Serif\",\"DejaVu Serif\",serif;font-size:1rem;font-style:italic}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock\u003ecaption.title{white-space:nowrap;overflow:visible;max-width:0}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".paragraph.lead\u003ep,#preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock #preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{font-size:inherit}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable{border-collapse:separate;border:0;background:none;width:100%}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.icon{text-align:center;width:80px}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.icon img{max-width:none}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.icon .title{font-weight:bold;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;text-transform:uppercase}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #ddddd8;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.content\u003e:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content{border-style:solid;border-width:1px;border-color:#e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e.content\u003e.title{color:#7a2518;margin-top:0;text-align:center}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:last-child\u003e:last-child,.exampleblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content\u003e:last-child\u003e:last-child,.sidebarblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre,.listingblock pre:not(.highlight),.listingblock pre[class\u003d\"highlight\"],.listingblock pre[class^\u003d\"highlight \"],.listingblock pre.CodeRay,.listingblock pre.prettyprint{background:#f7f7f8}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock .literalblock pre,.sidebarblock .listingblock pre:not(.highlight),.sidebarblock .listingblock pre[class\u003d\"highlight\"],.sidebarblock .listingblock pre[class^\u003d\"highlight \"],.sidebarblock .listingblock pre.CodeRay,.sidebarblock .listingblock pre.prettyprint{background:#f2f1f1}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{-webkit-border-radius:4px;border-radius:4px;word-wrap:break-word;padding:1em;font-size:.8125em}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre.nowrap,.literalblock pre[class].nowrap,.listingblock pre.nowrap,.listingblock pre[class].nowrap{overflow-x:auto;white-space:pre;word-wrap:normal}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:.90625em}}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:1280px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:1em}}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock.output pre{color:#f7f7f8;background-color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.highlightjs{padding:0}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.highlightjs\u003ecode{padding:1em;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.prettyprint{border-width:0}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock\u003e.content{position:relative}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock code[data-lang]:before{display:none;content:attr(data-lang);position:absolute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform:uppercase;color:#999}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock:hover code[data-lang]:before{display:block}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock.terminal pre .command:before{content:attr(data-prompt);padding-right:.5em;color:#999}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock.terminal pre .command:not([data-prompt]):before{content:\"$\"}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable{border-collapse:separate;border:0;margin-bottom:0;background:none}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable td{vertical-align:top;padding-top:0;padding-bottom:0;line-height:1.45}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable td.code{padding-left:.75em;padding-right:0}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "pre.pygments .lineno,table.pyhltable td:not(.code){color:#999;padding-left:0;padding-right:.5em;border-right:1px solid #ddddd8}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "pre.pygments .lineno{display:inline-block;margin-right:.25em}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable .linenodiv{background:none!important;padding-right:0!important}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock{margin:0 1em 1.25em 1.5em;display:table}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock\u003e.title{margin-left:-1.5em;margin-bottom:.75em}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote,.quoteblock blockquote p{color:rgba(0,0,0,.85);font-size:1.15rem;line-height:1.75;word-spacing:.1em;letter-spacing:0;font-style:italic;text-align:justify}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote{margin:0;padding:0;border:0}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote:before{content:\"\\201c\";float:left;font-size:2.75em;font-weight:bold;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px 2px rgba(0,0,0,.1)}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote\u003e.paragraph:last-child p{margin-bottom:0}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution{margin-top:.5em;margin-right:.5ex;text-align:right}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock{margin-left:0;margin-right:0;padding:.5em 0;border-left:3px solid rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock blockquote{padding:0 0 0 .75em}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock blockquote:before{display:none}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock{margin:0 1em 1.25em 1em}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock pre{font-family:\"Open Sans\",\"DejaVu Sans\",sans;font-size:1.15rem;color:rgba(0,0,0,.85);font-weight:300;text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock pre strong{font-weight:400}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution,.verseblock .attribution{font-size:.9375em;line-height:1.45;font-style:italic}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution br,.verseblock .attribution br{display:none}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution cite,.verseblock .attribution cite{display:block;letter-spacing:-.025em;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract{margin:0 0 1.25em 0;display:block}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract blockquote,.quoteblock.abstract blockquote p{text-align:left;word-spacing:0}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract blockquote:before,.quoteblock.abstract blockquote p:first-of-type:before{display:none}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock{max-width:100%;border-collapse:separate}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock td\u003e.paragraph:last-child p\u003ep:last-child,table.tableblock th\u003ep:last-child,table.tableblock td\u003ep:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all th.tableblock,table.grid-all td.tableblock{border-width:0 1px 1px 0}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all tfoot\u003etr\u003eth.tableblock,table.grid-all tfoot\u003etr\u003etd.tableblock{border-width:1px 1px 0 0}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-cols th.tableblock,table.grid-cols td.tableblock{border-width:0 1px 0 0}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all *\u003etr\u003e.tableblock:last-child,table.grid-cols *\u003etr\u003e.tableblock:last-child{border-right-width:0}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-rows th.tableblock,table.grid-rows td.tableblock{border-width:0 0 1px 0}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all tbody\u003etr:last-child\u003eth.tableblock,table.grid-all tbody\u003etr:last-child\u003etd.tableblock,table.grid-all thead:last-child\u003etr\u003eth.tableblock,table.grid-rows tbody\u003etr:last-child\u003eth.tableblock,table.grid-rows tbody\u003etr:last-child\u003etd.tableblock,table.grid-rows thead:last-child\u003etr\u003eth.tableblock{border-bottom-width:0}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-rows tfoot\u003etr\u003eth.tableblock,table.grid-rows tfoot\u003etr\u003etd.tableblock{border-width:1px 0 0 0}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-all{border-width:1px}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-sides{border-width:0 1px}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-topbot{border-width:1px 0}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-left,td.halign-left{text-align:left}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-right,td.halign-right{text-align:right}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-center,td.halign-center{text-align:center}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-top,td.valign-top{vertical-align:top}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-bottom,td.valign-bottom{vertical-align:bottom}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-middle,td.valign-middle{vertical-align:middle}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "table thead th,table tfoot th{font-weight:bold}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "tbody tr th{display:table-cell;line-height:1.6;background:#f7f8f7}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "tbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{color:rgba(0,0,0,.8);font-weight:bold}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "p.tableblock\u003ecode:only-child{background:none;padding:0}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "p.tableblock{font-size:1em}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "td\u003ediv.verse{white-space:pre}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "ol{margin-left:1.75em}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "ul li ol{margin-left:1.5em}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd{margin-left:1.125em}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd:last-child,dl dd:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "ol\u003eli p,ul\u003eli p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:.625em}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "ul.unstyled,ol.unnumbered,ul.checklist,ul.none{list-style-type:none}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "ul.unstyled,ol.unnumbered,ul.checklist{margin-left:.625em}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "ul.checklist li\u003ep:first-child\u003e.fa-square-o:first-child,ul.checklist li\u003ep:first-child\u003e.fa-check-square-o:first-child{width:1em;font-size:.85em}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "ul.checklist li\u003ep:first-child\u003einput[type\u003d\"checkbox\"]:first-child{width:1em;position:relative;top:1px}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline{margin:0 auto .625em auto;margin-left:-1.375em;margin-right:0;padding:0;list-style:none;overflow:hidden}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline\u003eli{list-style:none;float:left;margin-left:1.375em;display:block}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline\u003eli\u003e*{display:block}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ".unstyled dl dt{font-weight:400;font-style:normal}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "ol.arabic{list-style-type:decimal}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "ol.decimal{list-style-type:decimal-leading-zero}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "ol.loweralpha{list-style-type:lower-alpha}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "ol.upperalpha{list-style-type:upper-alpha}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "ol.lowerroman{list-style-type:lower-roman}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "ol.upperroman{list-style-type:upper-roman}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "ol.lowergreek{list-style-type:lower-greek}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".hdlist\u003etable,.colist\u003etable{border:0;background:none}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".hdlist\u003etable\u003etbody\u003etr,.colist\u003etable\u003etbody\u003etr{background:none}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "td.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "td.hdlist1{font-weight:bold;padding-bottom:1.25em}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock+.colist,.listingblock+.colist{margin-top:-.5em}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".colist\u003etable tr\u003etd:first-of-type{padding:0 .75em;line-height:1}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ".colist\u003etable tr\u003etd:last-of-type{padding:.25em 0}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".thumb,.th{line-height:0;display:inline-block;border:solid 4px #fff;-webkit-box-shadow:0 0 0 1px #ddd;box-shadow:0 0 0 1px #ddd}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.left,.imageblock[style*\u003d\"float: left\"]{margin:.25em .625em 1.25em 0}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.right,.imageblock[style*\u003d\"float: right\"]{margin:.25em 0 1.25em .625em}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock\u003e.title{margin-bottom:0}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.thumb,.imageblock.th{border-width:6px}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.thumb\u003e.title,.imageblock.th\u003e.title{padding:0 .125em}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inline-block;line-height:0}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".image.left{margin-right:.625em}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".image.right{margin-left:.625em}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "a.image{text-decoration:none;display:inline-block}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "a.image object{pointer-events:none}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote,sup.footnoteref{font-size:.875em;position:static;vertical-align:super}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote a,sup.footnoteref a{text-decoration:none}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote a:active,sup.footnoteref a:active{text-decoration:underline}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em 0;border-width:1px 0 0 0}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote{padding:0 .375em 0 .225em;line-height:1.3334;font-size:.875em;margin-left:1.2em;text-indent:-1.05em;margin-bottom:.2em}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote a:first-of-type{font-weight:bold;text-decoration:none}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote:last-of-type{margin-bottom:0}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "#content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ".gist .file-data\u003etable{border:0;background:#fff;width:100%;margin-bottom:0}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ".gist .file-data\u003etable td.line-data{width:99%}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "div.unbreakable{page-break-inside:avoid}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ".big{font-size:larger}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ".small{font-size:smaller}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ".underline{text-decoration:underline}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ".overline{text-decoration:overline}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ".line-through{text-decoration:line-through}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ".aqua{color:#00bfbf}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ".aqua-background{background-color:#00fafa}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ".black{color:#000}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ".black-background{background-color:#000}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".blue{color:#0000bf}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ".blue-background{background-color:#0000fa}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ".fuchsia{color:#bf00bf}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ".fuchsia-background{background-color:#fa00fa}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ".gray{color:#606060}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ".gray-background{background-color:#7d7d7d}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ".green{color:#006000}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ".green-background{background-color:#007d00}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ".lime{color:#00bf00}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ".lime-background{background-color:#00fa00}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ".maroon{color:#600000}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ".maroon-background{background-color:#7d0000}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ".navy{color:#000060}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ".navy-background{background-color:#00007d}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ".olive{color:#606000}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ".olive-background{background-color:#7d7d00}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ".purple{color:#600060}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ".purple-background{background-color:#7d007d}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ".red{color:#bf0000}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ".red-background{background-color:#fa0000}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ".silver{color:#909090}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ".silver-background{background-color:#bcbcbc}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".teal{color:#006060}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ".teal-background{background-color:#007d7d}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ".white{color:#bfbfbf}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ".white-background{background-color:#fafafa}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ".yellow{color:#bfbf00}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ".yellow-background{background-color:#fafa00}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "span.icon\u003e.fa{cursor:default}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon [class^\u003d\"fa icon-\"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-note:before{content:\"\\f05a\";color:#19407c}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-tip:before{content:\"\\f0eb\";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-warning:before{content:\"\\f071\";color:#bf6900}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-caution:before{content:\"\\f06d\";color:#bf3400}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-important:before{content:\"\\f06a\";color:#bf0000}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]{display:inline-block;color:#fff!important;background-color:rgba(0,0,0,.8);-webkit-border-radius:100px;border-radius:100px;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-style:normal;font-weight:bold}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value] *{color:#fff!important}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]+b{display:none}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]:after{content:attr(data-value)}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "pre .conum[data-value]{position:relative;top:-.125em}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "b.conum *{color:inherit!important}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ".conum:not([data-value]):empty{display:none}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "dt,th.tableblock,td.content,div.footnote{text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "h1,h2,p,td.content,span.alt{letter-spacing:-.01em}"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "p strong,td.content strong,div.footnote strong{letter-spacing:-.005em}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "p,blockquote,dt,td.content,span.alt{font-size:1.0625rem}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "p{margin-bottom:1.25rem}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock p,.sidebarblock dt,.sidebarblock td.content,p.tableblock{font-size:1em}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content{background-color:#fffef7;border-color:#e0e0dc;-webkit-box-shadow:0 1px 4px #e0e0dc;box-shadow:0 1px 4px #e0e0dc}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ".print-only{display:none!important}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "@media print{@page{margin:1.25cm .75cm}"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "*{-webkit-box-shadow:none!important;box-shadow:none!important;text-shadow:none!important}"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "a{color:inherit!important;text-decoration:underline!important}"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "a.bare,a[href^\u003d\"#\"],a[href^\u003d\"mailto:\"]{text-decoration:none!important}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "a[href^\u003d\"http:\"]:not(.bare):after,a[href^\u003d\"https:\"]:not(.bare):after{content:\"(\" attr(href) \")\";display:inline-block;font-size:.875em;padding-left:.25em}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "abbr[title]:after{content:\" (\" attr(title) \")\"}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "pre,blockquote,tr,img,object,svg{page-break-inside:avoid}"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "thead{display:table-header-group}"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "svg{max-width:100%}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "p,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title{page-break-after:avoid}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "#toc,.sidebarblock,.exampleblock\u003e.content{background:none!important}"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "#toc{border-bottom:1px solid #ddddd8!important;padding-bottom:0!important}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1{padding-bottom:0!important}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1+.sect1{border:0!important}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:first-child{margin-top:1.25rem}"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header{text-align:center}"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header\u003eh1:first-child{border:0!important;margin:2.5em 0 1em 0}"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details{border:0!important;display:block;padding:0!important}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details span:first-child{margin-left:0!important}"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details br{display:block}"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details br+span:before{content:none!important}"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #toc{border:0!important;text-align:left!important;padding:0!important;margin:0!important}"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1\u003eh2{page-break-before:always}"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock code[data-lang]:before{display:block}"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "#footer{background:none!important;padding:0 .9375em}"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "#footer-text{color:rgba(0,0,0,.6)!important;font-size:.9em}"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ".hide-on-print{display:none!important}"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ".print-only{display:block!important}"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ".hide-for-print{display:none!important}"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ".show-for-print{display:inherit!important}}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "-": 406
    }
  },
  {
    "path": "docs/team/bos10.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d Boston Cheong - Project Portfolio for Battleship"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bos10"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "image::bos10.png[width\u003d\"120\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bos10"
        },
        "content": "Hello! My name is Boston, a Year 2 Computer Science student at the National University of Singapore (NUS). This portfolio documents the CS2103T Software Engineering project I have been actively involved in over the past semester. The experience has exposed me to new technologies and helped me to develop relevant skills en route to being a Software Engineer."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d Project Overview : Battleship"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u0027Battleship\u0027 is a desktop game application based on the classic Battleship guessing game. Borrowing the same game rules,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": "the game aims to recreate the adrenaline-filled experience by pitting the player against an intelligent computerized enemy."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bos10"
        },
        "content": "However, instead of using a pencil and paper, players will be introduced with the command-line interface which they"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bos10"
        },
        "content": "will use to play the game."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bos10"
        },
        "content": "My role was to design and implement a method to track and monitor the progress of the game. I managed to achieve this by"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": "introducing the \u0027Statistics\u0027 feature of Battleships. By allowing the player to view their gameplay data, performance and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": " score at any time during the game players are able to plan their moves strategically."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bos10"
        },
        "content": "The following sections will illustrate the feature and its implementation in more detail."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bos10"
        },
        "content": "* *Major enhancement*: added the *ability to view the game statistics*."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bos10"
        },
        "content": "** What it does: By entering the `stats` command, the player will be given a pop-up display that contains information on"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bos10"
        },
        "content": "the number of successful hits, number of misses, number of enemy ships destroyed and even the player\u0027s current shooting"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bos10"
        },
        "content": "accuracy."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Justification: This feature is crucial to user experience in the game as it allows players to track and keep up with the progress of the game. It is also fundamental as a basis for deploying strategies in the gameplay."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Highlight: This feature can be invoked at any point of the game."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bos10"
        },
        "content": "* *Major enhancement*: added the *ability to compare the game statistics between two games.*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bos10"
        },
        "content": "** What it does: Upon winning a game, the game will automatically save the current game statistics into the storage folder"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bos10"
        },
        "content": "of the application. At the same time, the game will perform a comparison with the previous game statistics data (if any)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bos10"
        },
        "content": "and will reflect if there are improvements from the previous game."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Justification: This feature enhances the user experience by giving constructive feedback"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bos10"
        },
        "content": "through an analysis the player\u0027s past game. This encourages player to employ different strategies to be better at the game."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bos10"
        },
        "content": "It also demonstrates the application\u0027s ability to store game data which is fundamental to a future"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bos10"
        },
        "content": "highscore feature in the game."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bos10"
        },
        "content": "* *Minor enhancement*: added the *elapsed time panel to update the duration of the game in real-time*."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bos10"
        },
        "content": "* *Code contributed*: View my https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dbos10[Project Dashboard] and my Github https://github.com/CS2103-AY1819S2-W14-3/main/commits/master?author\u003dbos10[commits]."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bos10"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bos10"
        },
        "content": "*** Actively update issues and provide constructive comments and feedback to the team."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bos10"
        },
        "content": "(Pull requests https://github.com/CS2103-AY1819S2-W14-3/main/pull/147[#147], https://github.com/CS2103-AY1819S2-W14-3/main/pull/365[#365], https://github.com/CS2103-AY1819S2-W14-3/main/pull/375[#375])"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bos10"
        },
        "content": "*** Managed the progress of the Developer Guide by delegating the required tasks and ensuring it is completed on time."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bos10"
        },
        "content": "(Issue https://github.com/CS2103-AY1819S2-W14-3/main/issues/360[#360])"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bos10"
        },
        "content": "*** Overhaul of HistoryCommand into StatsCommand to be used by rest of the team (Pull request https://github.com/CS2103-AY1819S2-W14-3/main/pull/43[#43])"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bos10"
        },
        "content": "*** Restructured Storage component to accommodate saving of statistics data (Pull request https://github.com/CS2103-AY1819S2-W14-3/main/pull/289[#289])"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bos10"
        },
        "content": "*** Introduced an elapsed time functionality in the Graphical User Interface (GUI). (Pull request https://github.com/CS2103-AY1819S2-W14-3/main/pull/108[#108], https://github.com/CS2103-AY1819S2-W14-3/main/pull/123[#123] )"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bos10"
        },
        "content": "*** Wrote tests for the statistics feature and storage component and increased coverage by 5.6%. (Pull Requests https://github.com/CS2103-AY1819S2-W14-3/main/pull/253[#253], https://github.com/CS2103-AY1819S2-W14-3/main/pull/379[#379], https://github.com/CS2103-AY1819S2-W14-3/main/pull/397[#397])"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bos10"
        },
        "content": "*** Added detailed implementation documentation for the statistics feature in the Developer Guide and User Guide, including screenshots"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bos10"
        },
        "content": "and diagrams."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bos10"
        },
        "content": "*** Added detailed implementation documentation for the storage feature in the Developer Guide and User Guide, including diagrams."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bos10"
        },
        "content": "*** Added the command summary table into the Developer Guide."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bos10"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bos10"
        },
        "content": "*** Reviewed team member\u0027s pull requests with suggestions for improvements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bos10"
        },
        "content": "(Pull requests : https://github.com/CS2103-AY1819S2-W14-3/main/pull/365[#365], https://github.com/CS2103-AY1819S2-W14-3/main/pull/375[#375])"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bos10"
        },
        "content": "(Issues https://github.com/CS2103-AY1819S2-W14-3/main/issues/376[#376] (Suggested renaming key components), https://github.com/CS2103-AY1819S2-W14-3/main/issues/377[#377](Organization of DG))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bos10"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bos10"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bos10"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d\u003d Statistics Feature"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bos10"
        },
        "content": "include::../UserGuide.adoc[tag\u003dstats]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bos10"
        },
        "content": "___"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bos10"
        },
        "content": "As the diagram is too large, please refer to \u0027Command Summary\u0027 in the User Guide. (https://github.com/CS2103-AY1819S2-W14-3/main/blob/master/docs/UserGuide.adoc#7-command-summary[link])"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bos10"
        },
        "content": "___"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d\u003d Coming in V2.0"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bos10"
        },
        "content": "include::../UserGuide.adoc[tag\u003dv2stats]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bos10"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bos10"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bos10"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bos10"
        },
        "content": "___"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bos10"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dstats]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bos10"
        },
        "content": "---"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bos10"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dstorage]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bos10"
        },
        "content": "---"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d Documentation of Use Cases"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bos10"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dStatsUseCase]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bos10"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dstatstest]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bos10"
        },
        "content": "---"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bos10"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dsavetest]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bos10"
        },
        "content": "---"
      }
    ],
    "authorContributionMap": {
      "bos10": 119
    }
  },
  {
    "path": "docs/team/erjillsison.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d Erjill Sison - Project Portfolio for Battleship"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d Project Overview"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "The purpose of this document is to showcase the work that I have done for the project named \"*Battleship*\". The project was done as a requirement for the module *CS2103T Software Engineering* in *National University of Singapore*."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "My team and I were presented with an existing code base for a command line interface (CLI) address book application. We were given about 8 weeks to either enhance or morph the address book application to a product of our own choice. We chose to morph it into *Battleship*."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "*Battleship* is a desktop game application based on the classic 2 player guessing game of the same name. The objective of the game is to sink all the opposing player\u0027s ships. The player interacts with the game using a command-line interface (CLI) and feedback is given to the player through the graphical user interface (GUI). The game is written in Java, with the GUI created using JavaFX and has about 10 kLoC."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "My role was to design and write the code for the *map feature* of the game."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "The following sections illustrate the feature in more detail, as well as the relevant sections I have added to the user and developer guides in relation to this feature."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "*Relevant links:* +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Project Respository: https://github.com/CS2103-AY1819S2-W14-3/main[Battleship] +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Project Website: https://cs2103-ay1819s2-w14-3.github.io/main/[Battleship @ github.io] +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "The full User Guide and Developer Guide can be viewed in the project website."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "*Note the following formatting used in this document:*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "[cols\u003d\"1,3\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "a| `MapGrid`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "| A grey highlight indicates that this is either a *command* that can be inputted into the command line or a *class name* or *method name* that can be found in the code."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "a| image::important.png[width\u003d\"50\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "| This symbol indicates important information."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "This section provides the summary of the contributions that I have made to the project."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* *Major enhancement*: Added the *map feature* of the game. This includes the internal data structure of the map, the cells that make up the map and how they are displayed in the UI."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** What it does: The player can initialise the maps to the size they specified using the command `init`. The players can place ships on their own map and shoot the opposing players map. The maps are displayed in the UI and each cell will be represented with different colours depending on its status. The `init` command can be used at any point in time during the game and will reset the board to a clean state."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Highlights: The other features (e.g placing ships) rely heavily on the map. It requires careful planning on the design as the other features must be built on top of it and any changes made later on will affect the other features."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Justification: The maps are crucial to the gameplay as all of the other features are built on top of it."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* *Code contributed*:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003derjillsison[Code extracts]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** https://github.com/CS2103-AY1819S2-W14-3/main/commits/master?author\u003derjillsison[Authored commits]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "*** Managed project release in GitHub: v1.2"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "*** Made changes to the project that do not fall under a specific feature (Pull Requests  https://github.com/CS2103-AY1819S2-W14-3/main/pull/352[\"Change output jar name\" #352], https://github.com/CS2103-AY1819S2-W14-3/main/pull/240[\"Create Model component diagram\" #240], https://github.com/CS2103-AY1819S2-W14-3/main/pull/176[\"Renaming the app header title and icon\" #176])"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "*** Reported bugs not related to my own feature. (Issues https://github.com/CS2103-AY1819S2-W14-3/main/issues/339[#339],  https://github.com/CS2103-AY1819S2-W14-3/main/issues/105[#105], https://github.com/CS2103-AY1819S2-W14-3/main/issues/61[#61])"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "*** Overhauled UI to display the maps. (Pull request https://github.com/CS2103-AY1819S2-W14-3/main/pull/87[#87])"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "*** Restructured UG to make it easier to follow when playing the game. (Pull Request https://github.com/CS2103-AY1819S2-W14-3/main/pull/256[#256])"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "*** Reviewed PRs (with non-trivial review comments). (Pull Requests https://github.com/CS2103-AY1819S2-W14-3/main/pull/53[#53],  https://github.com/CS2103-AY1819S2-W14-3/main/pull/334[#334])"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class. (Issues https://github.com/nus-cs2103-AY1819S2/pe-dry-run/issues/672[#672], https://github.com/nus-cs2103-AY1819S2/pe-dry-run/issues/148[#148])"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "*** Integrated Netlify to the team repo."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "*** Setup auto publishing of documentation."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users. Parts of the User Guide that belong to different sections are separated by a horizontal line._"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "include::../UserGuide.adoc[tag\u003dmap]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "---"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "include::../UserGuide.adoc[tag\u003dupcomingmap]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project. Parts of the Developer Guide that belong to different sections are separated by a horizontal line._"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "Co-authored the Model diagram as shown below."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ".Model Diagram"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "---"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmap]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "---"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d Use Case"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmapuse]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "---"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003d\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmaptest]"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 102
    }
  },
  {
    "path": "docs/team/iwle.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d Ian Wu - Project Portfolio for Battleship"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "Hello there! My name is Ian and I am one of the developers for the Battleship game. The following document is a Project Portfolio Page of my contributions to the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d Project Overview"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "Battleship is the product of a semester-long project, in which my team was tasked with adapting an existing phone addressbook application into an application of our choice. The project was part of a module on software engineering that I read at the National University of Singapore (NUS). The application, Battleship, is a revival of the classic retro game Battleships, where players try to destroy each other’s ships by guessing the positions of their opponent’s battleships."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "In our Battleship application, however, players have the opportunity to use both a Command Line Interface (CLI) and a Graphical User Interface (GUI) to play the game. The GUI was created with JavaFX and the application code was rigorously tested to ensure a high quality of code."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "My role in the team was to design and implement the Ship Management feature. The feature allows players to manage their ships during the game. The Ship Manager feature consists of the commands `put`, `list` and `listTags`. Together, these three commands provide an intuitive way for players to interact with their own ships. The following sections illustrate the feature in more detail, as well as the relevant sections I have added to the user and developer guides in relation to this feature."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "_You can find out more about the Battleship application https://cs2103-ay1819s2-w14-3.github.io/main/[here]_."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "* *Major enhancement*: I added the Ship Management feature of the game."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "** What it does: The Ship Management feature consists of three commands (`put`, `list` and `listTags`) and the classes representing the battleship, coordinates, orientation and player fleet."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "*** The `put` command allows the user to place a ship on the map grid. The user is also given the option of tagging the ships. The ship can be a `cruiser` of length 2, a `destroyer` of length 3, or an `aircraft carrier` of length 5."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "*** The `list` command allows the user to list down the ships that have been placed on the map grid. The user can filter the list by the `name` of the ship or by specific `tags`."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "*** The `listTags` command allows the user to list down all the tags that have been used on ships."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "** Justification: The Ship Manager feature is crucial to the game as it works together with the map grid to allow both the human player and the computer player to interact in a turn-taking game. Behind the scenes, the  feature also implements the `Coordinates`, `Orientation` and `Fleet` classes for other features to work. Furthermore, the feature implements boundary value checking that is used by the Battle Manager and Computerised Enemy feature."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "** Highlights: The other features rely on the functionality provided by the Ship Management feature. It also makes ship management highly intuitive for the player."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "// ** Highlights:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "// *** Implements coordinates and orientation: Behind the scenes, the feature // implements the `Coordinates`, `Orientation` and `Fleet` classes that are used by // the Battle Manager feature and the Computer Enemy feature."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "// *** Implements boundary-value checking of the map grid: The feature // implements code for checking the boundaries of the map grid for a given ship, // which is used by the Battle Manager feature and the Computer Enemy feature // to implement turn-taking in the game."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "* *Code contributed*: Here are my https://github.com/CS2103-AY1819S2-W14-3/main/commits/master?author\u003diwle[code commits] and my https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#search\u003diwle[RepoSense statistics]."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "** Project management: Managed release `v1.3` on GitHub."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "*** Morph from `AddCommand` and `EditCommand` to create `PutShipCommand`: https://github.com/CS2103-AY1819S2-W14-3/main/issues/383[#383]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "*** Morph `ListCommand` to list and filter ships: https://github.com/CS2103-AY1819S2-W14-3/main/issues/384[#384]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "*** Add `ListTagsCommand`: https://github.com/CS2103-AY1819S2-W14-3/main/issues/385[#385]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "*** Contributed actively in issue tracking: https://github.com/CS2103-AY1819S2-W14-3/main/issues/created_by/iwle[issues] created by me."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "*** Contributed actively in forum discussions: https://github.com/nus-cs2103-AY1819S2/forum/issues/created_by/iwle[discussions] raised by me."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "*** Reported bugs and suggestions for other teams: https://bit.ly/2v4qari[bugs] found by me."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "** Tools: Integrated Travis CI Bot and Coveralls Checker with team repository."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d Introduction"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "include::../UserGuide.adoc[tag\u003dintro]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d\u003d Features"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": "include::../UserGuide.adoc[tag\u003dship1]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": ".The coordinates of the `put` command refer to the coordinates of the ship head."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "image::BattleshipHeadExample2.png[width\u003d400, align\u003d\"left\"]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "include::../UserGuide.adoc[tag\u003dship2]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": "//include::../UserGuide.adoc[tag\u003dlist]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": "//include::../UserGuide.adoc[tag\u003dlistTags]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": ".Model diagram that I co-authored with team member Erjill Sison."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"400\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dputShip1]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "// \u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "// *__What are the head coordinates?__*"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": "//"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": "// The head coordinates are the coordinates of the top-most and left-most cell of a ship. // // When coordinates are specified in the `put` command, they refer to the head coordinates of the ship."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": "//image:BattleshipHeadExample.png[width\u003d400, align\u003d\"left\"]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": "//\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dputShip2]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": ".Use case diagram for Ship Management"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": "image::ShipManagementUseCaseDiagram.png[width\u003d400, align\u003d\"left\"]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dputShip3]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": ".Sequence diagram of putting a ship on the map."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iwle"
        },
        "content": "image::PutShipSequenceDiagram.png[align\u003d\"left\"]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iwle"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dlistTags]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iwle"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dlistShips]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iwle"
        },
        "content": ".Sequence diagram of listing ships deployed on the map."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iwle"
        },
        "content": "image::ListShipSequenceDiagram.png[ align\u003d\"left\"]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iwle"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dship_activity]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iwle"
        },
        "content": ".Activity diagram of ship management throughout the game."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iwle"
        },
        "content": "image::ShipManagementActivityDiagram.png[width\u003d600, align\u003d\"left\"]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iwle"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dship_aspect_1]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iwle"
        },
        "content": "// include::../DeveloperGuide.adoc[tag\u003dship_aspect_2]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iwle"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dshiptest]"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iwle"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iwle"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmssListTags]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iwle"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmssListShip]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "iwle": 120
    }
  },
  {
    "path": "docs/team/lucydotc.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "\u003d Lucy Chan - Project Portfolio for Battleship"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "\u003d\u003d Project Overview"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "Greetings! My name is Lucy and I am part of a 5-person team developing a classic game of Battleship."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "For the module CS2103t, we were presented with an existing code base for a command line interface(CLI) address book application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "It was that which we morphed into a game of Battleship."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "Battleship is a desktop game application based on the classic Battleship game."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "The user interacts with it using a CLI and it has a graphical user interface(GUI) created using JavaFX."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "My role was to design and write the code for the `Enemy AI` feature of the game."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "The feature provides the game with an automated and intelligent computerised enemy player for the user to play against"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "in our single-player game."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "The following sections illustrate the feature in more detail, as well as the relevant sections I have added to the user and developer guides in relation to this feature."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "* *Major enhancement*: added *the Enemy AI feature of the game*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "** What it does: It is a fully automated computerised enemy player that can randomly fill its own map and attack the player\u0027s ship with some level of intelligence."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "** Justification: We wanted to make this single-player game as realistic as possible, and so the need for a smarter computerised player that could substitute a human player arose."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "** Highlights: The behaviour of the computerised enemy AI is randomised with eah game session, to provide the player with a unique experience in each game session."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "Furthermore, the enemy\u0027s shooting algorithm is also informed by past shot successes and misses, and follows an algorithm customised to the strategy of the Battleship game."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "** Credits: The algorithm for the enemy shooting references this article heavily: [http://www.datagenetics.com/blog/december32011/index.html[DataGeneticsBattleshipAglo]]."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "* *Code contributed*: [https://github.com/CS2103-AY1819S2-W14-3/main/commits/master?author\u003dlucydotc[Commits]] [https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#search\u003dlucydotc\u0026sort\u003ddisplayName\u0026since\u003d2019-02-28\u0026until\u003d2019-04-15\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026repoSort\u003dtrue[Reposense]]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "*** Actively hit all milestones in time, and used git issue tracker to track tasks."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "*** Actively create and manage issues for myself and my team. [https://github.com/CS2103-AY1819S2-W14-3/main/issues?utf8\u003d%E2%9C%93\u0026q\u003dis%3Aissue+assignee%3Alucydotc+[Issues made]]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "*** N/A - I created a new feature essential to the Battleship game that was not present in the given Address Book codebase."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "*** Wrote the Game Rules section in the User Guide."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "*** Wrote the Enemy AI section in the Developer Guide."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "include::../UserGuide.adoc[tag\u003dintro]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "include::../UserGuide.adoc[tag\u003dgamerules]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003denemyCurrentImplementation]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003denemyInitialiseMap]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003denemyShoot]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003denemyDesign]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "---"
      }
    ],
    "authorContributionMap": {
      "lucydotc": 69
    }
  },
  {
    "path": "docs/team/s-tr.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d Chong Shao Wei - Project Portfolio for Battleship"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d Project: Battleship CLI"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": "Battleship CLI is an implementation of the classic game Battleship."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "As part of a group project in the module https://nus-cs2103-ay1819s2.github.io/cs2103-website/index.html[CS2103] in NUS,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "my group had to morph an existing product, https://github.com/nus-cs2103-AY1819S2/addressbook-level4[`addressbook-level4`],"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "into a new product while keeping the original product\u0027s distinctive feature of being operated through the command-line."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "My group chose to morph it into a command-line based Battleships application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "My role in the team was to design and implement the `Battle` feature, which:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  * Ensures that the human and computer players each take their turns in order,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  * Ensures that the game progresses in a fixed sequence of stages (from setting up the map, to placing ships, to attacking)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "The following sections illustrate the feature in more detail, as well as the relevant sections I have added to the user and developer guides in relation to this feature."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* *Major enhancement*: implemented *the logic for the battle stage of the game* +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  The battle is one of the two important phases of Battleship, along with the placing of ships."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  Via the battle feature, the user will be able to launch attacks at the enemy, and the enemy launch"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  attacks at the user. Crucially, it ensures that the user and enemy take their turns in the correct"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  order."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* *Minor enhancement*: added *the ability to prevent commands from being executed at inappropriate times* +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  Preventing the user from executing certain commands at certain times (e.g. the user should not"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  be placing ships when the battle is already in progress) will ensure the correct progression of"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "  the game, as well as prevent the game from entering an invalid state."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* *Code contributed*: Here are my [https://github.com/CS2103-AY1819S2-W14-3/main/commits/master?author\u003ds-tr[code commits]]."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "*** Removed elements from `addressbook-level4` that were not used in our project"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    (Pull requests"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        https://github.com/CS2103-AY1819S2-W14-3/main/pull/274[#274],"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        https://github.com/CS2103-AY1819S2-W14-3/main/pull/336[#336])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": "*** Refactored the Battle component\u0027s package structure"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    (Pull request"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        https://github.com/CS2103-AY1819S2-W14-3/main/pull/407[#407])"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "s-tr"
        },
        "content": "** Testing:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": "*** Wrote tests for that increased coverage by a total of 6.7%"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    (Pull requests"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        https://github.com/CS2103-AY1819S2-W14-3/main/pull/231[#231],"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        https://github.com/CS2103-AY1819S2-W14-3/main/pull/269[#269],"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        https://github.com/CS2103-AY1819S2-W14-3/main/pull/404[#404])"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "s-tr"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "s-tr"
        },
        "content": "*** Wrote the sections of the User Guide and Developer guide for the Battle Component,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    as reproduced below"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "s-tr"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "s-tr"
        },
        "content": "*** Made summaries of current issues in order to make it easier for"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    the team to coordinate our efforts."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    (Issues"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        https://github.com/CS2103-AY1819S2-W14-3/main/issues/211[#211],"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        https://github.com/CS2103-AY1819S2-W14-3/main/issues/275[#275],"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        https://github.com/CS2103-AY1819S2-W14-3/main/issues/394[#394])"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "s-tr"
        },
        "content": "*** Reported bugs for team W15-3."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "s-tr"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "s-tr"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "s-tr"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "s-tr"
        },
        "content": "include::../UserGuide.adoc[tag\u003dbattle]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "s-tr"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "s-tr"
        },
        "content": "|_Given below is an excerpt of my contributions to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "s-tr"
        },
        "content": " To see my full contribution, please refer to the full Developer Guide._"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "s-tr"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d 2. Design"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "s-tr"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dbattle]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d 3. Implementation"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "s-tr"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dbattle_aspect_1]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "s-tr"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dbattle_aspect_2]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d Appendix C: Use Cases"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "s-tr"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dbeginusecase]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "s-tr"
        },
        "content": "\u003d\u003d Appendix F: Instructions for Manual Testing"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "s-tr"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dbattletest]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "s-tr"
        },
        "content": "---"
      }
    ],
    "authorContributionMap": {
      "s-tr": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.storage.JsonStatisticsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.storage.StatisticsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Battleship ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bos10"
        },
        "content": "        StatisticsStorage statisticsStorage \u003d new JsonStatisticsStorage(userPrefs.getStatisticsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bos10"
        },
        "content": "        storage \u003d new StorageManager(userPrefsStorage, statisticsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bos10"
        },
        "content": "        model \u003d initModelManager(userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bos10"
        },
        "content": "        // you init wiht the STATS data"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bos10"
        },
        "content": "        // then pass it to LogicManager"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private Model initModelManager(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return new ModelManager(new MapGrid(), userPrefs);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty MapGrid\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        logger.info(\"Starting MapGrid \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Battleship ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 5,
      "iwle": 1,
      "bos10": 8,
      "s-tr": 1,
      "-": 155
    }
  },
  {
    "path": "src/main/java/seedu/address/battle/Battle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.battle;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.result.AttackResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Enemy;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * API of the Battle component"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * \u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * The Battle component manages the battle between a human player and an enemy player."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public interface Battle {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Begins the battle."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    void beginGame();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Handles the human player attacking the computer enemy."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @param coord The coordinate that the human attacks"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @return Result of the player attack."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    AttackResult humanPerformAttack(Coordinates coord);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Causes the AI to make its attack(s)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @return a list of the results of the computer\u0027s attacks, in order"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    List\u003cAttackResult\u003e takeComputerTurns();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns the human player."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @return the human player"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    Player getHumanPlayer();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns the computer enemy"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * player."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @return the enemy player"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    Enemy getEnemyPlayer();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/battle/BattleManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.battle;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.result.AttackDefeatedEnemy;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.result.AttackDestroyedShip;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.result.AttackFailed;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.result.AttackHit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.result.AttackMissed;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.result.AttackResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Status;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Enemy;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * BattleManager is the implementor of the Battle interface."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * In this game, we implement the case of one human player and N AI players (here N\u003d1)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class BattleManager implements Battle {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(BattleManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * The human player"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Player humanPlayer;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * The enemy player"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Enemy enemyPlayer;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public BattleManager(Player humanPlayer, Enemy enemyPlayer) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        requireNonNull(humanPlayer);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        requireNonNull(enemyPlayer);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.humanPlayer \u003d humanPlayer;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.enemyPlayer \u003d enemyPlayer;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void beginGame() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        enemyPlayer.prepEnemy();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public AttackResult humanPerformAttack(Coordinates coord) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        requireNonNull(coord);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackResult res \u003d performAttack(humanPlayer, enemyPlayer, coord);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        logger.info(res.formatAsUserAttack());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * A Player attacks another Player."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private AttackResult performAttack(Player attacker, Player target, Coordinates coord) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        logger.info(String.format(AttackResult.ATTACK, attacker.getName(), coord, target.getName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            MapGrid targetMapGrid \u003d target.getMapGrid();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            if (targetMapGrid.attackCell(coord)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                // we hit a ship"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                if (targetMapGrid.getCellStatus(coord) \u003d\u003d Status.DESTROYED) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                    // we destroyed a ship"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                    String hitShipName \u003d targetMapGrid.getShipNameInCell(coord);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                    if (target.getFleet().isAllDestroyed()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                        // all enemy ships destroyed - win!"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                        return new AttackDefeatedEnemy(attacker, target, coord, hitShipName);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                        // one enemy ship destroyed"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                        return new AttackDestroyedShip(attacker, target, coord, hitShipName);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                    // we hit but did not destroy a ship"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                    return new AttackHit(attacker, target, coord);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                // we didn\u0027t hit anything"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                return new AttackMissed(attacker, target, coord);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } catch (IndexOutOfBoundsException ioobe) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            return new AttackFailed(attacker, target, coord, \"coordinates out of bounds\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public List\u003cAttackResult\u003e takeComputerTurns() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // AI takes its turn"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        List\u003cAttackResult\u003e resList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            AttackResult lastRes;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            do {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                // ask enemy for an attack"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                Coordinates enemyAttack \u003d enemyPlayer.enemyShootAt();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                lastRes \u003d performAttack(enemyPlayer, humanPlayer, enemyAttack);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                // update the enemy with its result"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                enemyPlayer.receiveStatus(humanPlayer.getMapGrid().getCellStatus(enemyAttack));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                logger.info(lastRes.formatAsEnemyAttack());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                resList.add(lastRes);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                // update the UI for every enemy attack"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                enemyPlayer.getMapGrid().updateUi();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                // if the Enemy has won, just end it now"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                if (lastRes.isWin()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                // if the Enemy hit, they get to take another turn"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            } while (lastRes.isHit());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            return resList;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            resList.add("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                new AttackFailed(enemyPlayer, humanPlayer, null, ex.getMessage()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            return resList;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns the human player in the game."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public Player getHumanPlayer() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return humanPlayer;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns the computer player."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public Enemy getEnemyPlayer() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return enemyPlayer;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 7,
      "lucydotc": 1,
      "s-tr": 126
    }
  },
  {
    "path": "src/main/java/seedu/address/battle/result/AttackDefeatedEnemy.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.battle.result;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * Represents the result of an attack that defeated an enemy."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class AttackDefeatedEnemy extends AttackResult {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private String destroyedShipName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public AttackDefeatedEnemy(Player attacker, Player target, Coordinates cell, String destroyedShipName) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        super(attacker, target, cell);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.destroyedShipName \u003d destroyedShipName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        succeeds(true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        hitsShip(true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        destroysShip(true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        winsGame(true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public String resultString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return String.format(\"destroyed %s and won the game\", destroyedShipName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/battle/result/AttackDestroyedShip.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.battle.result;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * Represents the result of an attack that hit and destroyed a ship."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class AttackDestroyedShip extends AttackResult {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private String destroyedShipName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public AttackDestroyedShip(Player attacker, Player target, Coordinates cell, String destroyedShipName) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        super(attacker, target, cell);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.destroyedShipName \u003d destroyedShipName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        succeeds(true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        hitsShip(true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        destroysShip(true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        winsGame(false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public String resultString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return String.format(\"destroyed %s\", destroyedShipName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 3,
      "s-tr": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/battle/result/AttackFailed.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.battle.result;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * Represents the result of an invalid attack (e.g. to a non-existent player, or an invalid coordinate)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class AttackFailed extends AttackResult {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private String reason;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public AttackFailed(Player attacker, Player target, Coordinates cell, String reason) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        super(attacker, target, cell);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.reason \u003d reason;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        succeeds(false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        hitsShip(false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        destroysShip(false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        winsGame(false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public String resultString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return String.format(\"failed: %s\", reason);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/battle/result/AttackHit.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.battle.result;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * Represents the result of an attack that hit, but did not destroy, a ship"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class AttackHit extends AttackResult {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public AttackHit(Player attacker, Player target, Coordinates cell) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        super(attacker, target, cell);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        succeeds(true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        hitsShip(true);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        destroysShip(false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        winsGame(false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public String resultString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return String.format(\"hit\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/battle/result/AttackMissed.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.battle.result;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * AttackMissed represents the result of an attack that missed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class AttackMissed extends AttackResult {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public AttackMissed(Player attacker, Player target, Coordinates cell) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        super(attacker, target, cell);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        succeeds(true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        hitsShip(false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        destroysShip(false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        winsGame(false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public String resultString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return \"missed\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/battle/result/AttackResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.battle.result;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Status;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * An AttackResult represents the end result of an attack."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * \u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * Attributes of an {@code AttackResult} should be accessed by the getter methods, e.g. {@code isSuccessful}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * Subclasses of {@code AttackResult} should call the setter methods in their constructor."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * For example, see the code of {@link AttackMissed}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public abstract class AttackResult {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Format string for printing the details of an attack."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String ATTACK \u003d \"Attack by player %s on cell %s of player %s \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    // refactoring the way of handling attributes to enable a declarative style"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private boolean succeeds;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private boolean hitsShip;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private boolean destroysShip;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private boolean winsGame;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Player attacker;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Player target;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Coordinates coords;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    protected AttackResult(Player attacker, Player target, Coordinates coords) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.attacker \u003d attacker;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.target \u003d target;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.coords \u003d coords;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Sets whether this AttackResult represents the result of a successful attack."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @param succeeds whether the attack was a success"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    protected void succeeds(boolean succeeds) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.succeeds \u003d succeeds;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Sets whether this AttackResult represents the result of an attack that hit a ship."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @param hitsShip whether the attack hit an enemy ship"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    protected void hitsShip(boolean hitsShip) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.hitsShip \u003d hitsShip;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Sets whether this AttackResult represents the result of an attack that destroyed an enemy ship"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @param destroysShip whether the attack destroyed an enemy ship"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    protected void destroysShip(boolean destroysShip) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.destroysShip \u003d destroysShip;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Sets whether this AttackResult represents the result of an attack that"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * caused the attacker to win."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @param winsGame whether the attack was a winning attack"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    protected void winsGame(boolean winsGame) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.winsGame \u003d winsGame;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Checks if this AttackResult is of an attack which succeeded"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @return {@code true} if the attack was successful (managed to hit a cell), {@code false otherwise}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public final boolean isSuccessful() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return succeeds;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Checks if this AttackResult is of an attack which hit or miss"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * (guess they never miss, huh?)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @return {@code true} if the attack damaged a ship, {@code false otherwise}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public final boolean isHit() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return hitsShip;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Checks if this AttackResult is of an attack which destroyed a ship"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @return {@code true} if the attack destroyed a ship, {@code false otherwise}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public final boolean isDestroy() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return destroysShip;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Checks if this AttackResult is of a winning attack"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @return {@code true} if the attack caused the attacker to win the game, {@code false otherwise}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public final boolean isWin() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return winsGame;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Gets the {@code Status} of the cell which was hit, if any."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @return the {@code Status} of the hit cell"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @see Status"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return attacker.getMapGrid().getCellStatus(coords);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns a concise String representation of the attack result."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public abstract String resultString();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns a verbose String representation of the attack result."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return String.format(ATTACK, attacker.getName(), coords, target.getName()) + resultString();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Formats this AttackResult as if a human user was the attacker."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public String formatAsUserAttack() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return String.format(\"You attacked %s and \", coords) + resultString();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Formats this AttackResult as if a computer enemy was the attacker."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public String formatAsEnemyAttack() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return String.format(\"Enemy attacked %s and \", coords) + resultString();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lucydotc": 1,
      "s-tr": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/battle/state/BattleState.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.battle.state;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * Enum that represents the state the battle is currently in."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public enum BattleState {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * The battle has not begun yet."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    PRE_BATTLE(\"Preparing for battle...\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * The human player is currently putting their ships."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    PLAYER_PUT_SHIP(\"You are currently placing ships...\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * The enemy player is currently putting their ships."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    ENEMY_PUT_SHIP(\"Enemy is currently placing ships...\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * The human player is currently planning their attack."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    PLAYER_ATTACK(\"You are currently planning attack...\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * The enemy player is currently planning their attack."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    ENEMY_ATTACK(\"Enemy is currently planning attack...\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * The human player has won the game."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    PLAYER_WIN(\"You have won!\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * The enemy player has won the game."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    ENEMY_WIN(\"You have lost...\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * A human-readable description of the state."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Usage: as-is"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    BattleState(String description) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Gets a human-readable description of the battle state."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @return a human-readable description of the battle state"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_BODY_LENGTH_TOO_LONG \u003d \"The battleship cannot fit into the space provided.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Messages() {}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 2,
      "s-tr": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return Integer.hashCode(zeroBasedIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 5,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/AppUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private AppUtil() {}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 1,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CollectionUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private CollectionUtil() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 1,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/ConfigUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private ConfigUtil() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 1,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private FileUtil() {}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @author bos10"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bos10"
        },
        "content": "        content \u003d content + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 2,
      "bos10": 2,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private JsonUtil() {}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 2,
      "-": 141
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private StringUtil() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 1,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/CommandHistory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores the history of commands executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cString\u003e userInputHistory \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cString\u003e unmodifiableUserInputHistory \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(userInputHistory);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public CommandHistory() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory(CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.addAll(commandHistory.userInputHistory);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code userInput} to the list of user input entered."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String userInput) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.add(userInput);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of {@code userInputHistory}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return unmodifiableUserInputHistory;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof CommandHistory)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory other \u003d (CommandHistory) obj;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.equals(other.userInputHistory);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 4,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.beans.value.ObservableBooleanValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * Filters the command text for command keyword"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param commandText"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bos10"
        },
        "content": "    void addToStatistics(String commandText);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Used for the Ui to listen to and trigger changes."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    ObservableBooleanValue getHumanMapObservable();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Used for the Ui to listen to and trigger changes."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    ObservableBooleanValue getEnemyMapObservable();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the player map grid"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    MapGrid getHumanMapGrid();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the enemy map grid"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    MapGrid getEnemyMapGrid();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 16,
      "bos10": 3,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.beans.value.ObservableBooleanValue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.logic.parser.BattleshipParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.statistics.PlayerStatistics;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private final BattleshipParser battleshipParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private final PlayerStatistics statistics;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        battleshipParser \u003d new BattleshipParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.statistics \u003d model.getPlayerStats();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.statistics.setStorage(storage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bos10"
        },
        "content": "        boolean validCommand \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            Command command \u003d battleshipParser.parseCommand(commandText.toLowerCase());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            if (command.canExecuteIn(model.getBattleState())) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bos10"
        },
        "content": "                addToStatistics(commandText);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bos10"
        },
        "content": "                validCommand \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                commandResult \u003d new CommandResult(\"Cannot perform command while \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                    + model.getBattleState().toString().toLowerCase());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bos10"
        },
        "content": "            if (validCommand) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                history.add(commandText);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * keeps track of specific commands for statistics (eg. attack)."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void addToStatistics (String commandText) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String commandKeyword \u003d commandText.split(\" \")[0]; // Take first word"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bos10"
        },
        "content": "        if (commandKeyword.matches(\"attack|shoot|fire|hit  \")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bos10"
        },
        "content": "            int numMovesLeft \u003d statistics.addMove();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bos10"
        },
        "content": "            statistics.addAttack();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bos10"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public ObservableBooleanValue getHumanMapObservable() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return model.getHumanMapObservable();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public ObservableBooleanValue getEnemyMapObservable() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return model.getEnemyMapObservable();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public MapGrid getHumanMapGrid() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return model.getHumanMapGrid();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public MapGrid getEnemyMapGrid() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return model.getEnemyMapGrid();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 20,
      "bos10": 18,
      "s-tr": 5,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AttackCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.EnumSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.result.AttackResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.state.BattleState;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * Attacks a cell on the board."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class AttackCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"attack\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String COMMAND_ALIAS1 \u003d \"shoot\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String COMMAND_ALIAS2 \u003d \"hit\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String COMMAND_ALIAS3 \u003d \"fire\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Attacks the specified cell.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        + \"SQUARE (a letter followed by a positive integer)\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        + \"Example: attack b5\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String MESSAGE_DUPLICATE \u003d \"You have already attacked cell \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String MESSAGE_ANOTHER_TURN \u003d \"Take another turn.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String MESSAGE_TRY_AGAIN \u003d \"Please select another cell to attack.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String MESSAGE_PLAYER_WIN \u003d \"You won. Congratulations!\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bos10"
        },
        "content": "        + \"Start another game with \u0027init\u0027, view your statistics with \u0027stats\u0027, or enter \u0027exit\u0027 to quit.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String MESSAGE_PLAYER_LOSE \u003d \"You lost... maybe you\u0027ll do better next time!\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bos10"
        },
        "content": "        + \"Start another game with \u0027init\u0027, view your statistics with \u0027stats\u0027 or enter \u0027exit\u0027 to quit.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Coordinates coord;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public AttackCommand(Coordinates coord) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        requireNonNull(coord);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.coord \u003d coord;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        setPermissibleStates(EnumSet.of(BattleState.PLAYER_ATTACK));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Executes an attack command on a cell."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * If the player hits a ship, they can take another turn. If not, then"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * the AI takes their turn(s) immediately, then the player takes their turn."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assert canExecuteIn(model.getBattleState());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Player human \u003d model.getHumanPlayer();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackResult res;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // check if the coordinate is already hit, prevent duplicate attacks"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        if (human.addToTargetHistory(coord)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bos10"
        },
        "content": "            res \u003d model.getBattle().humanPerformAttack(coord);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE + coord);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bos10"
        },
        "content": "        model.getPlayerStats().addResultToStats(res);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model.updateUi();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        if (!res.isSuccessful()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            // the player didn\u0027t hit a cell successfully"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            return new CommandResult(res.formatAsUserAttack() + \"\\n\" + MESSAGE_TRY_AGAIN);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } else if (res.isHit()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            if (res.isWin()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                // Player wins!"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                model.setBattleState(BattleState.PLAYER_WIN);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bos10"
        },
        "content": "                return new CommandResult(MESSAGE_PLAYER_WIN + \"\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bos10"
        },
        "content": "                    + new SaveCommand().execute(model, history).getFeedbackToUser());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                return new CommandResult(res.formatAsUserAttack() + \"\\n\" + MESSAGE_ANOTHER_TURN);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            // immediately, AI takes its turn"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            model.setBattleState(BattleState.ENEMY_ATTACK);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            List\u003cAttackResult\u003e enemyResList \u003d model.getBattle().takeComputerTurns();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            StringBuilder resultBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            resultBuilder.append(res.formatAsUserAttack());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            for (AttackResult enemyRes: enemyResList) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                resultBuilder.append(\"\\n\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                resultBuilder.append(enemyRes.formatAsEnemyAttack());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            if (enemyResList.get(enemyResList.size() - 1).isWin()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                // Oh no... the enemy won"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                model.setBattleState(BattleState.ENEMY_WIN);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                resultBuilder.append(\"\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                resultBuilder.append(MESSAGE_PLAYER_LOSE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                model.setBattleState(BattleState.PLAYER_ATTACK);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            return new CommandResult(resultBuilder.toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        if (other instanceof AttackCommand) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            AttackCommand o \u003d (AttackCommand) other;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            return (this \u003d\u003d o) || (this.coord.equals(o.coord));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 105,
      "bos10": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/BeginCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.EnumSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.state.BattleState;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * Ends the ship-placing phase and begins the attacking phase."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class BeginCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"begin\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String COMMAND_ALIAS1 \u003d \"start\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        + \": Finishes placing ships and starts the game..\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String MESSAGE_BEGIN_SUCCESS \u003d \"Game has started\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String MESSAGE_NO_SHIPS \u003d \"Unable to start battle. Place one or more ships first.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public BeginCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        setPermissibleStates(EnumSet.of(BattleState.PLAYER_PUT_SHIP));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assert canExecuteIn(model.getBattleState());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        if (model.getHumanPlayer().getFleetContents().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            throw new CommandException(MESSAGE_NO_SHIPS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            model.setBattleState(BattleState.ENEMY_PUT_SHIP);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            model.getBattle().beginGame();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            model.setBattleState(BattleState.PLAYER_ATTACK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            return new CommandResult(MESSAGE_BEGIN_SUCCESS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.EnumSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.state.BattleState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * The states that this command can be executed in."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Set\u003cBattleState\u003e permissibleStates \u003d EnumSet.allOf(BattleState.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory history) throws CommandException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Changes the permissible states of the command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    protected final void setPermissibleStates(Set\u003cBattleState\u003e permissibleStates) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        requireNonNull(permissibleStates);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.permissibleStates \u003d permissibleStates;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Checks if this command can be executed in a certain state."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003cbr\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * By default, commands can be run in all states. Those commands which are not"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * should set the permissible states using \u003ccode\u003esetPermissibleStates()\u003c/code\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * inside the constructor."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003cbr\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Before calling execute() using a \u003ccode\u003eModel\u003c/code\u003e, one must call this"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * method on the BattleState stored in it."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public final boolean canExecuteIn(BattleState battleState) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return permissibleStates.contains(battleState);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 31,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Battleship as requested ...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/InitialiseMapCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.state.BattleState;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Initialise map to size input by user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class InitialiseMapCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"init\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"i\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final String COMMAND_ALIAS1 \u003d \"initialise\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final int MAXIMUM_MAP_SIZE \u003d 10;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final int MINIMUM_MAP_SIZE \u003d 6;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Initialise the map to specified size.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            + String.format(\"MAPSIZE (must be between %d to %d, inclusive)\\n\", MINIMUM_MAP_SIZE, MAXIMUM_MAP_SIZE)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            + \"8 \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Map initialised to size: %d\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final String MESSAGE_INVALID_MAP_SIZE \u003d \"Map size must be between %d to %d, inclusive.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private final int mapSize;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Initialise map command"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public InitialiseMapCommand(int size) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        mapSize \u003d size;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assert canExecuteIn(model.getBattleState());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        if (mapSize \u003e MAXIMUM_MAP_SIZE || mapSize \u003c MINIMUM_MAP_SIZE) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_MAP_SIZE, MINIMUM_MAP_SIZE, MAXIMUM_MAP_SIZE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell[][] cellGrid \u003d initialise2dArray(mapSize);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        model.getHumanMapGrid().initialise(cellGrid);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        model.getEnemyMapGrid().initialise(cellGrid);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        logger.info(\"HumanPlayer and EnemyPlayer maps initialised\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        model.getHumanPlayer().resetFleet(mapSize);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        model.getEnemyPlayer().resetFleet(mapSize);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        logger.info(\"HumanPlayer and EnemyPlayer fleet reset.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        model.getHumanPlayer().resetTargetHistory();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        model.getEnemyPlayer().resetTargetHistory();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        logger.info(\"HumanPlayer and EnemyPlayer target history reset\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model.setBattleState(BattleState.PLAYER_PUT_SHIP);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        logger.info(\"Battle state reset to PLAYER_PUT_SHIP\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bos10"
        },
        "content": "        model.getPlayerStats().resetData();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logger.info(\"Statistics Data Refreshed\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        logger.info(\"--------------------------------\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, mapSize));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Create a 2D array of {@Cell} which will be used to initialise the map."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private Cell[][] initialise2dArray(int mapSize) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell[][] cellGrid \u003d new Cell[mapSize][mapSize];"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        for (int i \u003d 0; i \u003c mapSize; i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            for (int j \u003d 0; j \u003c mapSize; j++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                cellGrid[i][j] \u003d new Cell(new Coordinates(i, j));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return cellGrid;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                || (other instanceof InitialiseMapCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 94,
      "s-tr": 4,
      "bos10": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.EnumSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.state.BattleState;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.player.Fleet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Lists ships of certain types, by certain tags, or both."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e optionalTagSet;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Optional\u003cSet\u003cName\u003e\u003e optionalNameSet;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public ListCommand(Optional\u003cSet\u003cName\u003e\u003e optionalNameSet, Optional\u003cSet\u003cTag\u003e\u003e optionalTagSet) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.optionalTagSet \u003d optionalTagSet;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.optionalNameSet \u003d optionalNameSet;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        setPermissibleStates(EnumSet.of("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                BattleState.PLAYER_PUT_SHIP,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                BattleState.ENEMY_PUT_SHIP,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                BattleState.PLAYER_ATTACK,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                BattleState.ENEMY_ATTACK));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Lists ships according to the prefixes specified by the user, which have"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * been parsed by {@code ListCommandParser}. There are four ways in which the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * ships can be listed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * 1. List all ships when no prefixes are provided."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * 2. List ships with certain tags when tags are provided."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * 3. List certain ships when names are provided."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * 4. List certain ships with certain tags when names and tags are provided."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * The behaviour for (1) is such that there is no redundant checking against"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * the fleet for an empty set of names or tags. The fleet is simply returned in"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * such a case."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return {@code CommandResult} that contains list of ships."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assert canExecuteIn(model.getBattleState());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet fleet \u003d model.getHumanPlayer().getFleet();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (fleet.getDeployedFleet().size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return new CommandResult(\"No ships put down.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Set\u003cFleet.FleetEntry\u003e fleetResult \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (!optionalTagSet.isPresent() \u0026\u0026 !optionalNameSet.isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "            // list all battleships"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (int i \u003d 0; i \u003c fleet.getDeployedFleet().size(); i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "                builder.append(fleet.getDeployedFleet().get(i)).append(\"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return new CommandResult(builder.toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else if (optionalNameSet.isPresent() \u0026\u0026 optionalTagSet.isPresent()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "            fleetResult.addAll(fleet.getDeployedFleet().stream()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .filter(fleetEntry -\u003e optionalNameSet.get().contains(fleetEntry.getBattleship().getName()))"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .filter(fleetEntry -\u003e fleetEntry.getBattleship().getTags().containsAll(optionalTagSet.get()))"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else if (optionalNameSet.isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": "            fleetResult.addAll(fleet.getByNames(optionalNameSet.get()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "            fleetResult.addAll(fleet.getByTags(optionalTagSet.get()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (Fleet.FleetEntry fleetEntry : fleetResult) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": "            builder.append(fleetEntry).append(\"\\n\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (fleetResult.isEmpty()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return new CommandResult(\"There are no results.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return new CommandResult(builder.toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Getter method for {@code optionalNameSet}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return {@code this.optionalNameSet}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Optional\u003cSet\u003cName\u003e\u003e getOptionalNameSet() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return optionalNameSet;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Getter method for {@code optionalTagSet}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return {@code this.optionalTagSet}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Optional\u003cSet\u003cTag\u003e\u003e getOptionalTagSet() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return optionalTagSet;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks equality of two ListCommand objects by comparing the respective"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * {@code optionalNameSet} and {@code optionalTagSet}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param other any object."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return boolean of whether the objects are equal."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iwle"
        },
        "content": "                || (other instanceof ListCommand) // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \u0026\u0026 this.getOptionalNameSet().equals(((ListCommand) other).getOptionalNameSet())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \u0026\u0026 this.getOptionalTagSet().equals(((ListCommand) other).getOptionalTagSet());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 102,
      "s-tr": 8,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListTagsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.EnumSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.state.BattleState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Lists all the tags that have been used by ships deployed in the game."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class ListTagsCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listTags\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"List all tags: \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String TAGS_NOT_FOUND \u003d \"no tags found\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String TAGS_FOUND \u003d \" tags found\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Set\u003cTag\u003e tagSet;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public ListTagsCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        setPermissibleStates(EnumSet.of("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            BattleState.PLAYER_PUT_SHIP,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            BattleState.ENEMY_PUT_SHIP,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            BattleState.PLAYER_ATTACK,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            BattleState.ENEMY_ATTACK));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Lists all the tags that have been used by ships deployed in the game."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return {@code CommandResult} which contains list of tags."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assert canExecuteIn(model.getBattleState());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bos10"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "        tagSet \u003d model.getHumanPlayer().getFleet().getAllTags();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bos10"
        },
        "content": "        if (tagSet.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "            stringBuilder.append(TAGS_NOT_FOUND);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bos10"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "            int tagSetSize \u003d tagSet.size();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "            int counter \u003d 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "            stringBuilder.append(tagSetSize).append(TAGS_FOUND);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (Tag tag : tagSet) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "                stringBuilder.append(tag.getTagName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "                if (counter \u003c tagSetSize) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    stringBuilder.append(\", \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bos10"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + stringBuilder.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Getter method for {@code this.tagSet}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return {@code this.tagSet}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Set\u003cTag\u003e getTagSet() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks equality of two ListTagsCommand objects by comparing both {@code tagSet}s."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * If the other object is not a {@code ListTagsCommand} object then they are not"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * equal."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param other any object."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return boolean of whether the objects are equal."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (!(other instanceof ListTagsCommand)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": "        ListTagsCommand ltc \u003d (ListTagsCommand) other;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return tagSet.equals(ltc.getTagSet());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 78,
      "s-tr": 13,
      "bos10": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PutShipCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COORDINATES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORIENTATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.EnumSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.state.BattleState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.BoundaryValueChecker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.exceptions.BoundaryValueException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Puts ship in an existing cell on the map."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class PutShipCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"put\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"p\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Puts ship in cell that is identified \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"by the row number and orientation (vertical/horizontal) provided by the user. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"[\" + PREFIX_COORDINATES + \"COORDINATES] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"[\" + PREFIX_ORIENTATION + \"ORIENTATION]\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + PREFIX_NAME + \"Destroyer \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + PREFIX_COORDINATES + \"c1 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + PREFIX_ORIENTATION + \"vertical\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Put ship in cell: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_OUT_OF_BOUNDS \u003d \"Out of bounds\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Coordinates coordinates;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Battleship battleship;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Orientation orientation;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Default constructor method for ListTagsCommand."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param coordinates of the cell in the map grid."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param battleship battleship to place in the cell in the map grid."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param orientation orientation of the battleship in the map grid."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public PutShipCommand(Coordinates coordinates, Battleship battleship, Orientation orientation) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "        requireNonNull(coordinates);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "        requireNonNull(battleship);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "        requireNonNull(orientation);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.coordinates \u003d coordinates;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.battleship \u003d battleship;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.orientation \u003d orientation;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        setPermissibleStates(EnumSet.of("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            BattleState.PLAYER_PUT_SHIP));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks if a ship can be put on a specific cell on the map grid and sends"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * feedback to the user."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return {@code CommandResult} which contains information about the battleship,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * coordinates and orientation that has been put on the map grid."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assert canExecuteIn(model.getBattleState());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "        MapGrid mapGrid \u003d model.getHumanMapGrid();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": "        BoundaryValueChecker boundaryValueChecker \u003d new BoundaryValueChecker("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": "                mapGrid,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "                battleship,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": "                coordinates,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": "                orientation);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (!model.isEnoughBattleships(battleship, 1)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throw new CommandException(\"Not enough battleships.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": "                boundaryValueChecker.performChecks();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": "                mapGrid.putShip(battleship, coordinates, orientation);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": "                model.deployBattleship(battleship, coordinates, orientation);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException | NumberFormatException nfe) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iwle"
        },
        "content": "                throw new CommandException(MESSAGE_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iwle"
        },
        "content": "            } catch (BoundaryValueException obe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iwle"
        },
        "content": "                throw new CommandException(obe.getMessage());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.updateUi(); // update the map grid cells"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iwle"
        },
        "content": "        String battleshipStatus \u003d String.format(\"%s at %s in %s orientation\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iwle"
        },
        "content": "                battleship.getName(),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iwle"
        },
        "content": "                coordinates,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iwle"
        },
        "content": "                orientation);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iwle"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iwle"
        },
        "content": "        stringBuilder.append(battleshipStatus)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(\"\\n\\nNumber of aircraft carriers left: \")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(model.getFleet().getNumAircraftCarrierLeft())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(\"\\nNumber of cruisers left: \")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(model.getFleet().getNumCruiserLeft())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(\"\\nNumber of destroyers left: \")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(model.getFleet().getNumDestroyerLeft());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, stringBuilder.toString()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks equality of two PutShipCommand objects by comparing the respective"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * {@code battleship}, {@code coordinates} and {@code orientation}. If the other"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * object is not a {@code PutShipCommand} object, then they are not equal."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param other any object."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return boolean of whether the objects are equal."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (!(other instanceof PutShipCommand)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iwle"
        },
        "content": "        PutShipCommand e \u003d (PutShipCommand) other;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return battleship.equals(e.battleship)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \u0026\u0026 coordinates.equals(e.coordinates)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \u0026\u0026 orientation.equals(e.orientation);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "iwle": 140,
      "s-tr": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SaveCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bos10"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.statistics.PlayerStatistics;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bos10"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bos10"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bos10"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bos10"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bos10"
        },
        "content": "public class SaveCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"save\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public static final String MESSAGE_SUCCESS_BETTER \u003d \"Statistics Analysis : Your accuracy improved!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public static final String MESSAGE_SUCCESS_WORST \u003d \"Statistics Analysis : Your accuracy was better last round!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public static final String MESSAGE_SUCCESS_SAME \u003d \"Statistics Analysis : Your accuracy is the same!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(SaveCommand.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private static PlayerStatistics playerStats;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private Optional\u003cPlayerStatistics\u003e statisticsDataOptional;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public double getAccuracy(int hitCount, int missCount) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bos10"
        },
        "content": "        if (hitCount \u003d\u003d 0 \u0026\u0026 missCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bos10"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bos10"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return (double) hitCount / (double) (hitCount + missCount);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bos10"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.playerStats \u003d model.getPlayerStats();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.storage \u003d this.playerStats.getStorage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bos10"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bos10"
        },
        "content": "            statisticsDataOptional \u003d (this.storage).readStatisticsData();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bos10"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bos10"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Data will be reinitialized.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bos10"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bos10"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Data will be reinitialized.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bos10"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bos10"
        },
        "content": "        // Retrieve previous statistics data (if any)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bos10"
        },
        "content": "        int pastHit \u003d (statisticsDataOptional.orElse(new PlayerStatistics())).getHitCount();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bos10"
        },
        "content": "        int pastMiss \u003d (statisticsDataOptional.orElse(new PlayerStatistics())).getMissCount();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bos10"
        },
        "content": "        double pastAccuracy \u003d getAccuracy(pastHit, pastMiss);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bos10"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bos10"
        },
        "content": "            this.playerStats.saveToStorage(this.playerStats);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bos10"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bos10"
        },
        "content": "            logger.warning(\"Problem while saving to filepath. Data will be reinitialized.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bos10"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return compareData(pastAccuracy, (this.playerStats).getAccuracy());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * Compares the previous and current data."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param pastAccuracy"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param currentAccuracy"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bos10"
        },
        "content": "    CommandResult compareData(double pastAccuracy, double currentAccuracy) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bos10"
        },
        "content": "        if (pastAccuracy \u003c currentAccuracy) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bos10"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_BETTER"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bos10"
        },
        "content": "                    + \u0027\\n\u0027"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bos10"
        },
        "content": "                    + String.format(\"Current Game : %.1f%%\", this.playerStats.getAccuracy() * 100)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bos10"
        },
        "content": "                    + \u0027\\n\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bos10"
        },
        "content": "                    + String.format(\"Previous Game : %.1f%%\", pastAccuracy * 100));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bos10"
        },
        "content": "        } else if (pastAccuracy \u003d\u003d this.playerStats.getAccuracy()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bos10"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_SAME"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bos10"
        },
        "content": "                    + \u0027\\n\u0027"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bos10"
        },
        "content": "                    + String.format(\"Current Game : %.1f\", pastAccuracy * 100));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bos10"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bos10"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_WORST"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bos10"
        },
        "content": "                    + \u0027\\n\u0027"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bos10"
        },
        "content": "                    + String.format(\"Current Game : %.1f%%\", this.playerStats.getAccuracy() * 100)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bos10"
        },
        "content": "                    + \u0027\\n\u0027"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bos10"
        },
        "content": "                    + String.format(\"Previous Game : %.1f%%\", pastAccuracy * 100));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bos10"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bos10"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/StatsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.statistics.PlayerStatistics;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.ui.StatisticView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": " * @author bos10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": "public class StatsCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stats\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"CURRENT STATISTICS:\\n%1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bos10"
        },
        "content": "        ArrayList\u003cString\u003e outputStatistics \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bos10"
        },
        "content": "        PlayerStatistics playerStats \u003d model.getPlayerStats();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String attacksMade \u003d \"Attacks Made : \" + playerStats.getAttacksMade();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String movesMade \u003d \"Moves Made : \" + playerStats.getMovesMade();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String hitCount \u003d \"Successful Hit : \" + playerStats.getHitCount();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String missCount \u003d \"Misses : \" + playerStats.getMissCount();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String shipsDestroyed \u003d \"Enemy Ships Destroyed : \" + playerStats.getEnemyShipsDestroyed();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String accuracy \u003d \"Accuracy : \" + (int) (playerStats.getAccuracy() * 100) + \"%\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bos10"
        },
        "content": "        // Group data together in a list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bos10"
        },
        "content": "        outputStatistics.add(movesMade);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bos10"
        },
        "content": "        outputStatistics.add(attacksMade);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bos10"
        },
        "content": "        outputStatistics.add(hitCount);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bos10"
        },
        "content": "        outputStatistics.add(missCount);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bos10"
        },
        "content": "        outputStatistics.add(shipsDestroyed);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bos10"
        },
        "content": "        outputStatistics.add(accuracy);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bos10"
        },
        "content": "        // Create a pop-up display"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bos10"
        },
        "content": "        new StatisticView(new Stage(), playerStats.generateData()).show();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", outputStatistics)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 29,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AttackCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.commands.AttackCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * Parses attack commands."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class AttackCommandParser implements Parser\u003cAttackCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String MESSAGE_INVALID_SQUARE \u003d \"%s is not a valid square.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        + \"A square must be written as a letter followed by a positive integer.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public AttackCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        String uInput \u003d userInput.trim();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        if (uInput.isEmpty()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AttackCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } else if (Coordinates.isValidCoordinates(uInput)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            return new AttackCommand(new Coordinates(uInput));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                String.format(MESSAGE_INVALID_SQUARE, uInput));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/BattleshipParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.commands.AttackCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.commands.BeginCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.logic.commands.InitialiseMapCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.logic.commands.ListTagsCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.commands.PutShipCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.logic.commands.SaveCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class BattleshipParser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "        case ListTagsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return new ListTagsCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bos10"
        },
        "content": "        case StatsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bos10"
        },
        "content": "            return new StatsCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bos10"
        },
        "content": "        case SaveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bos10"
        },
        "content": "            return new SaveCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        case InitialiseMapCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        case InitialiseMapCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        case InitialiseMapCommand.COMMAND_ALIAS1:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            return new InitialiseMapCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "        case PutShipCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": "        case PutShipCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return new PutShipCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        case AttackCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        case AttackCommand.COMMAND_ALIAS1:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        case AttackCommand.COMMAND_ALIAS2:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        case AttackCommand.COMMAND_ALIAS3:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            return new AttackCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        case BeginCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        case BeginCommand.COMMAND_ALIAS1:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            return new BeginCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 8,
      "iwle": 9,
      "s-tr": 11,
      "bos10": 6,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final Prefix PREFIX_COORDINATES \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final Prefix PREFIX_ORIENTATION \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private CliSyntax() {}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 2,
      "s-tr": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/InitialiseMapCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.logic.commands.InitialiseMapCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Parses input arguments and creates a new InitialiseMapCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class InitialiseMapCommandParser implements Parser\u003cInitialiseMapCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the InitialiseMapCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * and returns an InitialiseMapCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public InitialiseMapCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        int mapSize;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            mapSize \u003d ParserUtil.parseMapSize(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                    InitialiseMapCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return new InitialiseMapCommand(mapSize);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 32,
      "s-tr": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * Parses input arguments and creates a new ListCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e tagSet \u003d Optional.empty();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Optional\u003cSet\u003cName\u003e\u003e nameSet \u003d Optional.empty();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * and returns an ListCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG, PREFIX_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "            tagSet \u003d Optional.of(ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_NAME)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "            nameSet \u003d Optional.of(ParserUtil.parseNames(argMultimap.getAllValues(PREFIX_NAME)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return (new ListCommand(this.nameSet, this.tagSet));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 49,
      "s-tr": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.AircraftCarrierBattleship;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.CruiserBattleship;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.DestroyerBattleship;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static final String MESSAGE_INVALID_SIZE \u003d \"Map size is not a non-zero unsigned integer\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private ParserUtil() {}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Parses mapSize into an int and returns it."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @param mapSize"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @throws ParseException if the specified mapSize is invalid (not non-zero unsigned integer)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public static int parseMapSize(String mapSize) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        String trimmedSize \u003d mapSize.trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedSize)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_SIZE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return Integer.parseInt(trimmedSize);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static Set\u003cName\u003e parseNames(Collection\u003cString\u003e names) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": "        requireNonNull(names);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "        final Set\u003cName\u003e nameSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (String name : names) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": "            nameSet.add(parseName(name));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return nameSet;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Parses a {@code Name name} into a {@code Battleship}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @throws ParseException if the given (@code name} is invalid."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static Battleship parseBattleship(Name name, Set\u003cTag\u003e tagSet) throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (name.fullName.toLowerCase().equals(\"destroyer\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": "            battleship \u003d new DestroyerBattleship(tagSet);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else if (name.fullName.toLowerCase().equals(\"cruiser\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iwle"
        },
        "content": "            battleship \u003d new CruiserBattleship(tagSet);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else if (name.fullName.toLowerCase().equals(\"aircraft carrier\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iwle"
        },
        "content": "            battleship \u003d new AircraftCarrierBattleship(tagSet);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throw new ParseException(Battleship.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return battleship;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Parses a {@code String coordinate} into a {@code Coordinate}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @throws ParseException if the given {@code coordinate} is invalid."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static Coordinates parseCoordinates(String coordinate) throws ParseException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iwle"
        },
        "content": "        requireNonNull(coordinate);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iwle"
        },
        "content": "        String trimmedCoordinate \u003d coordinate.trim();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (!Coordinates.isValidCoordinates(trimmedCoordinate)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iwle"
        },
        "content": "            || !StringUtil.isNonZeroUnsignedInteger(trimmedCoordinate.substring(1))) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throw new ParseException(Coordinates.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return new Coordinates(trimmedCoordinate);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Parses a {@code String orientation} into a {@code Orientation}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static Orientation parseOrientation(String orientation) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iwle"
        },
        "content": "        requireNonNull(orientation);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iwle"
        },
        "content": "        String trimmedOrientation \u003d orientation.trim();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (!Orientation.isValidOrientation(trimmedOrientation)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throw new ParseException(Orientation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return new Orientation(trimmedOrientation);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 14,
      "iwle": 55,
      "s-tr": 2,
      "-": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/PutShipCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COORDINATES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORIENTATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.commands.PutShipCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Parses input arguments and creates a new PutShipCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class PutShipCommandParser implements Parser\u003cPutShipCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the PutShipCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * and returns an PutShipCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public PutShipCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_COORDINATES, PREFIX_ORIENTATION, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_COORDINATES, PREFIX_ORIENTATION)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, PutShipCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Coordinates coordinates \u003d ParserUtil.parseCoordinates(argMultimap.getValue(PREFIX_COORDINATES).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d ParserUtil.parseOrientation(argMultimap.getValue(PREFIX_ORIENTATION).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "            Set\u003cTag\u003e tagSet \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "            // Default 1 by 1 battleship"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "            Battleship battleship \u003d ParserUtil.parseBattleship(name, tagSet);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return new PutShipCommand(coordinates, ParserUtil.parseBattleship(name, tagSet), orientation);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return new PutShipCommand(coordinates, ParserUtil.parseBattleship(name, new HashSet\u003c\u003e()), orientation);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/BoundaryValueChecker.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Status;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.exceptions.BoundaryValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Represents a boundary value checker for battleships."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class BoundaryValueChecker {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Put ship in cell: %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_BATTLESHIP_PRESENT \u003d \"There is already a ship on the coordinate.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_BATTLESHIP_PRESENT_BODY_VERTICAL \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "            \"There is already a ship along the vertical coordinates\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_BATTLESHIP_PRESENT_BODY_HORIZONTAL \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "            \"There is already a ship along the horizontal coordinates\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_OUT_OF_BOUNDS \u003d \"The ship falls out of bounds.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(BoundaryValueChecker.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final MapGrid mapGrid;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Battleship battleship;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Coordinates coordinates;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Orientation orientation;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Default constructor method."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param mapGrid map grid of the game."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param battleship battleship to be put on the map grid."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param coordinates coordinates of the battleship on the map grid."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param orientation orientation of the battleship on the map grid."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public BoundaryValueChecker(MapGrid mapGrid, Battleship battleship,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "                                Coordinates coordinates, Orientation orientation) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.mapGrid \u003d mapGrid;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.battleship \u003d battleship;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.coordinates \u003d coordinates;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.orientation \u003d orientation;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Performs all the relevant checks."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @throws CommandException when a check fails"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void performChecks() throws BoundaryValueException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (!this.isHeadWithinBounds()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throw new BoundaryValueException(MESSAGE_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else if (this.orientation.isHorizontal()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "            if (!this.isBattleshipAbsent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "                logger.info(\"BATTLESHIP ABSENT. Throwing BoundaryValueException.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": "                throw new BoundaryValueException(MESSAGE_BATTLESHIP_PRESENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "            } else if (!this.isBodyWithinBounds(coordinates.getColIndex())) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": "                logger.info(\"BATTLESHIP NOT WITHIN HORIZONTAL BOUNDS. Throwing BoundaryValueException.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "                throw new BoundaryValueException(Messages.MESSAGE_BODY_LENGTH_TOO_LONG);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": "            } else if (!this.isClear(orientation)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "                logger.info(\"HORIZONTAL BOUNDS NOT CLEAR. Throwing BoundaryValueException.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": "                throw new BoundaryValueException(MESSAGE_BATTLESHIP_PRESENT_BODY_HORIZONTAL);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else if (this.orientation.isVertical()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": "            if (!this.isBattleshipAbsent()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": "                logger.info(\"BATTLESHIP ABSENT. Throwing BoundaryValueException.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "                throw new BoundaryValueException(MESSAGE_BATTLESHIP_PRESENT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": "            } else if (!this.isBodyWithinBounds(coordinates.getRowIndex())) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "                logger.info(\"BATTLESHIP NOT WITHIN VERTICAL BOUNDS. Throwing BoundaryValueException.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "                throw new BoundaryValueException(Messages.MESSAGE_BODY_LENGTH_TOO_LONG);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": "            } else if (!this.isClear(orientation)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": "                logger.info(\"BATTLESHIP NOT WITHIN VERTICAL BOUNDS. Throwing BoundaryValueException.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "                throw new BoundaryValueException(MESSAGE_BATTLESHIP_PRESENT_BODY_VERTICAL);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks if the head of a battleship is within bounds."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return boolean of whether the battleship head falls within bounds."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isHeadWithinBounds() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Index rowIndex \u003d coordinates.getRowIndex();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Index colIndex \u003d coordinates.getColIndex();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if ((rowIndex.getZeroBased() \u003e\u003d mapGrid.getMapSize())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": "                || colIndex.getZeroBased() \u003e\u003d mapGrid.getMapSize()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks if the body of a battleship is within bounds."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return boolean of whether the battleship body falls within bounds."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isBodyWithinBounds(Index index) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (index.getZeroBased() + battleship.getLength() \u003e mapGrid.getMapSize()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks if there is no battleship on the grids."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return boolean of whether the battleship head is absent."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isBattleshipAbsent() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Status status \u003d mapGrid.getCellStatus(coordinates);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (status \u003d\u003d Status.EMPTY) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Check if the body of the battleship does not collide into another battleship."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return boolean of whether battleship body collides into another battleship."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isClear(Orientation orientation) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int row \u003d coordinates.getRowIndex().getZeroBased();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int col \u003d coordinates.getColIndex().getZeroBased();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (int i \u003d 1; i \u003c battleship.getLength(); i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iwle"
        },
        "content": "            if (orientation.isHorizontal()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iwle"
        },
        "content": "                col++;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iwle"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iwle"
        },
        "content": "                row++;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iwle"
        },
        "content": "            Coordinates cellCoords \u003d new Coordinates(row, col);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iwle"
        },
        "content": "            if (mapGrid.getCellStatus(cellCoords) \u003d\u003d Status.SHIP) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iwle"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 153
    }
  },
  {
    "path": "src/main/java/seedu/address/model/MapGrid.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.beans.property.BooleanProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.beans.property.SimpleBooleanProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.beans.value.ObservableBooleanValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Status;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Represents a mapGrid of a player. A {@code MapGrid} acts as a container of {@Cell} objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class MapGrid {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private Cell[][] cellGrid;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private int size;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private BooleanProperty uiUpdateSwitch \u003d new SimpleBooleanProperty();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public MapGrid() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.size \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        cellGrid \u003d new Cell[0][0];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public MapGrid(MapGrid mapGrid) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        size \u003d mapGrid.size;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        cellGrid \u003d new Cell[mapGrid.getMapSize()][mapGrid.getMapSize()];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        copy2dArray(cellGrid, mapGrid.cellGrid);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    // 2D map grid operations"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Initialises the 2D Map from the given 2D Cell array"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @param map to initialise the map from."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void initialise(Cell[][] map) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.size \u003d map.length;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        cellGrid \u003d new Cell[size][size];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        copy2dArray(cellGrid, map);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        updateUi();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns a copy of the MapGrid in a 2D array format."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Any changes done to the copy will not affect the internal grid."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @return copy of the map."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public Cell[][] get2dArrayMapGridCopy() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell[][] mapCopy \u003d new Cell[size][size];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        copy2dArray(mapCopy, cellGrid);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return mapCopy;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns a 2D array of {@code Status} which represents the view of this map from this map owner\u0027s perspective."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @return statuses of cells."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public Status[][] getPlayerMapView() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Status[][] playerMapView \u003d new Status[size][size];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            for (int j \u003d 0; j \u003c size; j++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                playerMapView[i][j] \u003d cellGrid[i][j].getStatus();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return playerMapView;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns a 2D array of {@code Status} which represents the view of this map from"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * the perspective of the enemy of this map\u0027s owner."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @return statuses of cells."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public Status[][] getEnemyMapView() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Status[][] enemyMapView \u003d new Status[size][size];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            for (int j \u003d 0; j \u003c size; j++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                Status cellStatus \u003d cellGrid[i][j].getStatus();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                enemyMapView[i][j] \u003d (cellStatus \u003d\u003d Status.EMPTY || cellStatus \u003d\u003d Status.SHIP)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                        ? Status.HIDDEN : cellStatus;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return enemyMapView;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Utility function to do a deep copy of a 2D array"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @param output 2D array to copy to."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @param toBeCopied 2D array to copy from."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private void copy2dArray(Cell[][] output, Cell[][] toBeCopied) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            for (int j \u003d 0; j \u003c size; j++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                output[i][j] \u003d new Cell(toBeCopied[i][j]);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns map size."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @return map size."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public int getMapSize() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return cellGrid.length;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    // UI operations"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * A listener will be added to this observable value in the UI."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Once this value changes the UI will be updated."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @return observableValue for the UI to listen to."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public ObservableBooleanValue getObservableValue() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return uiUpdateSwitch;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Updates the UI."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void updateUi() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        if (uiUpdateSwitch.getValue() \u003d\u003d false) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            uiUpdateSwitch.setValue(true);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            uiUpdateSwitch.setValue(false);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    //// cell-level operations"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the cell in the given coordinates."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @param coordinates of the cell."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private Cell getCell(Coordinates coordinates) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return cellGrid[coordinates.getRowIndex().getZeroBased()][coordinates.getColIndex().getZeroBased()];"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the status of the specified {@code Cell}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @param coord specifies which {@code Cell} to get {@code Status} from."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @return {@code Status} of the cell."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public Status getCellStatus(Coordinates coord) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return getCell(coord).getStatus();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the name of the {@code Battleship} in the specified {@code Cell}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @param coord specifies which {@code Cell} to get the name of {@code Battleship} from."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @return Name of the {@code Battleship} as a {@code String}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public String getShipNameInCell(Coordinates coord) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return getCell(coord).getBattleship().get().toString();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Attack a specified cell."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @param coordinates of the cell."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @return boolean which specifies hit or miss."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public boolean attackCell(Coordinates coordinates) throws ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        if (coordinates.getColIndex().getOneBased() \u003e getMapSize()) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            throw new ArrayIndexOutOfBoundsException(\"Coordinates are outside of the map\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        boolean isSuccessfulHit \u003d"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                cellGrid[coordinates.getRowIndex().getZeroBased()][coordinates.getColIndex().getZeroBased()]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                        .receiveAttack();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        updateUi();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return isSuccessfulHit;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Put battleship on map grid."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void putShip(Battleship battleship, Coordinates coordinates, Orientation orientation)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throws ArrayIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int rowIndexAsInt \u003d coordinates.getRowIndex().getZeroBased();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int colIndexAsInt \u003d coordinates.getColIndex().getZeroBased();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if ((coordinates.getColIndex().getOneBased() \u003e getMapSize())"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iwle"
        },
        "content": "            || (coordinates.getRowIndex().getOneBased() \u003e getMapSize())) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throw new ArrayIndexOutOfBoundsException(\"Coordinates are outside of the map\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int rowInt \u003d rowIndexAsInt;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int colInt \u003d colIndexAsInt;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (int i \u003d 0; i \u003c battleship.getLength(); i++) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iwle"
        },
        "content": "            if (orientation.isHorizontal()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iwle"
        },
        "content": "                colInt \u003d colIndexAsInt + i;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iwle"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iwle"
        },
        "content": "                rowInt \u003d rowIndexAsInt + i;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iwle"
        },
        "content": "            cellGrid[rowInt][colInt].putShip(battleship);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                || (other instanceof MapGrid // instanceof handles nulls"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                \u0026\u0026 Arrays.deepEquals(cellGrid, ((MapGrid) other).cellGrid));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return cellGrid.hashCode();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 173,
      "iwle": 29,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.beans.value.ObservableBooleanValue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.Battle;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.state.BattleState;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Enemy;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.player.Fleet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.statistics.PlayerStatistics;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Update the UI"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    void updateUi();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the observable value in the human map. Used by the Ui to listen to for changes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    ObservableBooleanValue getHumanMapObservable();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the observable value in the human map. Used by the Ui to listen to for changes."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    ObservableBooleanValue getEnemyMapObservable();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the player map grid"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    MapGrid getHumanMapGrid();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the enemy map grid"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    MapGrid getEnemyMapGrid();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the map size"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    int getMapSize();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * Returns the initialized player statistics used in the game."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bos10"
        },
        "content": "    PlayerStatistics getPlayerStats();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": "    Fleet getFleet();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Deploys a battleship."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": "    void deployBattleship(Battleship battleship, Coordinates coordinates, Orientation orientation);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks number of battleships available."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": "    boolean isEnoughBattleships(Battleship battleship, int numBattleship);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns the human player in the game."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    Player getHumanPlayer();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns the computer player."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    Enemy getEnemyPlayer();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Retrieves the Battle API."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    Battle getBattle();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Retrieves the current state of the battle."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    void setBattleState(BattleState battleState);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Retrieves the current state of the battle."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    BattleState getBattleState();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 13,
      "iwle": 9,
      "s-tr": 14,
      "bos10": 4,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.beans.value.ObservableBooleanValue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.Battle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.BattleManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.state.BattleState;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Enemy;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.player.Fleet;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.statistics.PlayerStatistics;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private final MapGrid mapGrid;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private final SimpleObjectProperty\u003cCell\u003e selectedPerson \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private PlayerStatistics playerStats;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private BattleManager batMan;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private BattleState state;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public ModelManager(MapGrid addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        mapGrid \u003d new MapGrid();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bos10"
        },
        "content": "        // Initialize new statistics"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.playerStats \u003d new PlayerStatistics();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        batMan \u003d new BattleManager(new Player(), new Enemy());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        state \u003d BattleState.PRE_BATTLE;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this(new MapGrid(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public ModelManager(BattleManager batMan) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.batMan \u003d batMan;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MapGrid \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public MapGrid getHumanMapGrid() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return getHumanPlayer().getMapGrid();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public MapGrid getEnemyMapGrid() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return getEnemyPlayer().getMapGrid();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public int getMapSize() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return getHumanPlayer().getMapGrid().getMapSize();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void updateUi() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        getHumanMapGrid().updateUi();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        getEnemyMapGrid().updateUi();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public ObservableBooleanValue getHumanMapObservable() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return getHumanMapGrid().getObservableValue();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public ObservableBooleanValue getEnemyMapObservable() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return getEnemyMapGrid().getObservableValue();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iwle"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Battleship \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Fleet getFleet() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return getHumanPlayer().getFleet();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void deployBattleship(Battleship battleship, Coordinates coordinates, Orientation orientation) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        getFleet().deployOneBattleship(battleship, coordinates, orientation);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isEnoughBattleships(Battleship battleship, int numBattleship) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return getFleet().isEnoughBattleship(battleship, numBattleship);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Statistics \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * Returns the initialized player statistics used in the game."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public PlayerStatistics getPlayerStats() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return this.playerStats;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Battle manager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns the human player in the game."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public Player getHumanPlayer() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return batMan.getHumanPlayer();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns the computer player."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public Enemy getEnemyPlayer() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return batMan.getEnemyPlayer();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Retrieves the Battle API."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public Battle getBattle() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return batMan;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Retrieves the current state of the battle."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public BattleState getBattleState() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return state;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Sets the current state of the battle."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void setBattleState(BattleState newState) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        requireNonNull(newState);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.state \u003d newState;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return mapGrid.equals(other.mapGrid)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedPerson.get(), other.selectedPerson.get());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 20,
      "iwle": 9,
      "s-tr": 45,
      "bos10": 11,
      "-": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook extends Observable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    ObservableList\u003cCell\u003e getPersonList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private Path statisticsFilePath \u003d Paths.get(\"data\", \"statisticsPast\", \"statisticsData.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public Path getStatisticsFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return statisticsFilePath;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 5,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/battleship/AircraftCarrierBattleship.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model.battleship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Represents an aircraft carrier in the game."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class AircraftCarrierBattleship extends Battleship {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Constructor for destroyer ship. The default length of the destroyer is 5."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param tagSet set of {@code Tag}s that the ship has."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public AircraftCarrierBattleship(Set\u003cTag\u003e tagSet) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "        super(BattleshipType.AIRCRAFT_CARRIER.getName(),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "                BattleshipType.AIRCRAFT_CARRIER.getLength(),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "                BattleshipType.AIRCRAFT_CARRIER.getLength(),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "                tagSet);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/battleship/Battleship.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model.battleship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Represents a ship in the game."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class Battleship {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Name must be \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + BattleshipType.AIRCRAFT_CARRIER.toString() + \", \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + BattleshipType.DESTROYER.toString() + \" or \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + BattleshipType.CRUISER.toString() + \".\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static int counter \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "    protected final int id;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "    protected final Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "    protected final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "    protected final int length;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private int life;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "    // Logger"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(Battleship.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param name name of the ship."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param length length of the ship."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param life life of the ship as it may differ from the length."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param tags set of tags for the ship."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Battleship(Name name, int length, int life, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "        logger.info(\"BATTLESHIP INITIALISED.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.id \u003d counter++;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.length \u003d length;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.life \u003d life;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Constructor for Battleship without arguments. Calls the constructor with"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * default values."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Battleship() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this(BattleshipType.DEFAULT.getName(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "                BattleshipType.DEFAULT.length,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "                BattleshipType.DEFAULT.length,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "                new HashSet\u003cTag\u003e());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Constructor for Battleship with only name. Calls the constructor with"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * default values."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param name name of the ship."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Battleship(Name name) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this(name,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": "                BattleshipType.DEFAULT.length,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": "                BattleshipType.DEFAULT.length,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "                new HashSet\u003cTag\u003e());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Constructor for Battleship with only name and tags. Calls the constructor with"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * default values."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param name name of the ship."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param tags set of tags for the ship."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Battleship(Name name, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this(name, BattleshipType.DEFAULT.length,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": "                BattleshipType.DEFAULT.length, tags);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Constructor Battleship with only name, length and size."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param name name of the ship."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param length length of the ship."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param life life of the ship as it may differ from the length."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Battleship(Name name, int length, int life) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this(name, length, life, new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Getter method for name."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return name of ship."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Getter method for id."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return id of ship."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.id;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Getter method for length."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return length of ship."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public int getLength() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.length;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Getter method for life."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return life of ship."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public int getLife() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.life;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Reduces the life of the battleship by one unit."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void reduceLife() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.life--;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks if life of the battleship is equal to zero."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * That is, if it is destroyed."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return boolean of whether the ship is destroyed."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isDestroyed() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.life \u003d\u003d 0;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return tags of the ship."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Returns true if both battleships of the same name have the same name."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * This defines a weaker notion of equality between two battleships."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param otherBattleship other object to be compared with."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return boolean of whether the ships are equal."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isSameBattleship(Battleship otherBattleship) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (otherBattleship \u003d\u003d this) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return otherBattleship !\u003d null"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \u0026\u0026 otherBattleship.getName().equals(getName())"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \u0026\u0026 otherBattleship.getId() \u003d\u003d getId();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Returns true if both battleships have the same identity fields."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * This defines a stronger notion of equality between two battleships."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param other other object to be compared with."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return boolean of whether the objects are equal."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (!(other instanceof Battleship)) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship otherBattleship \u003d (Battleship) other;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return otherBattleship.getName().equals(getName());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Return hashcode of object. Hashes the name, id, length, life, and tags."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return {@code int} of hashcode of object."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return Objects.hash(name, id, length, life, tags);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Return name of ship."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return name of ship."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.getName().toString();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Enumeration of battleships for internal use."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public enum BattleshipType {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iwle"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iwle"
        },
        "content": "         * The values for AIRCRAFT_CARRIER, DESTROYER AND CRUISER are fixed."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iwle"
        },
        "content": "         * The DEFAULT value is a placeholder for user-created battleships (coming in v2.0)."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iwle"
        },
        "content": "         */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iwle"
        },
        "content": "        AIRCRAFT_CARRIER(\"aircraft carrier\", 5),"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iwle"
        },
        "content": "        DESTROYER(\"destroyer\", 3),"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iwle"
        },
        "content": "        CRUISER(\"cruiser\", 2),"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iwle"
        },
        "content": "        DEFAULT(\"default\", 2);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iwle"
        },
        "content": "        private final String name;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iwle"
        },
        "content": "        private final int length;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iwle"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iwle"
        },
        "content": "         * Constructor."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iwle"
        },
        "content": "         *"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iwle"
        },
        "content": "         * @param name name of ship."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iwle"
        },
        "content": "         * @param length length of ship."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iwle"
        },
        "content": "         */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iwle"
        },
        "content": "        BattleshipType(String name, int length) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iwle"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iwle"
        },
        "content": "            this.length \u003d length;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iwle"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iwle"
        },
        "content": "         * Returns name as a Name object."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iwle"
        },
        "content": "         *"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iwle"
        },
        "content": "         * @return name of ship."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iwle"
        },
        "content": "         */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iwle"
        },
        "content": "        public Name getName() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return new Name(this.name);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iwle"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iwle"
        },
        "content": "         * Getter method for length."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iwle"
        },
        "content": "         *"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iwle"
        },
        "content": "         * @return length of ship"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iwle"
        },
        "content": "         */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iwle"
        },
        "content": "        public int getLength() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return this.length;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iwle"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iwle"
        },
        "content": "         * Returns name as String."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iwle"
        },
        "content": "         *"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iwle"
        },
        "content": "         * @return name of ship as a string."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iwle"
        },
        "content": "         */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iwle"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iwle"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return this.name;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 276
    }
  },
  {
    "path": "src/main/java/seedu/address/model/battleship/CruiserBattleship.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model.battleship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Represents a cruiser in the game."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class CruiserBattleship extends Battleship {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Constructor for cruiser ship. The default length of the destroyer is 2."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param tagSet set of {@code Tag}s that the ship has."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public CruiserBattleship(Set\u003cTag\u003e tagSet) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "        super(BattleshipType.CRUISER.getName(),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "                BattleshipType.CRUISER.getLength(),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "                BattleshipType.CRUISER.getLength(),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "                tagSet);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/battleship/DestroyerBattleship.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model.battleship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Represents a destroyer in the game."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class DestroyerBattleship extends Battleship {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Constructor for destroyer ship. The default length of the destroyer is 3."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param tagSet set of {@code Tag}s that the ship has."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public DestroyerBattleship(Set\u003cTag\u003e tagSet) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "        super(BattleshipType.DESTROYER.getName(),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "                BattleshipType.DESTROYER.getLength(),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "                BattleshipType.DESTROYER.getLength(),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "                tagSet);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/battleship/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model.battleship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Represents a Cell\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "iwle": 1,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/battleship/Orientation.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model.battleship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Represents the orientation of a ship on the map."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class Orientation {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "            \"Orientation should either be horizontal or vertical, case-insensitive\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "    // The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "    // otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \"^(horizontal|vertical|h|v)$\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final Pattern VALIDATION_PATTERN \u003d Pattern.compile("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "            VALIDATION_REGEX,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "            Pattern.CASE_INSENSITIVE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public final OrientationType orientation;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(Orientation.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param orientation A valid name."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Orientation(String orientation) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "        requireNonNull(orientation);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": "        checkArgument(isValidOrientation(orientation), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (orientation.toLowerCase().equals(\"h\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "                || orientation.toLowerCase().equals(\"horizontal\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "            this.orientation \u003d OrientationType.HORIZONTAL;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else if (orientation.toLowerCase().equals(\"v\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "                || orientation.toLowerCase().equals(\"vertical\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "            this.orientation \u003d OrientationType.VERTICAL;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "            this.orientation \u003d OrientationType.ERROR;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "        logger.info(\"ORIENTATION INSTANCE CREATED.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param test input string to be tested."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return boolean of whether the given string is a valid orientation."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static boolean isValidOrientation(String test) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Matcher matcher \u003d VALIDATION_PATTERN.matcher(test);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return matcher.find();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks if orientation is left."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return boolean of whether the orientation is left."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isHorizontal() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.orientation \u003d\u003d OrientationType.HORIZONTAL;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks if orientation is right."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return boolean of whether the orientation is right."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isVertical() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.orientation \u003d\u003d OrientationType.VERTICAL;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Returns string of orientation."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return string of orientation."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.orientation.toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks if two given Orientation objects are equal by checking the enum value."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param other object to be compared with."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return boolean of whether objects are equal."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iwle"
        },
        "content": "                || (other instanceof Orientation // instanceof handles nulls"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \u0026\u0026 orientation.equals(((Orientation) other).orientation)); // state check"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Hashes the object."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return {@code int} of orientation hashcode."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return orientation.hashCode();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Enumeration for internal use."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private enum OrientationType {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iwle"
        },
        "content": "        HORIZONTAL(\"horizontal\"),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iwle"
        },
        "content": "        VERTICAL(\"vertical\"),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iwle"
        },
        "content": "        ERROR(\"error\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iwle"
        },
        "content": "        private final String orientationDescription;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iwle"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iwle"
        },
        "content": "         * Default constructor method."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iwle"
        },
        "content": "         *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iwle"
        },
        "content": "         * @param value orientation string."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iwle"
        },
        "content": "         */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iwle"
        },
        "content": "        OrientationType(String value) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iwle"
        },
        "content": "            orientationDescription \u003d value;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iwle"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iwle"
        },
        "content": "         * Returns orientation as a lowercase string."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iwle"
        },
        "content": "         *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iwle"
        },
        "content": "         * @return orientation as a lowercase string."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iwle"
        },
        "content": "         */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iwle"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iwle"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return this.orientationDescription;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iwle"
        },
        "content": "    };"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 144
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cell/Cell.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.model.cell;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Represents a {@code Cell} in the {@code MapGrid}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class Cell {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private Optional\u003cBattleship\u003e battleship;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private boolean isHit \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private Coordinates coordinates;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Coordinates must be present and not null."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public Cell(Coordinates coordinates) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        requireNonNull(coordinates);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.battleship \u003d Optional.empty();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.coordinates \u003d coordinates;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Constructor for cell that requires no arguments. Used for testing"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public Cell() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.battleship \u003d Optional.empty();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.coordinates \u003d new Coordinates(\"a1\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Constructor to copy a given Cell."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public Cell(Cell newCell) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.battleship \u003d newCell.battleship;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.isHit \u003d newCell.isHit;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.coordinates \u003d newCell.coordinates;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns true if this cell has a battleship, otherwise returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public boolean hasBattleShip() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return battleship.isPresent();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Put a battleship in this cell. Battleship must be present and not null."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @param battleship to place on the cell."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void putShip(Battleship battleship) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        requireNonNull(battleship);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.battleship \u003d Optional.of(battleship);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns the {@code Status} of this cell."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @return status of the cell."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        if (battleship.isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            if (battleship.get().isDestroyed()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                return Status.DESTROYED;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            } else if (this.isHit) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                return Status.SHIPHIT;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                return Status.SHIP;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            if (isHit) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                return Status.EMPTYHIT;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                return Status.EMPTY;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Performs an attack on this current cell."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if the attack hit a ship, \u003ccode\u003efalse\u003c/code\u003e otherwise."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public boolean receiveAttack() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        this.isHit \u003d true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        if (battleship.isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            battleship.ifPresent(Battleship::reduceLife);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns the ship in this cell."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @return {@code Optional} of {@Code Battleship} in this cell."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public Optional\u003cBattleship\u003e getBattleship() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return battleship;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Returns true if both cells has the same coordinates and battleship."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * This defines a stronger notion of equality between two cells."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        if (!(other instanceof Cell)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell otherCell \u003d (Cell) other;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                otherCell.coordinates.equals(coordinates)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                \u0026\u0026 otherCell.isHit \u003d\u003d isHit"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                \u0026\u0026 otherCell.battleship.isPresent() \u003d\u003d battleship.isPresent()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                \u0026\u0026 (!otherCell.battleship.isPresent() || otherCell.battleship.get().equals(battleship.get()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return Objects.hash(coordinates);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        builder.append(coordinates);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 74,
      "s-tr": 30,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cell/Coordinates.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model.cell;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Represents a {@code Cell}\u0027s coordinates on the map grid."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCoordinates(String)}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class Coordinates {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Coordinates should be of the format row-column \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"1. The row should only contain alphabetical characters, excluding \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \"). \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"The alphabetical characters must be between [a-j] inclusive and be in lowercase.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"2. This is followed by a column number. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"The column number must be between [1-10] inclusive.\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String ROW_PART_REGEX \u003d \"^([a-z]){1}\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String COL_PART_REGEX \u003d \"(\\\\d+){1}$\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String COL_PART_REGEX_NON_MATCH \u003d \"[a-z]0\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d ROW_PART_REGEX + COL_PART_REGEX;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "    // internal data, guaranteed to be immutable"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Index rowIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Index colIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Constructor for a {@code Coordinates} object with String parameter."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param coordinate a valid coordinate, as defined by {@code ROW_PART_REGEX}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *                   and {@code COL_PART_REGEX}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @throws NumberFormatException"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Coordinates(String coordinate) throws NumberFormatException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "        requireNonNull(coordinate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "        checkArgument(isValidCoordinates(coordinate), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "        String value \u003d coordinate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // use regex to extract alphabetical row and numeric col"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Pattern rowRegex \u003d Pattern.compile(ROW_PART_REGEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Pattern colRegex \u003d Pattern.compile(COL_PART_REGEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Matcher rowMatch \u003d rowRegex.matcher(value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Matcher colMatch \u003d colRegex.matcher(value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "        rowMatch.find();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "        colMatch.find();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "        String row \u003d rowMatch.group(0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "        String col \u003d colMatch.group(0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int rowNum \u003d convertAlphabetToNumber(row);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int colNum \u003d Integer.parseInt(col);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.rowIndex \u003d Index.fromOneBased(rowNum);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.colIndex \u003d Index.fromOneBased(colNum);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Constructor for a {@code Coordinates} object with integer parameters for"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * row and column."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param rowZeroBased valid {@code int} representing the row."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param colZeroBased valid {@code int} representing the column."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Coordinates(int rowZeroBased, int colZeroBased) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.rowIndex \u003d Index.fromZeroBased(rowZeroBased);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.colIndex \u003d Index.fromZeroBased(colZeroBased);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Constructor for a {@code Coordinates} object with Index parameters for"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * row and column."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param rowIndex valid {@code Index} representing the row."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param colIndex valid {@code Index} representing the column."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Coordinates(Index rowIndex, Index colIndex) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.rowIndex \u003d rowIndex;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.colIndex \u003d colIndex;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Converts a string alphabet to its numerical equivalent."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param alphabet String of alphabet"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return integer offset from \u0027a\u0027, zero-based."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public int convertAlphabetToNumber(String alphabet) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iwle"
        },
        "content": "        char alphabetChar \u003d alphabet.charAt(0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return (int) alphabetChar - \u0027a\u0027 + 1;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Returns Index for rowNum."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return {@code Index} of row."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Index getRowIndex() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.rowIndex;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Return Index for colNum."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return {@code Index} of column."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Index getColIndex() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.colIndex;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Returns if a given {@code String} is a valid coordinate."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return boolean of whether input is a valid coordinate."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static boolean isValidCoordinates(String test) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 !test.matches(COL_PART_REGEX_NON_MATCH);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Returns the {@code rowIndex} and {@code colIndex} as a {@code String} in"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * the format of [alphabet][number], one-based."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return coordinates as a {@code String}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iwle"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iwle"
        },
        "content": "        char colChar \u003d (char) (this.rowIndex.getZeroBased() + \u0027a\u0027);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iwle"
        },
        "content": "        stringBuilder.append(colChar)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(this.colIndex.getOneBased());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks equality of two {@code Coordinates} objects by comparing the respective"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * {@code rowIndex} and {@code colIndex}. If the other object is not a"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * {@code Coordinates} object, then they are not equal."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param other any object."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return boolean of whether the objects are equal."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iwle"
        },
        "content": "                || (other instanceof Coordinates) // instanceof handles nulls"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \u0026\u0026 this.rowIndex.equals(((Coordinates) other).rowIndex)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \u0026\u0026 this.colIndex.equals(((Coordinates) other).colIndex); // state check"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Generate hashcode of {@code this}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return {@code int} hashcode of {@code this}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return Objects.hash(rowIndex, colIndex);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 172,
      "lucydotc": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cell/Status.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.model.cell;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Enum that has different statuses a cell can have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public enum Status {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * This cell has not been hit. Used when showing the map from the enemy\u0027s perspective."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    HIDDEN,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * This cell is empty and has not been hit."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    EMPTY,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * This cell has been hit before, and is empty;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    EMPTYHIT,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * This cell has a ship in it."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    SHIP,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * This cell has been hit before, and there is a damaged ship here."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    SHIPHIT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * This cell has been hit before, and the ship here has been destroyed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    DESTROYED"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 21,
      "s-tr": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exceptions/BoundaryValueException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Represents an insufficient number of battleships exception."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class BoundaryValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Default constructor method."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param message exception message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public BoundaryValueException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/player/Enemy.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "package seedu.address.model.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import seedu.address.model.BoundaryValueChecker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import seedu.address.model.cell.Status;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.exceptions.BoundaryValueException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucydotc"
        },
        "content": " * This class implements an {@code Enemy} {@code Player} in the game."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucydotc"
        },
        "content": " * The {@code Enemy} has {@code Player} as a parent."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucydotc"
        },
        "content": " * @author lucydotc"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucydotc"
        },
        "content": " * @version 1.4"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucydotc"
        },
        "content": " * @since 2019-03-05"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucydotc"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "public class Enemy extends Player {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private static final Random randGen \u003d new Random();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private static final Random randGen2 \u003d new Random();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(Enemy.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private static ArrayList\u003cCoordinates\u003e allPossibleTargets \u003d new ArrayList\u003c\u003e(); //one-based"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private static ArrayList\u003cCoordinates\u003e allParityTargets \u003d new ArrayList\u003c\u003e(); //one-based"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private static ArrayList\u003cCoordinates\u003e allPossiblePopulateCoords \u003d new ArrayList\u003c\u003e(); //zero-based, two ints"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private Stack\u003cCoordinates\u003e watchlist \u003d new Stack\u003c\u003e(); //one based"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private Status lastAttackStatus \u003d Status.HIDDEN;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private int mapSize \u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private Coordinates lastCoordAttacked \u003d new Coordinates(0, 0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Default constructor with fleet size 8."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public Enemy() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "        super(\"EnemyPlayer\", 5, 2, 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * This method prepares the enemy for the game by generating the {@code Coordinates} it may use,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * and calls the method that will put the {@code Enemy}\u0027s ships on its own map"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * This method is required for the {@code Enemy} to function properly in the game"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public void prepEnemy() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        mapSize \u003d this.getMapGrid().getMapSize();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        logger.info(String.format(\"~~~~~~~~~~~~~~~~~~++++++++this.getMapGrid().getMapSize(): \" + mapSize));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        fillWithAllCoords();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        populateEnemyMap();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * fills allPossibleTargets, allPossiblePopulateCoords, allParityTargets"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * to inform the shooting and population functions"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private void fillWithAllCoords() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        for (int row \u003d 0; row \u003c mapSize; row++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            for (int col \u003d 0; col \u003c mapSize; col++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                Coordinates createdCoord \u003d new Coordinates(row, col);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                allPossibleTargets.add(createdCoord);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                allPossiblePopulateCoords.add(createdCoord);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                if (hasParity(row, col)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                    allParityTargets.add(createdCoord);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        java.util.Collections.shuffle(allPossibleTargets, randGen);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        java.util.Collections.shuffle(allPossiblePopulateCoords, randGen2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        java.util.Collections.shuffle(allParityTargets, randGen);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * This method generates a valid {@code Coordinate} for the {@code Enemy} to shoot at."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * and adds the coordinate shot at into the Enemy\u0027s targetHistory"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * This method is called by the BattleManager"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * @return Coordinates"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public Coordinates enemyShootAt() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Coordinates newTarget;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        if (watchlist.isEmpty()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            if (!allParityTargets.isEmpty()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                newTarget \u003d drawParityTarget();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                logger.info(String.format(\"++++++++WATCHLIST EMPTY \" + \"enemy shoot parity: \" + newTarget.toString()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                newTarget \u003d drawFromAllTargets();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                logger.info(String.format(\"++++++++Parity EMPTY \"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            newTarget \u003d drawFromWatchList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            logger.info(String.format(\"++++++++WATCHLIST STUFFED \" + \"enemy shoot watched: \" + newTarget.toString()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        modeCleanup(newTarget);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        this.addToTargetHistory(newTarget);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return newTarget;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * draws a valid Coord with parity filter on"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private Coordinates drawParityTarget() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        java.util.Collections.shuffle(allParityTargets, randGen);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return allParityTargets.get(0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * draws a valid Coord with from watchlist"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private Coordinates drawFromWatchList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return watchlist.pop();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /************************************************"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * draws a valid Coord with from allPossibleTargets,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * when all Parity coordinates run out"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private Coordinates drawFromAllTargets() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        java.util.Collections.shuffle(allPossibleTargets, randGen);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return allPossibleTargets.get(0);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * initialises the enemy mapGrid with its own ships randomly"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * is part of enemy constructor"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private void populateEnemyMap() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        int numDestroyer \u003d this.getFleet().getNumDestroyerLeft();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        int numCruiser \u003d this.getFleet().getNumCruiserLeft();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        logger.info(String.format(\"~~~~~~~~~~~~~~~~~~++++++++this.getFleet().getNumDestroyerLeft(): \" + numDestroyer));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        logger.info(String.format(\"~~~~~~~~~~~~~~~~~~++++++++this.getFleet().getNumCruiserLeft(): \" + numCruiser));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        placeAirCraftCarrier();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        placeMultipleDestroyerAndCruiser(numDestroyer, \"Destroyer\", 3);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        placeMultipleDestroyerAndCruiser(numCruiser, \"Cruiser\", 2);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * pulls a head coord from allPossiblePopulateCoords"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * and justifies the coord before using it as a head for the aircraftCarrier"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * before placing the aircraftCarrier onto enemy map"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private void placeAirCraftCarrier() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Orientation useOrientation \u003d generateOrientation();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        java.util.Collections.shuffle(allPossiblePopulateCoords, randGen);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Coordinates useCoord \u003d allPossiblePopulateCoords.get(0);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Index row \u003d useCoord.getRowIndex();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Index col \u003d useCoord.getColIndex();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        int justifiedCoord; //zero-based"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Coordinates currentBattleshipHead;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        if (useOrientation.isHorizontal()) { //rectify X coord of head, Y doesn\u0027t matter (all Y will work)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            justifiedCoord \u003d justifyCoord(col.getZeroBased()); //col is justified"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            currentBattleshipHead \u003d new Coordinates(row.getZeroBased(), justifiedCoord);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            justifiedCoord \u003d justifyCoord(row.getZeroBased()); //row gets justified"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            currentBattleshipHead \u003d new Coordinates(justifiedCoord, col.getZeroBased());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Name currentBattleshipName \u003d new Name(\"enemyAircraftCarrier\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Battleship currentBattleship \u003d new Battleship(currentBattleshipName, 5, 5);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        // public Battleship(Name name, int length, int life, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //should have no error, since it is the first ship placed, and all map sizes have a max of 1 aircraft carrier"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //AircraftCarrierBattleship x \u003d new AircraftCarrierBattleship(currentBattleshipName);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        this.getFleet().deployOneBattleship(currentBattleship, currentBattleshipHead, useOrientation);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        this.getMapGrid().putShip(currentBattleship, currentBattleshipHead, useOrientation);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        markAsOccupied(currentBattleshipHead, 5, useOrientation);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        logger.info(String.format(\"++++++++POPULATED aircraft carrier at \" + currentBattleshipHead.toString()"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                + \" orientation is \" + useOrientation.toString()));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * places all destroyers and cruisers onto enemy map"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * and marks those occupied cells in allPossiblePopulateCoords"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private void placeMultipleDestroyerAndCruiser(int numShips, String shipType, int shipSize) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Orientation useOrientation \u003d new Orientation(\"v\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Coordinates useCoord \u003d new Coordinates(0, 0);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        ArrayList\u003cBattleship\u003e preppedShips \u003d generateBattleships(numShips, shipType, shipSize);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Battleship useShip \u003d new Battleship();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        while (!preppedShips.isEmpty()) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                useOrientation \u003d generateOrientation();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                java.util.Collections.shuffle(allPossiblePopulateCoords, randGen2);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                useCoord \u003d allPossiblePopulateCoords.get(0);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                useShip \u003d preppedShips.get(0);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                BoundaryValueChecker boundaryValueChecker \u003d new BoundaryValueChecker(this.getMapGrid(), useShip,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                        useCoord, useOrientation);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                boundaryValueChecker.performChecks();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                this.getFleet().deployOneBattleship(useShip, useCoord, useOrientation);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                this.getMapGrid().putShip(useShip, useCoord, useOrientation);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                preppedShips.remove(0);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                markAsOccupied(useCoord, shipSize, useOrientation);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                logger.info(String.format(\"++++++++POPULATED \" + useShip.getName() + \" at \""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                        + useCoord.toString()"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                        + \" orientation is \" + useOrientation.toString()));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException aIoObEx) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "s-tr"
        },
        "content": "                //TODO log the error later from putship"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iwle"
        },
        "content": "            } catch (BoundaryValueException bve) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                logger.info(String.format(\"++++++++REJECTED POPULATING \" + useShip.getName())"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                        + \" at \" + useCoord + \" orientation: \" + useOrientation);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * creates list of a certain battleship type"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * to be put on map"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private ArrayList\u003cBattleship\u003e generateBattleships (int numShips, String battleshipType, int shipSize) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        ArrayList\u003cBattleship\u003e preppedFleet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d numShips; i++) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            Name currentBattleshipName \u003d new Name(\"enemy\" + battleshipType + i);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            Battleship currentBattleship \u003d new Battleship(currentBattleshipName, shipSize, shipSize);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            preppedFleet.add(currentBattleship);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        logger.info(String.format(\"++++++++GENERATED: \" + preppedFleet.toString()));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return preppedFleet;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * removes all the occupied Coords from allPossiblePopulateCoords"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * when a new ship is placed"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private void markAsOccupied(Coordinates head, int shipSize, Orientation useOrientation) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //increase col"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        if (useOrientation.isHorizontal()) { //row stays the same"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            int colStart \u003d head.getColIndex().getZeroBased();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            for (int i \u003d 0; i \u003c shipSize; i++) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                Coordinates markedCoord \u003d new Coordinates(head.getRowIndex().getZeroBased(), colStart + i);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                allPossiblePopulateCoords.remove(markedCoord);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                logger.info(String.format(\"++++++++MARK_AS_OCCUPIED: \" + markedCoord.toString()));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                logger.info(String.format(\"++++allPossiblePopulateCoords Size: \" + allPossiblePopulateCoords.size()));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        } else { //increase row"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            for (int i \u003d 0; i \u003c shipSize; i++) { //col stays the same"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                int rowStart \u003d head.getRowIndex().getZeroBased();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                Coordinates markedCoord \u003d new Coordinates(rowStart + i, head.getColIndex().getZeroBased());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                allPossiblePopulateCoords.remove(markedCoord);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                logger.info(String.format(\"++++++++MARK_AS_OCCUPIED: \" + markedCoord.toString()));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                logger.info(String.format(\"++++allPossiblePopulateCoords Size: \" + allPossiblePopulateCoords.size()));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * justifies the head coord given to ensure"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * ship to be placed can fit the map boundaries"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private int justifyCoord(int coordToJustify) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        int lowerHalfceiling \u003d (mapSize / 2) - 1;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        switch (mapSize) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        case 6: //ceiling \u003d 0 to 2, 3"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            if (coordToJustify \u003c\u003d lowerHalfceiling) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                coordToJustify \u003d 0;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                coordToJustify \u003d 1;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        case 10: //ceiling \u003d 0 to 5, 6"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            lowerHalfceiling +\u003d 1;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            if (coordToJustify \u003e lowerHalfceiling) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                coordToJustify -\u003d 4;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            coordToJustify %\u003d lowerHalfceiling + 1;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return coordToJustify;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * randomly generates either a horizontal or vertical orientation"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private Orientation generateOrientation() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        int seed \u003d randGen2.nextInt();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        int decision \u003d seed % 2;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        if (decision \u003d\u003d 0) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            return new Orientation(\"horizontal\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            return new Orientation(\"vertical\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * receives status of an attacked cell from Battle manager"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void receiveStatus(Status latestStatusInfo) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        lastAttackStatus \u003d latestStatusInfo;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        logger.info(String.format(\"++++++++RECEIVE_STATUS: \" + lastCoordAttacked.toString()"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                + \" status: \" + latestStatusInfo.toString()));"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        updateWatchlist(lastCoordAttacked);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Add coords of the cardinal positions to the last attacked cell"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * to the watchlist"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private void updateWatchlist(Coordinates lastCoordAttacked) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        logger.info(String.format(\"++++++++BEFORE_UPDATE_WATCHLIST_STATUS_CHECK \" + lastCoordAttacked.toString()"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                + \" status: \" + lastAttackStatus.toString()));"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        if (lastAttackStatus \u003d\u003d Status.SHIPHIT) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            int oldRow \u003d lastCoordAttacked.getRowIndex().getZeroBased();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            int oldCol \u003d lastCoordAttacked.getColIndex().getZeroBased();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            Coordinates updatedCoord;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            //ADD CARDINAL DIRECTIONS TO WATCHLIST."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            //WATCHLIST COORDS IN FORM a1"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            if (oldRow - 1 \u003e\u003d 0) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                //add cardinal NORTH to watchlist. ROW MINUS ONE"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                updatedCoord \u003d new Coordinates(oldRow - 1, oldCol);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                addCardinal(updatedCoord);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            if (oldRow + 1 \u003c mapSize) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                //add cardinal SOUTH to watchlist  ROW PLUS ONE"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                updatedCoord \u003d new Coordinates(oldRow + 1, oldCol);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                addCardinal(updatedCoord);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            if (oldCol - 1 \u003e\u003d 0) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                //add cardinal WEST to watchlist   COL MINUS ONE"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                updatedCoord \u003d new Coordinates(oldRow, oldCol - 1);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                addCardinal(updatedCoord);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            if (oldCol + 1 \u003c mapSize) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                //add cardinal EAST to watchlist   COL PLUS ONE"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                updatedCoord \u003d new Coordinates(oldRow, oldCol + 1);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                addCardinal(updatedCoord);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            logger.info(String.format(\"++++++++WATCHLIST UPDATING:\\n\" + watchlist.toString()));"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            logger.info(String.format(\"++++++++WATCHLIST SIZE:\\n\" + watchlist.size()));"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        if (lastAttackStatus \u003d\u003d Status.DESTROYED) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            cleanseWatchlist();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            logger.info(String.format(\"++++++++WATCHLIST CLEANSED:\\n\" + watchlist.toString()));"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            logger.info(String.format(\"++++++++WATCHLIST SIZE:\\n\" + watchlist.size()));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Adds the North South East West coordinates into the watchlist, if valid"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private void addCardinal(Coordinates updatedCoord) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        if (isValidCardinal(updatedCoord)) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            watchlist.push(updatedCoord);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            modeCleanup(updatedCoord);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Checks that the cardinal coordinate has never been hit before"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private boolean isValidCardinal(Coordinates useCoord) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        if (!this.getTargetHistory().contains(useCoord)) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            //logger.info(String.format(\"++++++++CHECKING ISVALID(): \" + useCoord.toString()));"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            //logger.info(String.format(\"++++++++allPossibleTargets: \" + allPossibleTargets.toString()));"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            //logger.info(String.format(\"++++++++allParityTargets: \" + allParityTargets.toString()));"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            return allPossibleTargets.contains(useCoord) || allParityTargets.contains(useCoord); //return true"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Remove the last used coord"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * from allParityTargets and allPossibleTargets"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private void modeCleanup(Coordinates usedCoord) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        // logger.info(String.format(\"++++++++BEFORE allParityTargets: \" + allParityTargets.toString()));"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        allParityTargets.remove(usedCoord);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        // logger.info(String.format(\"++++++++AFTER allParityTargets: \" + allParityTargets.toString()));"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        // logger.info(String.format(\"++++++++BEFORE allPossibleTargets: \" + allPossibleTargets.toString()));"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        allPossibleTargets.remove(usedCoord);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        // logger.info(String.format(\"++++++++AFTER allPossibleTargets: \" + allPossibleTargets.toString()));"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        lastCoordAttacked \u003d usedCoord;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * This method checks that the {@code Coordinate} is made up of one odd and one even x-y coordinate pair"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * and returns true if so"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * @param row The row of the {@code Coordinate} to be checked"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * @param col The col of the {@code Coordinate} to be checked"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public boolean hasParity (int row, int col) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        int parity \u003d (row % 2) + (col % 2);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return (parity \u003d\u003d 1);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *  puts everything back from the stack to the drawing bags"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *  Idea here is that once something is destroyed,1"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *  everything on the stack should have been adj to the destroyed ship"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private void cleanseWatchlist () {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        while (!watchlist.empty()) {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            Coordinates useCoord \u003d watchlist.pop();"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            if (hasParity(useCoord.getRowIndex().getZeroBased(), useCoord.getColIndex().getZeroBased())) {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                allParityTargets.add(useCoord);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            allPossibleTargets.add(useCoord);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            logger.info(String.format(\"++++++++RELEASE ON PAROLE COORD:\\n\" + useCoord.toString()));"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * This a getter method that returns the last attack status given to the {@code Enemy}"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * @return Status"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public Status getLastAttackStatus() {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return this.lastAttackStatus;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * This a getter method that returns all possible targets for the {@code Enemy}"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * @return ArrayList"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public ArrayList\u003cCoordinates\u003e getAllPossibleTargets() {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return this.allPossibleTargets;"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * This a getter method that returns all the targets with parity from the {@code Enemy}"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * @return ArrayList"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public ArrayList\u003cCoordinates\u003e getAllParityTargets() {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return this.allParityTargets;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * This a getter method that returns all the possible coordinates to place a ship from {@code Enemy}"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * @return ArrayList"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public ArrayList\u003cCoordinates\u003e getAllPossiblePopulateCoords() {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return this.allPossiblePopulateCoords;"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * This a getter method that returns the watchlist from the {@code Enemy}"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * @return Stack"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public Stack getWatchlist() {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return this.watchlist;"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 3,
      "lucydotc": 452,
      "s-tr": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/player/Fleet.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.AircraftCarrierBattleship;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.CruiserBattleship;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.DestroyerBattleship;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Represents a fleet of ships in the player."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class Fleet {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private ArrayList\u003cFleetEntry\u003e deployedFleet;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final int numAircraftCarrier;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final int numCruiser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final int numDestroyer;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private int numDestroyerLeft;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private int numCruiserLeft;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private int numAircraftCarrierLeft;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Default constructor for a fleet of size 8 with placeholder ship names."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public Fleet() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this(5, 2, 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Constructor using formula according to mapSize."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param mapSize size of map grid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Fleet (int mapSize) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this((mapSize + 2) / 5, mapSize - 5, 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Constructor for a fleet with placeholder ship names."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param numDestroyer number of destroyers."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param numCruiser number of cruisers."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param numAircraftCarrier number of aircraft carriers."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Fleet(int numDestroyer, int numCruiser, int numAircraftCarrier)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throws IllegalArgumentException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (numDestroyer + numCruiser + numAircraftCarrier \u003c\u003d 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.numAircraftCarrier \u003d numAircraftCarrier;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.numCruiser \u003d numCruiser;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.numDestroyer \u003d numDestroyer;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.numDestroyerLeft \u003d numDestroyer;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.numCruiserLeft \u003d numCruiser;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.numAircraftCarrierLeft \u003d numAircraftCarrier;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.deployedFleet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Calculates the number of ships in the deployed fleet."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return size of the fleet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.numDestroyerLeft + this.numCruiserLeft + this.numAircraftCarrierLeft;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public ArrayList\u003cFleetEntry\u003e getDeployedFleet() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.deployedFleet;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Resets the fleet."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param mapSize size of the map grid."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void resetFleet(int mapSize) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.numDestroyerLeft \u003d (mapSize + 2) / 5;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.numCruiserLeft \u003d mapSize - 5;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.numAircraftCarrierLeft \u003d 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.deployedFleet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Deploys one ship. Checks class of ship to do so."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param battleship battleship object."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param coordinates coordinates of the battleship."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param orientation orientation of the battleship."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void deployOneBattleship(Battleship battleship, Coordinates coordinates, Orientation orientation) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (battleship instanceof DestroyerBattleship) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iwle"
        },
        "content": "            this.numDestroyerLeft--;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else if (battleship instanceof CruiserBattleship) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iwle"
        },
        "content": "            this.numCruiserLeft--;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else if (battleship instanceof AircraftCarrierBattleship) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iwle"
        },
        "content": "            this.numAircraftCarrierLeft--;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.deployedFleet.add(new FleetEntry("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iwle"
        },
        "content": "                battleship,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iwle"
        },
        "content": "                coordinates,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iwle"
        },
        "content": "                orientation));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks if there are enough battleships. Returns true or false."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param battleship battleship object."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param numBattleship number of battleships."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return whether there are enough battleships."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isEnoughBattleship(Battleship battleship, int numBattleship) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iwle"
        },
        "content": "        if (battleship instanceof DestroyerBattleship) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return numBattleship \u003c\u003d this.getNumDestroyerLeft();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else if (battleship instanceof CruiserBattleship) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return numBattleship \u003c\u003d this.getNumCruiserLeft();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } else if (battleship instanceof AircraftCarrierBattleship) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return numBattleship \u003c\u003d this.getNumAircraftCarrierLeft();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Get list of battleship by class."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param battleshipClass class of battleship."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return list of battleships that are of that class."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public List\u003cFleetEntry\u003e getListOfBattleship(Class battleshipClass) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.deployedFleet"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .filter(entry -\u003e entry.getBattleship().getClass().equals(battleshipClass))"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Getter method for number of destroyers left."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return number of destroyers left."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public int getNumDestroyerLeft() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.numDestroyerLeft;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Getter method for number of cruisers left."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return number of cruisers left."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public int getNumCruiserLeft() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.numCruiserLeft;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Getter method for number of aircraft carriers left."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return number of aircraft carriers left."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public int getNumAircraftCarrierLeft() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.numAircraftCarrierLeft;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Gets all tags that have been used by all battleships in the fleet."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return set of all tags used by all battleships in the fleet."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Set\u003cTag\u003e getAllTags() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (FleetEntry fleetEntry : this.getDeployedFleet()) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (Tag tag : fleetEntry.getBattleship().getTags()) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iwle"
        },
        "content": "                tagSet.add(tag);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Gets list of {@code FleetEntry}s that have {@code Battleship}s containing all"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * the specified tags from the fleet."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param tagSet set of tags."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return list of fleet entries that have battleships matching all the tags."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public List\u003cFleetEntry\u003e getByTags(Set\u003cTag\u003e tagSet) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.getDeployedFleet().stream()"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .filter(fleetEntry -\u003e fleetEntry.getBattleship()"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iwle"
        },
        "content": "                        .getTags()"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iwle"
        },
        "content": "                        .containsAll(tagSet))"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Gets list of {@code FleetEntry}s that have {@code Battleship}s containing all"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * the specified name from the fleet."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param name name of battleship."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return list of fleet entries that have battleships matching the name."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public List\u003cFleetEntry\u003e getByName(Name name) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.getDeployedFleet().stream()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .filter(fleetEntry -\u003e fleetEntry.getBattleship().getName().equals(name))"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Gets list of {@code FleetEntry}s that have {@code Battleship}s containing all"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * the specified names from the fleet."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @param nameSet set of names of battleships."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return list of fleet entries that have battleships matching the names."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public List\u003cFleetEntry\u003e getByNames(Set\u003cName\u003e nameSet) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iwle"
        },
        "content": "        ArrayList\u003cFleetEntry\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (FleetEntry fleetEntry : this.deployedFleet) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iwle"
        },
        "content": "            if (nameSet.contains(fleetEntry.getBattleship().getName())) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iwle"
        },
        "content": "                result.add(fleetEntry);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks if all battleships have been deployed."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return boolean of whether all battleships have been deployed."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isAllDeployed() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.getListOfBattleship(DestroyerBattleship.class).size() \u003d\u003d this.numDestroyer"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \u0026\u0026 this.getListOfBattleship(CruiserBattleship.class).size() \u003d\u003d this.numCruiser"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \u0026\u0026 this.getListOfBattleship(AircraftCarrierBattleship.class).size() \u003d\u003d this.numAircraftCarrier;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Checks if all the battleships in a deployed fleet are destroyed."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return boolean of whether all battleships have zero life, i.e., are destroyed."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public boolean isAllDestroyed() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iwle"
        },
        "content": "        boolean isAllDestroyed \u003d true;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (FleetEntry fleetEntry : this.getDeployedFleet()) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iwle"
        },
        "content": "            if (!fleetEntry.getBattleship().isDestroyed()) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iwle"
        },
        "content": "                isAllDestroyed \u003d false;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return isAllDestroyed;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Gets the fleet as a string containing information about its size and contents."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iwle"
        },
        "content": "     *"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * @return string of fleet size and contents."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getSize())"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Fleet size: \")"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getSize())"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Fleet contents: \")"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(getDeployedFleet());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Represents an entry in the fleet. To describe the orientation and coordinates"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * of a given battleship."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static class FleetEntry {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "iwle"
        },
        "content": "        private final Battleship battleship;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "iwle"
        },
        "content": "        private final Orientation orientation;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "iwle"
        },
        "content": "        private final Coordinates coordinates;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "iwle"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "iwle"
        },
        "content": "         * Default constructor method."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "iwle"
        },
        "content": "         *"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "iwle"
        },
        "content": "         * @param battleship battleship object."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "iwle"
        },
        "content": "         * @param coordinates coordinates of the battleship on the map grid."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "iwle"
        },
        "content": "         * @param orientation orientation of the battleship on the map grid."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "iwle"
        },
        "content": "         */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "iwle"
        },
        "content": "        public FleetEntry(Battleship battleship, Coordinates coordinates, Orientation orientation) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "iwle"
        },
        "content": "            this.battleship \u003d battleship;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "iwle"
        },
        "content": "            this.coordinates \u003d coordinates;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iwle"
        },
        "content": "            this.orientation \u003d orientation;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "iwle"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "iwle"
        },
        "content": "         * Getter method for battleship."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "iwle"
        },
        "content": "         *"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "iwle"
        },
        "content": "         * @return battleship."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "iwle"
        },
        "content": "         */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "iwle"
        },
        "content": "        public Battleship getBattleship() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return battleship;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "iwle"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "iwle"
        },
        "content": "         * Getter method for coordinates."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "iwle"
        },
        "content": "         *"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "iwle"
        },
        "content": "         * @return coordinates of the battleship."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "iwle"
        },
        "content": "         */"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "iwle"
        },
        "content": "        public Coordinates getCoordinates() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return coordinates;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "iwle"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "iwle"
        },
        "content": "         * Getter method for orientation."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "iwle"
        },
        "content": "         *"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "iwle"
        },
        "content": "         * @return orientation of the battleship."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "iwle"
        },
        "content": "         */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "iwle"
        },
        "content": "        public Orientation getOrientation() {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return orientation;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "iwle"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "iwle"
        },
        "content": "         * String containing information about the {@code FleetEntry}, including the"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "iwle"
        },
        "content": "         * battleship, its coordinates and its orientation on the map grid."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "iwle"
        },
        "content": "         *"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "iwle"
        },
        "content": "         * @return string with information about the fleet entry."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "iwle"
        },
        "content": "         */"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "iwle"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "iwle"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "iwle"
        },
        "content": "            StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "iwle"
        },
        "content": "            builder.append(this.getBattleship())"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .append(\" (\")"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .append(this.getBattleship().getLife())"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .append(\"/\")"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .append(this.getBattleship().getLength())"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .append(\")\")"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .append(\" at \")"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .append(this.getCoordinates())"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .append(\" \")"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .append(this.getOrientation())"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    .append(\" \");"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "iwle"
        },
        "content": "            this.getBattleship().getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return builder.toString();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "iwle"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "iwle"
        },
        "content": "         * Checks if two given {@code FleetEntry}s are equal. Compares the battleship,"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "iwle"
        },
        "content": "         * coordinates, and orientation."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "iwle"
        },
        "content": "         *"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "iwle"
        },
        "content": "         * @param other other object."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "iwle"
        },
        "content": "         * @return boolean of whether the two objects are equal."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "iwle"
        },
        "content": "         */"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "iwle"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "iwle"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "iwle"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "iwle"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "iwle"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "iwle"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "iwle"
        },
        "content": "            if (!(other instanceof FleetEntry)) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "iwle"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "iwle"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "iwle"
        },
        "content": "            FleetEntry e \u003d (FleetEntry) other;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "iwle"
        },
        "content": "            return this.battleship.equals(e.getBattleship())"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    \u0026\u0026 this.coordinates.equals(e.getCoordinates())"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "iwle"
        },
        "content": "                    \u0026\u0026 this.orientation.equals(e.getOrientation());"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 351,
      "lucydotc": 9,
      "s-tr": 1,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/player/Player.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucydotc"
        },
        "content": " * This class implements a{@code Player} in the game."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucydotc"
        },
        "content": " * The {@code Player} has a {@code Enemy} as its child."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucydotc"
        },
        "content": " * @author lucydotc"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucydotc"
        },
        "content": " * @version 1.4"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucydotc"
        },
        "content": " * @since 2019-03-05"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class Player {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final int DEFAULT_NUM_AIRCRAFT_CARRIER \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final int DEFAULT_NUM_CRUISER \u003d 2;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final int DEFAULT_NUM_DESTROYER \u003d 5;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private static final String VALID_NAME_REGEX \u003d \"^[a-zA-Z0-9]{3,16}$\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Name should contain only alphanumerical characters,\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            + \"with no whitespaces.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            + \"and be of length 3 to 16 characters, inclusive.\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int fleetSize;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Fleet fleet;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private final MapGrid mapGrid;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Set\u003cCoordinates\u003e targetHistory \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * This method is a constructor for the {@code Player} object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * @param name The name of the {@code Player}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * @param numDestroyer The number of {@code Destroyers} available for the {@code Player} to deploy"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * @param numCruiser The number of {@code Cruiser} available for the {@code Player} to deploy"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * @param numAircraftCarrier The number of {@code Aircraft Carrier} available for the {@code Player} to deploy"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public Player(String name, int numDestroyer, int numCruiser, int numAircraftCarrier) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.fleetSize \u003d numDestroyer + numCruiser + numAircraftCarrier;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this.fleet \u003d new Fleet(DEFAULT_NUM_DESTROYER, DEFAULT_NUM_CRUISER, DEFAULT_NUM_AIRCRAFT_CARRIER);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        this.mapGrid \u003d new MapGrid();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * This method is the default constructor for the {@code Player}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public Player() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "        this(\"Player1\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "                DEFAULT_NUM_DESTROYER,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": "                DEFAULT_NUM_CRUISER,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "                DEFAULT_NUM_AIRCRAFT_CARRIER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * This method attempts to add targeted coordinates to the {@code Player}\u0027s targetHistory"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * It checks for duplicates, and returns False if adding failed (duplicate found)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Returns True if adding succeeded (coordinate added to targetHistory)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public boolean addToTargetHistory(Coordinates target) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return this.targetHistory.add(target);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * This a getter method that returns the name of the {@code Player}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * This method resets the deployed fleet of the {@code Player}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * and is called when resetting or starting a new game."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void resetFleet(int mapSize) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        fleet.resetFleet(mapSize);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * This method resets the targetHistory of the {@code Player}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * and is called when resetting or starting a new game."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void resetTargetHistory() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        targetHistory \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * This a getter method that returns thesize of the {@code Player}\u0027s fleet"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * @return int"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getFleetSize() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.fleetSize;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * This a getter method that returns the {@code Fleet} of the {@code Player}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * @return Fleet"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public Fleet getFleet() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.fleet;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * This a getter method that returns the contents of the {@code Fleet} belonging to the {@code Player}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * @return ArrayList"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList getFleetContents() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.fleet.getDeployedFleet();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * This a getter method that returns the {@code MapGrid} belonging to the {@code Player}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * @return MapGrid"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public MapGrid getMapGrid() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return this.mapGrid;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * This a getter method that returns the {@code targetHistory} belonging to the {@code Player}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * @return Set"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public Set getTargetHistory() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return this.targetHistory;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * This a method that checks if the supplied name to the {@Player} constructor is valid"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * @param name The supplied name for the {@code Player}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * If valid, return true."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * If invalid, return false."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public static boolean isValidName(String name) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return Pattern.matches(VALID_NAME_REGEX, name) \u0026\u0026 !name.equals(\"Enemy\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * This method overrides the default toString method"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * to allow for comparison of multiple {@code Player} objects"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Name: \")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                .append(getFleet())"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                .append(Arrays.toString(targetHistory.toArray()));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 8,
      "iwle": 24,
      "lucydotc": 99,
      "s-tr": 2,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/PlayerStatistics.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bos10"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": " * PlayerStatistics is the statistics for the Player."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": " * @author bos10"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "public class PlayerStatistics extends Statistics {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public PlayerStatistics() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bos10"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/Statistics.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bos10"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.result.AttackResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bos10"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bos10"
        },
        "content": " * A Statistics Class tracks the key game play information."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": " * @author bos10"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bos10"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bos10"
        },
        "content": "public abstract class Statistics {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(Statistics.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": "    protected int hitCount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": "    protected int missCount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": "    protected int movesMade;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bos10"
        },
        "content": "    protected int enemyShipsDestroyed;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bos10"
        },
        "content": "    protected int attackCount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bos10"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * initialization of class will begin with default configuration."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public Statistics() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bos10"
        },
        "content": "        defaultConfig();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * assigns the class attributes with default values of a NEW game"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private void defaultConfig() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logger.info(\"Statistics Initialized\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.hitCount \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.missCount \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.enemyShipsDestroyed \u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.attackCount \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.movesMade \u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * increments the hit count by 1."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @return incremented hitCount"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public int addHit() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bos10"
        },
        "content": "        ++this.hitCount;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logger.info(\"Increment Successful Hit to \" + this.hitCount);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return this.hitCount;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * increments the num of enemy ships destroyed by 1."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @return number of enemy ships destroyed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public int enemyShipsDestroyed() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bos10"
        },
        "content": "        ++this.enemyShipsDestroyed;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logger.info(\"Increment Ships Destroyed to \" + this.enemyShipsDestroyed);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return this.enemyShipsDestroyed;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @return the number of enemy Ships destroyed by player"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public int getEnemyShipsDestroyed() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return this.enemyShipsDestroyed;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * increments the miss count by 1."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @return incremented missCount"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public int addMiss() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bos10"
        },
        "content": "        ++this.missCount;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logger.info(\"Increment Miss to \" + this.missCount);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return this.missCount;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * decrements the number of moves left."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @return the decremented number of moves"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public int addMove() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bos10"
        },
        "content": "        ++this.movesMade;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logger.info(\"Increment moves to : \" + this.movesMade);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return this.movesMade;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * increments number of attack by 1."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @return the current number of attacks."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public int addAttack() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bos10"
        },
        "content": "        ++this.attackCount;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logger.info(\"Increment attacks made to  \" + this.attackCount);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return this.attackCount;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public int getAttacksMade() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return this.attackCount;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public int getMovesMade() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return this.movesMade;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public int getHitCount() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return this.hitCount;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public int getMissCount() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return this.missCount;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * returns the hit-miss percentage of the user."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public double getAccuracy() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bos10"
        },
        "content": "        if (hitCount \u003d\u003d 0 \u0026\u0026 missCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bos10"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bos10"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return (double) hitCount / (double) (hitCount + missCount);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void setHitCount(int num) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.hitCount \u003d num;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void setMissCount(int num) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.missCount \u003d num;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void setMovesMade(int num) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.movesMade \u003d num;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void setEnemyShipsDestroyed(int num) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.enemyShipsDestroyed \u003d num;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void setAttackCount(int num) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.attackCount \u003d num;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * extracts the result from AttackResult string and add to stats."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param res , the result of the attack made."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void addResultToStats(AttackResult res) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        if (res.isHit()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "bos10"
        },
        "content": "            addHit();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            if (res.isDestroy()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "bos10"
        },
        "content": "                enemyShipsDestroyed();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "bos10"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            addMiss();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * This will generate the required data format for the bar charts."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @return the formatted data."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public XYChart.Series\u003cString, Number\u003e generateData() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logger.info(\"Generating Statistical Data\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        XYChart.Series\u003cString, Number\u003e dataSeries1 \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        dataSeries1.getData().add(new XYChart.Data\u003c\u003e(\"Attacks\", getAttacksMade()));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        dataSeries1.getData().add(new XYChart.Data\u003c\u003e(\"Hits\", getHitCount()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        dataSeries1.getData().add(new XYChart.Data\u003c\u003e(\"Misses\", getMissCount()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        dataSeries1.getData().add(new XYChart.Data\u003c\u003e(\"Ships Destroyed\", getEnemyShipsDestroyed()));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return dataSeries1;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public Storage getStorage() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return this.storage;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * This will store the statisticsData into Storage component"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param statisticsData"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void saveToStorage(PlayerStatistics statisticsData) throws IOException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logger.info(\"Saving Statistics Data to Storage\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.storage.saveStatisticsData(statisticsData);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * Set the storage location inside the PlayerStatistics Object."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param storage"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void setStorage(Storage storage) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logger.info(\"Set Storage Location for Statistics\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * Resets the statistics data with the default configuration."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void resetData() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logger.info(\"Rest Data\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "bos10"
        },
        "content": "        defaultConfig();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "bos10"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 186,
      "s-tr": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Represents a Tag in the game."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(Tag.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "        logger.info(\"CREATED NEW TAG.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Returns tag name as String."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return this.tagName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 15,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableStatistics.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bos10"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.statistics.PlayerStatistics;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bos10"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bos10"
        },
        "content": " * the JsonSerializableStatistics will format the statistics class in a json serializable way."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": " * @author bos10"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bos10"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bos10"
        },
        "content": "@JsonRootName(value \u003d \"statistics\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bos10"
        },
        "content": "public class JsonSerializableStatistics {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private String hitCount \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private String missCount \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private String movesMade \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private String enemyShipsDestroyed \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private String attackCount \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * Converts statistics information to Json property."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param hitCount"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param missCount"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param movesMade"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param enemyShipsDestroyed"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param attackCount"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public JsonSerializableStatistics(@JsonProperty(\"hitCount\") String hitCount,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bos10"
        },
        "content": "        @JsonProperty(\"missCount\") String missCount,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bos10"
        },
        "content": "        @JsonProperty(\"movesMade\") String movesMade,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bos10"
        },
        "content": "        @JsonProperty(\"enemyShipsDestroyed\") String enemyShipsDestroyed,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bos10"
        },
        "content": "        @JsonProperty(\"attackCount\") String attackCount) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.hitCount \u003d hitCount;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.missCount \u003d missCount;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.movesMade \u003d movesMade;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.enemyShipsDestroyed \u003d enemyShipsDestroyed;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.attackCount \u003d attackCount;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * Converts this json statistics data to the PlayerStatistics object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bos10"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public PlayerStatistics toModelType() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bos10"
        },
        "content": "        PlayerStatistics playerStats \u003d new PlayerStatistics();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bos10"
        },
        "content": "        playerStats.setHitCount(Integer.parseInt(this.hitCount));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bos10"
        },
        "content": "        playerStats.setMissCount(Integer.parseInt(this.missCount));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bos10"
        },
        "content": "        playerStats.setMovesMade(Integer.parseInt(this.movesMade));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bos10"
        },
        "content": "        playerStats.setEnemyShipsDestroyed(Integer.parseInt(this.enemyShipsDestroyed));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bos10"
        },
        "content": "        playerStats.setAttackCount(Integer.parseInt(this.attackCount));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return playerStats;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bos10"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonStatisticsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bos10"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.statistics.PlayerStatistics;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bos10"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": " * A class to access MapGrid data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": " * @author bos10"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bos10"
        },
        "content": "public class JsonStatisticsStorage implements StatisticsStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonStatisticsStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public JsonStatisticsStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public Path getStatisticsFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public Optional\u003cPlayerStatistics\u003e readStatisticsData() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return readStatisticsData(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * retrives the statistics data values frm json file at specified filepath."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @throws DataConversionException"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public Optional\u003cPlayerStatistics\u003e readStatisticsData(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bos10"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bos10"
        },
        "content": "        Optional\u003cJsonSerializableStatistics\u003e jsonStatisticsData \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bos10"
        },
        "content": "                filePath, JsonSerializableStatistics.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bos10"
        },
        "content": "        if (!(jsonStatisticsData.isPresent())) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bos10"
        },
        "content": "            logger.info(\"No previous statistics found.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bos10"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bos10"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return Optional.of(jsonStatisticsData.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void saveStatisticsData(PlayerStatistics statisticsData) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bos10"
        },
        "content": "        saveStatisticsData(statisticsData, filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * Saves statistics data to specified filePath."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void saveStatisticsData(PlayerStatistics statisticsData, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bos10"
        },
        "content": "        requireNonNull(statisticsData);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bos10"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bos10"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String hitCount \u003d String.valueOf(statisticsData.getHitCount());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String missCount \u003d String.valueOf(statisticsData.getMissCount());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String movesMade \u003d String.valueOf(statisticsData.getMovesMade());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String enemyShipsDestroyed \u003d String.valueOf(statisticsData.getEnemyShipsDestroyed());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String attacksMade \u003d String.valueOf(statisticsData.getAttacksMade());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bos10"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableStatistics(hitCount, missCount, movesMade,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bos10"
        },
        "content": "                                        enemyShipsDestroyed, attacksMade), filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bos10"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StatisticsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bos10"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.statistics.PlayerStatistics;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bos10"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bos10"
        },
        "content": " * Represents a storage for PlayerStatistics Objects\\"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": " * @author bos10"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bos10"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bos10"
        },
        "content": "public interface StatisticsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * Gets the current specified filePath of where statistics data is stored."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": "    Path getStatisticsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * Calls the SaveStatisticsData with a specified filepath."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param statisticsData"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bos10"
        },
        "content": "    void saveStatisticsData(PlayerStatistics statisticsData) throws IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * Saves the statistics data into the specified filepath."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param statisticsData"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bos10"
        },
        "content": "    void saveStatisticsData(PlayerStatistics statisticsData, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * Calls the readStatisticsData method with a specified filepath."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bos10"
        },
        "content": "    Optional\u003cPlayerStatistics\u003e readStatisticsData() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * Read the stored statistics data (if any) at the specified filePath."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @throws DataConversionException"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bos10"
        },
        "content": "    Optional\u003cPlayerStatistics\u003e readStatisticsData(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bos10"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.statistics.PlayerStatistics;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bos10"
        },
        "content": " * @author bos10"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bos10"
        },
        "content": "public interface Storage extends UserPrefsStorage, StatisticsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * Reads the specified userPref stored in the config file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @throws DataConversionException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * Saves the specified userPref stored into the config file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * Saves the current game statistics data into storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param statisticsData"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bos10"
        },
        "content": "    void saveStatisticsData(PlayerStatistics statisticsData) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 20,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.statistics.PlayerStatistics;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bos10"
        },
        "content": " * Manages storage of Player Statistics data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bos10"
        },
        "content": " * @author bos10"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private StatisticsStorage statisticsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * Initializes the StorageManager object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param userPrefsStorage"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param statisticsStorage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public StorageManager(UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bos10"
        },
        "content": "                          StatisticsStorage statisticsStorage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.statisticsStorage \u003d statisticsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logger.info(\"Initialized StorageManager\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bos10"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Statistics Storage methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public Path getStatisticsFilePath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return statisticsStorage.getStatisticsFilePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void saveStatisticsData(PlayerStatistics statisticsData) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bos10"
        },
        "content": "        saveStatisticsData(statisticsData, statisticsStorage.getStatisticsFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * Takes the statisticsData and store its JSON into specified filePath."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bos10"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param statisticsData"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void saveStatisticsData(PlayerStatistics statisticsData, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logger.fine(\"Attempting to save statistics to file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bos10"
        },
        "content": "        statisticsStorage.saveStatisticsData(statisticsData, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public Optional\u003cPlayerStatistics\u003e readStatisticsData() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return readStatisticsData(statisticsStorage.getStatisticsFilePath());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public Optional\u003cPlayerStatistics\u003e readStatisticsData(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return statisticsStorage.readStatisticsData(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 33,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EnemyMap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.beans.value.ObservableBooleanValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Status;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class EnemyMap extends Map {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public EnemyMap(ObservableBooleanValue modelUpdateObservable, MapGrid mapGrid) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        super(modelUpdateObservable, mapGrid);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    protected Status[][] getMapView(MapGrid mapGrid) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return mapGrid.getEnemyMapView();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private PlayerMap playerMap;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private EnemyMap enemyMap;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private StatusBarFooter statusBarFooter;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private StackPane statusbarPlaceholder2;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private StackPane statspanePlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) { //Put"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // add action to take on closing window"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        primaryStage.getScene().getWindow().addEventFilter(WindowEvent.WINDOW_CLOSE_REQUEST, this::handleExit);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        playerMap \u003d new PlayerMap(logic.getHumanMapObservable(), logic.getHumanMapGrid());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(playerMap.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        enemyMap \u003d new EnemyMap(logic.getEnemyMapObservable(), logic.getEnemyMapGrid());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        browserPlaceholder.getChildren().add(enemyMap.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bos10"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooter();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        handleExit(null);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private void handleExit(Event evt) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // stop the Timer"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        if (statusBarFooter !\u003d null) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            statusBarFooter.stopTimer();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public PlayerMap getPlayerMap() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return playerMap;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 8,
      "s-tr": 18,
      "bos10": 9,
      "-": 190
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Map.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.beans.value.ObservableBooleanValue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.scene.shape.Rectangle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Status;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public abstract class Map extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private static final String FXML \u003d \"PlayerMap.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(Map.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private int columnLabel \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private char rowLabel \u003d \u0027A\u0027;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private VBox grid;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public Map(ObservableBooleanValue modelUpdateObservable, MapGrid mapGrid) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        modelUpdateObservable.addListener(observable -\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            refreshMap(mapGrid);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        });"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Refreshes the map in the UI"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * @param mapGrid to be displayed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private void refreshMap(MapGrid mapGrid) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        int size \u003d mapGrid.getMapSize();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Status[][] mapView \u003d getMapView(mapGrid);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        columnLabel \u003d 1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        rowLabel \u003d \u0027A\u0027;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        grid.getChildren().clear();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        for (int i \u003d 0; i \u003c size + 1; i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            HBox row \u003d new HBox();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            for (int j \u003d 0; j \u003c size + 1; j++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                StackPane sp;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                // First row and column are used for labels"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                if (i \u003d\u003d 0 \u0026\u0026 j \u003d\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                    sp \u003d getUiCell(\"\", Color.WHITE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                } else if (i \u003d\u003d 0) { // if first row"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                    sp \u003d getRowLabelCell();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                } else if (j \u003d\u003d 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                    sp \u003d getColumnLabelCell();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                    sp \u003d getUiCell(\"\", getColor(mapView[i - 1][j - 1]));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                row.getChildren().add(sp);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            grid.getChildren().add(row);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private StackPane getUiCell(String label, Color fillColour) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Rectangle cell \u003d new Rectangle(30, 30);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        cell.setStroke(Color.BLACK);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        cell.setFill(fillColour);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Text text \u003d new Text(label);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        StackPane sp \u003d new StackPane();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        sp.getChildren().addAll(cell, text);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return sp;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public StackPane getColumnLabelCell() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        StackPane sp \u003d getUiCell(String.valueOf(rowLabel++), Color.WHITE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return sp;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public StackPane getRowLabelCell() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        StackPane sp \u003d getUiCell(String.valueOf(columnLabel++), Color.WHITE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return sp;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    protected abstract Status[][] getMapView(MapGrid mapGrid);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * Determine color of cell from the status of cell"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    Color getColor(Status status) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        switch (status) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        case HIDDEN:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            return Color.CADETBLUE;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        case SHIP:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            return Color.BLACK;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        case SHIPHIT:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            return Color.ORANGE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        case EMPTY:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            return Color.LIGHTBLUE;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        case EMPTYHIT:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            return Color.DARKBLUE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        case DESTROYED:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            return Color.RED;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            return Color.WHITE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 114,
      "iwle": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PlayerMap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.beans.value.ObservableBooleanValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Status;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class PlayerMap extends Map {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public PlayerMap(ObservableBooleanValue modelUpdateObservable, MapGrid mapGrid) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        super(modelUpdateObservable, mapGrid);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    protected Status[][] getMapView(MapGrid mapGrid) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return mapGrid.getPlayerMapView();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatisticView.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bos10"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bos10"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bos10"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bos10"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bos10"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bos10"
        },
        "content": " *  Initializes the Statistics Pop-up Window."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bos10"
        },
        "content": " * @author bos10"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": "public class StatisticView extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String WINDOW_TITLE \u003d \"Gameplay Summary\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private static final String FXML \u003d \"StatisticView.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private StackPane statisticView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * Constructor for the pop-up window."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param root"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param statsData"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public StatisticView(Stage root, XYChart.Series\u003cString, Number\u003e statsData) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bos10"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bos10"
        },
        "content": "        CategoryAxis xAxis \u003d new CategoryAxis();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bos10"
        },
        "content": "        NumberAxis yAxis \u003d new NumberAxis();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bos10"
        },
        "content": "        BarChart\u003cString, Number\u003e statsChart \u003d new BarChart\u003c\u003e(xAxis, yAxis);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bos10"
        },
        "content": "        statsChart.getData().add(statsData);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bos10"
        },
        "content": "        statsChart.setLegendVisible(false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        statsChart.setTitle(WINDOW_TITLE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bos10"
        },
        "content": "        xAxis.setLabel(\"Your Statistics\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bos10"
        },
        "content": "        yAxis.setLabel(\"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bos10"
        },
        "content": "        statisticView.getChildren().add(statsChart);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bos10"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * Opens pop-up window for statistics."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bos10"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logger.fine(\"Displaying Statistics\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bos10"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bos10"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 50,
      "s-tr": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Elapsed Time: %s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //TOREMOVE private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private long startTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label syncStatus;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private Timer myTimer \u003d new Timer();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private TimerTask task \u003d new TimerTask() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bos10"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bos10"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bos10"
        },
        "content": "                Platform.runLater(()-\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bos10"
        },
        "content": "                    updateSyncStatus();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bos10"
        },
        "content": "                });"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bos10"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bos10"
        },
        "content": "    };"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public StatusBarFooter() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bos10"
        },
        "content": "        this.startTime \u003d System.nanoTime();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bos10"
        },
        "content": "        myTimer.scheduleAtFixedRate(task, 1000, 1000);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Stops the internal Timer that increments the time display."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void stopTimer() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        myTimer.cancel();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * Updates elapsed time"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private void updateSyncStatus() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String elapsedTime \u003d convert(getElapsedTime(System.nanoTime()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bos10"
        },
        "content": "        syncStatus.setText(String.format(SYNC_STATUS_UPDATED, elapsedTime));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bos10"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param endTime"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public long getElapsedTime(long endTime) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bos10"
        },
        "content": "        long elapsedTimeSeconds \u003d (endTime - this.startTime) / (1000000000);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return elapsedTimeSeconds;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * @param secondsToConvert in seconds to convert"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private String convert(long secondsToConvert) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bos10"
        },
        "content": "        long millis \u003d secondsToConvert * 1000;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bos10"
        },
        "content": "        long hours \u003d TimeUnit.MILLISECONDS.toHours(millis);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bos10"
        },
        "content": "        long minutes \u003d TimeUnit.MILLISECONDS.toMinutes(millis) % TimeUnit.HOURS.toMinutes(1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bos10"
        },
        "content": "        long seconds \u003d TimeUnit.MILLISECONDS.toSeconds(millis) % TimeUnit.MINUTES.toSeconds(1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bos10"
        },
        "content": "        String format \u003d String.format(\"%02d:%02d:%02d\", Math.abs(hours), Math.abs(minutes), Math.abs(seconds));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bos10"
        },
        "content": "        return format;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 41,
      "s-tr": 3,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/battleship.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "-": 85
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bos10"
        },
        "content": ".stats-pane {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "bos10"
        },
        "content": "    -fx-background-color: derive(#dd1144, 50%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "bos10"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "bos10"
        },
        "content": ".chart-bar {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bos10"
        },
        "content": "    -fx-background-color: rgba(0,168,355,0.5);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bos10"
        },
        "content": "    -fx-border-color: rgba(0,168,355,0.3) rgba(0,168,355,0.3)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "bos10"
        },
        "content": "    transparent rgba(0,168,355,0.3);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "bos10"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "bos10"
        },
        "content": "    -fx-background-position: left center;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "bos10"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 15,
      "-": 351
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "         title\u003d\"Battleship\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    \u003cImage url\u003d\"@/images/battleship.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"200\" maxHeight\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "          \u003cVBox fx:id\u003d\"cellList\" minWidth\u003d\"400\" prefWidth\u003d\"400\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            \u003cStackPane\u003e\u003cText text\u003d\"Your board\" fill\u003d\"white\"\u003e\u003c/Text\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bos10"
        },
        "content": "            \u003cStackPane fx:id\u003d\"statusbarPlaceholder2\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "          \u003cVBox fx:id\u003d\"enemyMap\" minWidth\u003d\"400\" prefWidth\u003d\"400\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            \u003cStackPane\u003e\u003cText text\u003d\"Enemy board\" fill\u003d\"white\"\u003e\u003c/Text\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            \u003cStackPane fx:id\u003d\"browserPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" \u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 11,
      "lucydotc": 1,
      "bos10": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/resources/view/PlayerMap.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "\u003cVBox fx:id\u003d\"grid\" fillWidth\u003d\"false\" alignment\u003d\"CENTER\" xmlns\u003d\"http://javafx.com/javafx/8.0.172-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/resources/view/StatisticView.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bos10"
        },
        "content": "         title\u003d\"Statistics\" minWidth\u003d\"400\" minHeight\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bos10"
        },
        "content": "        \u003cImage url\u003d\"@/images/battleship.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bos10"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bos10"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bos10"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bos10"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bos10"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bos10"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"ALWAYS\" fx:id\u003d\"statisticView\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bos10"
        },
        "content": "                           prefWidth\u003d\"600\" prefHeight\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bos10"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bos10"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bos10"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bos10"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bos10"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bos10"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bos10"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "bos10": 32
    }
  },
  {
    "path": "src/main/resources/view/StatsPane.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c!--\u003cGridPane styleClass\u003d\"stats-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e--\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "    \u003c!--\u003ccolumnConstraints\u003e--\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bos10"
        },
        "content": "        \u003c!--\u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e--\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": "        \u003c!--\u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" halignment\u003d\"RIGHT\" /\u003e--\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bos10"
        },
        "content": "    \u003c!--\u003c/columnConstraints\u003e--\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bos10"
        },
        "content": "    \u003c!--\u003cLabel fx:id\u003d\"syncStatus\"/\u003e--\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": "    \u003c!--\u003cLabel fx:id\u003d\"saveLocationStatus\" GridPane.columnIndex\u003d\"1\" /\u003e--\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c!--\u003c/GridPane\u003e--\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003cVBox fx:id\u003d\"grid\" fillWidth\u003d\"false\" alignment\u003d\"CENTER\" xmlns\u003d\"http://javafx.com/javafx/8.0.172-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003cLabel fx:id\u003d\"shipCount\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c!--\u003cLabel fx:id\u003d\"saveLocationStatus\" GridPane.columnIndex\u003d\"1\" /\u003e--\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bos10"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "bos10": 21
    }
  },
  {
    "path": "src/test/data/JsonSerializableStatistics/statsTest.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bos10"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bos10"
        },
        "content": "  \"hitCount\" : \"0\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": "  \"missCount\" : \"0\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": "  \"movesMade\" : \"0\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": "  \"enemyShipsDestroyed\" : \"0\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": "  \"attackCount\" : \"0\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 7
    }
  },
  {
    "path": "src/test/data/JsonSerializableStatistics/statsTest2.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bos10"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bos10"
        },
        "content": "  \"hitCount\" : \"1\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": "  \"missCount\" : \"1\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": "  \"movesMade\" : \"0\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": "  \"enemyShipsDestroyed\" : \"0\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": "  \"attackCount\" : \"0\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 7
    }
  },
  {
    "path": "src/test/data/JsonSerializableStatistics/statsTest3.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bos10"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bos10"
        },
        "content": "  \"hitCount\" : \"1\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": "  \"missCount\" : \"2\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": "  \"movesMade\" : \"0\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": "  \"enemyShipsDestroyed\" : \"0\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": "  \"attackCount\" : \"0\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 7
    }
  },
  {
    "path": "src/test/data/JsonSerializableStatistics/statsTeststatsCommand.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bos10"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bos10"
        },
        "content": "  \"hitCount\" : \"0\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": "  \"missCount\" : \"0\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": "  \"movesMade\" : \"0\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": "  \"enemyShipsDestroyed\" : \"0\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": "  \"attackCount\" : \"0\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bos10"
        },
        "content": "        // STORAGE TEST"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //    JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(saveFileLocation);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //    try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //        jsonAddressBookStorage.saveAddressBook(initialDataSupplier.get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //    } catch (IOException ioe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //        throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public MapGrid readStorageAddressBook() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            return new MapGrid(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            throw new AssertionError(\"Data is not in the MapGrid format.\", dce);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //    return storage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 4,
      "bos10": 13,
      "-": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/battle/BattleManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.battle;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static seedu.address.testutil.SizeTenMapGrid.initialisePlayerSizeTen;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static seedu.address.testutil.SizeTenMapGrid.setUpAlmostDefeat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static seedu.address.testutil.SizeTenMapGrid.setUpAlmostDestroy;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static seedu.address.testutil.SizeTenMapGrid.setUpSingleShip;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.result.AttackDefeatedEnemy;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.result.AttackDestroyedShip;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.result.AttackFailed;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.result.AttackHit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.result.AttackMissed;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.result.AttackResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.testutil.EvilEnemy;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.testutil.InterceptedEnemy;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class BattleManagerTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Player player;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private InterceptedEnemy enemy;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private BattleManager batMan;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void prepareModel() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        player \u003d new Player();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        enemy \u003d new InterceptedEnemy();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        initialisePlayerSizeTen(player);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        initialisePlayerSizeTen(enemy);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        batMan \u003d new BattleManager(player, enemy);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Expected result:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     beginGame() calls the prepEnemy() method of Enemy."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void beginGame_callsPrepEnemy_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        batMan.beginGame();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(enemy.isPrepCalled());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Setup:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Enemy has one ship vertically, on a1"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Human attacks A1"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Expected result:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Human attack hits ship at A1"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Ship HP decreases"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     a Hit AttackResult is returned"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void humanPerformAttack_hit_hits() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Battleship ship \u003d setUpSingleShip(enemy);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        int initialLife \u003d ship.getLife();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackResult res \u003d batMan.humanPerformAttack(TypicalIndexes.COORDINATES_A1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(ship.getLife() \u003c initialLife);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.isHit());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Setup:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Enemy has one ship vertically, on a1, with 1HP remaining"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Enemy has another ship somewhere"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Human attacks A1"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Expected result:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Human attack hits ship at A1"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Ship HP decreases"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     a Hit AttackResult is returned"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void humanPerformAttack_destroyShip_destroys() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Battleship ship1 \u003d setUpAlmostDestroy(enemy);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackResult res \u003d batMan.humanPerformAttack(TypicalIndexes.COORDINATES_A1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(ship1.isDestroyed());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.isDestroy());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Setup:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Enemy has one ship vertically, on a1, with 1HP remaining"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Human attacks A1"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Expected result:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Human attack hits ship at A1"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Ship HP decreases"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     a Hit AttackResult is returned"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void humanPerformAttack_destroyLastShip_wins() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Battleship ship1 \u003d setUpAlmostDefeat(enemy);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackResult res \u003d batMan.humanPerformAttack(TypicalIndexes.COORDINATES_A1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(ship1.isDestroyed());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res instanceof AttackDefeatedEnemy);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Setup:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     No ships placed"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Human attacks on J10"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Expected result:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Human attack misses at J10"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     A non-Hit AttackResult is returned"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void humanPerformAttack_miss_misses() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackResult res \u003d batMan.humanPerformAttack(TypicalIndexes.COORDINATES_LAST_CELL);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res instanceof AttackMissed);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Setup:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Enemy throws an exception while computing move"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Expected result:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     A singleton list containing a non-success AttackResult is returned"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void takeComputerTurn_exceptionThrown_returnsAttackFailed() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        enemy \u003d new EvilEnemy();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        batMan \u003d new BattleManager(player, enemy);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        List\u003cAttackResult\u003e res \u003d batMan.takeComputerTurns();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertFalse(res.get(0).isSuccessful());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.get(0) instanceof AttackFailed);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Setup:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     No ships placed"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Enemy begins attacking horizontally from a1"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Expected result:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Enemy attack misses at A1"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     A singleton list containing a non-Hit AttackResult is returned"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void takeComputerTurn_miss_takesOneTurn() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        enemy.prepEnemy();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        List\u003cAttackResult\u003e res \u003d batMan.takeComputerTurns();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertFalse(res.get(0).isHit());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Setup:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     One ship vertically, on a1"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Enemy begins attacking horizontally from a1"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Expected result:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Enemy attack hits at A1 and misses at A2"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     A singleton list containing a non-Hit AttackResult is returned"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void takeComputerTurn_oneHit_takesTwoTurns() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        enemy.prepEnemy();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        setUpSingleShip(player);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        List\u003cAttackResult\u003e res \u003d batMan.takeComputerTurns();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.size() \u003d\u003d 2);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.get(0) instanceof AttackHit);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.get(1) instanceof AttackMissed);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Setup:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     One ship on a1 vertical, with 1 HP left"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     One ship on j1 horizontal, full HP"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Enemy begins attacking horizontally from a1"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Expected result:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Enemy attack hits a1, destroys the entire ship, then hits a2 for a miss"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     A doubleton list containing a AttackDestroyedShip and an AttackMissed is returned"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Enemy does not win the game"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void takeComputerTurn_destroysShip_returnsDestroyResult() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        enemy.prepEnemy();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Battleship ship1 \u003d setUpAlmostDestroy(player);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        List\u003cAttackResult\u003e res \u003d batMan.takeComputerTurns();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(ship1.isDestroyed());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.size() \u003d\u003d 2);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.get(0) instanceof AttackDestroyedShip);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.get(1) instanceof AttackMissed);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Setup:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     One ship horizontally on a1 with 1HP"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Enemy begins attacking horizontally from a1"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Expected result:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Enemy attack hits horizontally, destroys the entire ship, then hits the next cell for a miss"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     A singleton list containing a non-Hit AttackResult is returned"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Enemy does not win the game"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void takeComputerTurn_winsGame_returnsWinResult() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        enemy.prepEnemy();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Battleship ship1 \u003d setUpAlmostDefeat(player);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        List\u003cAttackResult\u003e res \u003d batMan.takeComputerTurns();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.get(0) instanceof AttackDefeatedEnemy);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 221
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void setLogLevel() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        defaultConfig.setLogLevel(Level.ALL);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertEquals(defaultConfig.getLogLevel(), Level.ALL);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void setUserPrefsFilePath() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Path path \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        defaultConfig.setUserPrefsFilePath(path);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertEquals(defaultConfig.getUserPrefsFilePath(), path);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertFalse(defaultConfig.equals(5));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 21,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/VersionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version.fromString(\"This is not a version string\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // Tests not early access vs early access on same version number"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        another \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                                              int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertFalse(one.equals(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertFalse(one.equals(5));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 18,
      "-": 139
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/battleship.png\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false, errorMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.state.BattleState;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.statistics.PlayerStatistics;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.storage.JsonStatisticsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bos10"
        },
        "content": "        JsonStatisticsStorage statisticsStorage \u003d new JsonStatisticsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bos10"
        },
        "content": "        StorageManager storage \u003d new StorageManager(userPrefsStorage, statisticsStorage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void addToStatistics_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bos10"
        },
        "content": "        PlayerStatistics newPlayerStats \u003d new PlayerStatistics();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bos10"
        },
        "content": "        newPlayerStats.addAttack();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bos10"
        },
        "content": "        newPlayerStats.addMove();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logic.addToStatistics(\"attack\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(newPlayerStats.getAttacksMade(), model.getPlayerStats().getAttacksMade());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(newPlayerStats.getMovesMade(), model.getPlayerStats().getMovesMade());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bos10"
        },
        "content": "        // To modify this for testing Statistics Command"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model.setBattleState(BattleState.PLAYER_PUT_SHIP);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertCommandSuccess(listCommand, \"No ships put down.\", model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //assertHistoryCorrect(listCommand); BOSTON: TO FIX"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //JsonStatisticsStorage statisticsStorage \u003d new JsonStatisticsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //        new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, statisticsStorage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //// Execute add command"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //        + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //Cell expectedCell \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //expectedModel.addPerson(expectedCell);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //assertCommandBehavior(CommandException.class, addCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void getMapsTest() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(logic.getEnemyMapGrid(), model.getEnemyMapGrid());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(logic.getHumanMapGrid(), model.getHumanMapGrid());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void getObservablesTest() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(logic.getEnemyMapObservable(), model.getEnemyMapObservable());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(logic.getHumanMapObservable(), model.getHumanMapObservable());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getHumanMapGrid(), new UserPrefs());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "bos10"
        },
        "content": "     * {@code StatsCommand}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "bos10"
        },
        "content": "            CommandResult result \u003d logic.execute(StatsCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "bos10"
        },
        "content": "                    StatsCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "bos10"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser()); //.split(\" \")[0]);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "bos10"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of StatsCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private static class JsonStatisticsIoExceptionThrowingStub extends JsonStatisticsStorage {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "bos10"
        },
        "content": "        private JsonStatisticsIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "bos10"
        },
        "content": "        public void saveStatisticsData(PlayerStatistics playerStats, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 10,
      "iwle": 1,
      "s-tr": 3,
      "bos10": 41,
      "-": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/StatisticsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bos10"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.result.AttackDestroyedShip;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.result.AttackHit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.result.AttackMissed;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.result.AttackResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.statistics.PlayerStatistics;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": " * The StatisticsTest will test the methods of the statistics class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": " * Contains integration tests (interaction with Model, Player, Storage and Battleship commands)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bos10"
        },
        "content": " * @author bos10"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bos10"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bos10"
        },
        "content": "public class StatisticsTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private PlayerStatistics p1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Player alice;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Player bob;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        p1 \u003d new PlayerStatistics();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        alice \u003d new Player(\"Alice\", 5, 2, 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        bob \u003d new Player(\"Bob\", 5, 2, 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_addHit_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(1, p1.addHit());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(2, p1.addHit());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_addMiss_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(1, p1.addMiss());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(2, p1.addMiss());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_addMove_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(1, p1.addMove());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(2, p1.addMove());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_getMovesLeft_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(0, p1.getMovesMade());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bos10"
        },
        "content": "        p1.addMove();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(1, p1.getMovesMade());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_getHitCount_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(0, p1.getHitCount());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bos10"
        },
        "content": "        p1.addHit();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(1, p1.getHitCount());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_getMissCount_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(0, p1.getMissCount());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bos10"
        },
        "content": "        p1.addMiss();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(1, p1.getMissCount());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_getAccuracy_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(0, (int) p1.getAccuracy());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bos10"
        },
        "content": "        p1.addAttack();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bos10"
        },
        "content": "        p1.addHit();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(1, (int) p1.getAccuracy());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_getEnemyShipsDestroyed_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertEquals(0, p1.getEnemyShipsDestroyed());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_addResultToStats_hitSuccess() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackResult res \u003d new AttackHit(alice, bob, TypicalIndexes.COORDINATES_A2);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        p1.addResultToStats(res);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertEquals(p1.getHitCount(), 1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_addResultToStats_missSuccess() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackResult res \u003d new AttackMissed(alice, bob, TypicalIndexes.COORDINATES_A2);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        p1.addResultToStats(res);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertEquals(p1.getMissCount(), 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_addResultToStats_attackDestroyedSuccess() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackResult res \u003d new AttackDestroyedShip(alice, bob, TypicalIndexes.COORDINATES_A2, \"name\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        p1.addResultToStats(res);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertEquals(p1.getHitCount(), 1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertEquals(p1.getEnemyShipsDestroyed(), 1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void generateData() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        //TODO: STUB TEST"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        p1.generateData();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bos10"
        },
        "content": "    // STORAGE COMPONENT FOR STATS //"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bos10"
        },
        "content": "    // take in statsData void"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_saveToStorage_success(){"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bos10"
        },
        "content": "        // WRITE TESTS"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_setStorage_success(){"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bos10"
        },
        "content": "        // WRITE TESTS"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bos10"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 93,
      "s-tr": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AttackCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static seedu.address.testutil.SizeTenMapGrid.initialisePlayerSizeTen;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static seedu.address.testutil.SizeTenMapGrid.setUpAlmostDefeat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static seedu.address.testutil.SizeTenMapGrid.setUpAlmostDestroy;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static seedu.address.testutil.SizeTenMapGrid.setUpSingleShip;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.BattleManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.state.BattleState;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.testutil.InterceptedEnemy;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class AttackCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Player player;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private InterceptedEnemy enemy;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void setUp() throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        player \u003d new Player();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        enemy \u003d new InterceptedEnemy();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        initialisePlayerSizeTen(player);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        initialisePlayerSizeTen(enemy);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model \u003d new ModelManager(new BattleManager(player, enemy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model.setBattleState(BattleState.PLAYER_ATTACK);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Scenario: \u003cbr /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe player has already attacked A1\u003c/li\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe player tries to attack A1 again\u003c/li\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Expected behaviour: \u003cbr /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe attack fails immediately.\u003c/li\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe enemy is not called to attack.\u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eState remains at PLAYER_ATTACK.\u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void execute_duplicateAttack_fail() throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        player.addToTargetHistory(TypicalIndexes.COORDINATES_A1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackCommand cmd \u003d new AttackCommand(TypicalIndexes.COORDINATES_A1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            cmd.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } catch (CommandException ex) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            assertTrue(ex.getMessage().contains(AttackCommand.MESSAGE_DUPLICATE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            // assert the enemy is not called to attack"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            assertFalse(enemy.isEnemyShootAtCalled());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            // assert correct state"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            assertTrue(model.getBattleState() \u003d\u003d BattleState.PLAYER_ATTACK);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Scenario: \u003cbr /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eEnemy has single ship on a1 vertical\u003c/li\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003ePlayer attacks a1\u003c/li\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Expected behaviour: \u003cbr /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe attack hits the ship and decreases its life.\u003c/li\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe enemy is not called to attack.\u003c/li\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eStatistics are updated.\u003c/li\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eState remains at PLAYER_ATTACK.\u003c/li\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void execute_attackHits_hitsUpdatesStats() throws CommandException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        setUpSingleShip(enemy);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        int initialMissCount \u003d model.getPlayerStats().getMissCount();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        int initialHitCount \u003d model.getPlayerStats().getHitCount();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackCommand cmd \u003d new AttackCommand(TypicalIndexes.COORDINATES_A1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        CommandResult res \u003d cmd.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // assert hit"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.getFeedbackToUser().contains(\"hit\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // assert updates stats"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(model.getPlayerStats().getMissCount() \u003d\u003d initialMissCount);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(model.getPlayerStats().getHitCount() \u003e initialHitCount);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(player.getTargetHistory().contains(TypicalIndexes.COORDINATES_A1));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // assert the enemy is not called to attack"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertFalse(enemy.isEnemyShootAtCalled());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // assert correct state"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(model.getBattleState() \u003d\u003d BattleState.PLAYER_ATTACK);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Scenario: \u003cbr /\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe user attacks j10, a cell with no ship.\u003c/li\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Expected behaviour: \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe attack misses.\u003c/li\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe enemy is called to attack.\u003c/li\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eState remains at PLAYER_ATTACK.\u003c/li\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void execute_missAttack_missesAndUpdatesStats() throws CommandException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        int initialMissCount \u003d model.getPlayerStats().getMissCount();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        int initialHitCount \u003d model.getPlayerStats().getHitCount();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        enemy.prepEnemy();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackCommand cmd \u003d new AttackCommand(TypicalIndexes.COORDINATES_LAST_CELL);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        CommandResult res \u003d cmd.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // assert miss"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.getFeedbackToUser().contains(\"miss\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // assert updates stats"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(model.getPlayerStats().getMissCount() \u003e initialMissCount);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(model.getPlayerStats().getHitCount() \u003d\u003d initialHitCount);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(player.getTargetHistory().contains(TypicalIndexes.COORDINATES_LAST_CELL));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // assert that enemy is called"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(enemy.isEnemyShootAtCalled());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // assert correct state"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(model.getBattleState() \u003d\u003d BattleState.PLAYER_ATTACK);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Scenario: \u003cbr /\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe enemy has one ship at a1 vertical with 1HP left\u003c/li\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe enemy has another ship somewhere at full HP\u003c/li\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe player attacks a1.\u003c/li\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Expected behaviour: \u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe attack hits the ship and decreases its life to 0.\u003c/li\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe enemy is not called to attack.\u003c/li\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eStatistics are updated.\u003c/li\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eState remains at PLAYER_ATTACK.\u003c/li\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void execute_attackDestroysShip_destroysAndUpdatesStats() throws CommandException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        setUpAlmostDestroy(enemy);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        int initialDestroyedCount \u003d model.getPlayerStats().getEnemyShipsDestroyed();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackCommand cmd \u003d new AttackCommand(TypicalIndexes.COORDINATES_A1);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        CommandResult res \u003d cmd.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // assert destroy"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.getFeedbackToUser().contains(\"destroy\"));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // assert not win"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertFalse(res.getFeedbackToUser().contains(\"won\"));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // assert updates stats"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(model.getPlayerStats().enemyShipsDestroyed() \u003e initialDestroyedCount);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(player.getTargetHistory().contains(TypicalIndexes.COORDINATES_A1));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // assert correct state"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(model.getBattleState() \u003d\u003d BattleState.PLAYER_ATTACK);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Scenario: \u003cbr /\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe enemy has one ship at a1 vertical with 1HP left\u003c/li\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe player attacks a1.\u003c/li\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Expected behaviour: \u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe attack hits the ship and decreases its life to 0.\u003c/li\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe player wins..\u003c/li\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eState changes to PLAYER_WIN.\u003c/li\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_destroyLastShip_playerWins() throws CommandException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        setUpAlmostDefeat(enemy);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        int initialDestroyedCount \u003d model.getPlayerStats().getEnemyShipsDestroyed();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackCommand cmd \u003d new AttackCommand(TypicalIndexes.COORDINATES_A1);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "bos10"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        CommandResult res \u003d cmd.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // assert win"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.getFeedbackToUser().contains(\"won\"));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // assert updates stats"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(model.getPlayerStats().enemyShipsDestroyed() \u003e initialDestroyedCount);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(player.getTargetHistory().contains(TypicalIndexes.COORDINATES_A1));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // assert correct state"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(model.getBattleState() \u003d\u003d BattleState.PLAYER_WIN);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Scenario: \u003cbr /\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe player has one ship at a1 vertical with 1HP left\u003c/li\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe player attacks j10 and misses.\u003c/li\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe enemy attacks a1\u003c/li\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Expected behaviour: \u003cbr\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe attack hits the ship and decreases its life to 0.\u003c/li\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe enemy wins\u003c/li\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eState changes to ENEMY_WIN.\u003c/li\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void execute_enemyDestroysLastShip_playerWins() throws CommandException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        setUpAlmostDefeat(player);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        enemy.prepEnemy();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackCommand cmd \u003d new AttackCommand(TypicalIndexes.COORDINATES_LAST_CELL);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        CommandResult res \u003d cmd.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // assert win"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.getFeedbackToUser().contains(\"lost\"));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // assert correct state"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(model.getBattleState() \u003d\u003d BattleState.ENEMY_WIN);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Expected behaviour: \u003cbr /\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe attack fails to hit anything.\u003c/li\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe enemy may or may not be called to attack.\u003c/li\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void execute_outOfBounds_fail() throws CommandException {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Coordinates invalid \u003d TypicalIndexes.INVALID_COORDINATE;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackCommand cmd \u003d new AttackCommand(invalid);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        CommandResult res \u003d cmd.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(res.getFeedbackToUser().contains(\"fail\"));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Scenario: \u003cbr /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe command is executed in the PLAYER_PUT_SHIP state.\u003c/li\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Expected behaviour: \u003cbr /\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     \u003cli\u003eThe command fails immediately with an AssertionError.\u003c/li\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void execute_invalidState_throwAssertionError() throws CommandException {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        thrown.expect(AssertionError.class);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackCommand cmd \u003d new AttackCommand(TypicalIndexes.COORDINATES_A1);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model.setBattleState(BattleState.PLAYER_PUT_SHIP);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        cmd.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackCommand cmd \u003d new AttackCommand(TypicalIndexes.COORDINATES_A1);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackCommand cmd2 \u003d new AttackCommand(TypicalIndexes.COORDINATES_A1);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        AttackCommand cmd3 \u003d new AttackCommand(TypicalIndexes.COORDINATES_A2);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // null fails"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertFalse(cmd.equals(null));"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // wrong type"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertFalse(cmd.equals(5));"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(cmd.equals(cmd));"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // same coordinate"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(cmd.equals(cmd2));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // different coordinate"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertFalse(cmd.equals(cmd3));"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 287,
      "bos10": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/BeginCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static seedu.address.testutil.SizeTenMapGrid.initialisePlayerSizeTen;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static seedu.address.testutil.SizeTenMapGrid.setUpSingleShip;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.BattleManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.state.BattleState;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.testutil.InterceptedEnemy;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class BeginCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Player player;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private InterceptedEnemy enemy;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        player \u003d new Player();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        enemy \u003d new InterceptedEnemy();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        initialisePlayerSizeTen(player);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        initialisePlayerSizeTen(enemy);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model \u003d new ModelManager(new BattleManager(player, enemy));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model.setBattleState(BattleState.PLAYER_PUT_SHIP);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void execute_oneShipPlaced_callsEnemyPrepAndSetsState() throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        setUpSingleShip(player);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        CommandResult res \u003d new BeginCommand().execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(enemy.isPrepCalled());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertEquals(model.getBattleState(), BattleState.PLAYER_ATTACK);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertEquals(res.getFeedbackToUser(), BeginCommand.MESSAGE_BEGIN_SUCCESS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void execute_noShipsPlaced_throwCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            BeginCommand cmd \u003d new BeginCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            cmd.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } catch (CommandException ex) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            assertEquals(ex.getMessage(), BeginCommand.MESSAGE_NO_SHIPS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            assertEquals(model.getBattleState(), BattleState.PLAYER_PUT_SHIP);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void execute_invalidState_throwAssertionError() throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        thrown.expect(AssertionError.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        BeginCommand cmd \u003d new BeginCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model.setBattleState(BattleState.PLAYER_ATTACK);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        cmd.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void booleans() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\", true, true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertTrue(commandResult.isShowHelp());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertTrue(commandResult.isExit());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 8,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COORDINATES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORIENTATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String VALID_COORDINATES_A1 \u003d \"a1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String VALID_COORDINATES_J1 \u003d \"j1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String VALID_HORIZONTAL_ORIENTATION \u003d \"horizontal\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String VALID_VERTICAL_ORIENTATION \u003d \"vertical\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String VALID_NAME_DESTROYER \u003d \"destroyer\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String COORDINATE_FIRST_ROW \u003d \" \" + PREFIX_COORDINATES + VALID_COORDINATES_A1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String NAME_DESC_DESTROYER \u003d \" \" + PREFIX_NAME + VALID_NAME_DESTROYER;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String ORIENTATION_HORIZONTAL \u003d \" \" + PREFIX_ORIENTATION + VALID_HORIZONTAL_ORIENTATION;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String INVALID_COORDINATE_DESC_SYMBOLS \u003d \" \" + PREFIX_COORDINATES"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"*1\"; // symbols not allowed"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final String INVALID_COORDINATE_DESC_OUT_OF_BOUNDS \u003d \" \" + PREFIX_COORDINATES"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "            + \"z1\"; // out of bounds, only characters between \u0027a\u0027 and \u0027j\u0027 are accepted"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                                            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                                            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "     * - the address book, filtered cell list and selected cell in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                                            String expectedMessage) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        MapGrid expectedMapGrid \u003d new MapGrid(actualModel.getHumanMapGrid());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            assertEquals(expectedMapGrid, actualModel.getHumanMapGrid());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 2,
      "iwle": 15,
      "s-tr": 2,
      "-": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/InitialiseMapCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.state.BattleState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class InitialiseMapCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private CommandHistory history;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model.setBattleState(BattleState.PRE_BATTLE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void execute_initialisemap_success() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        int validSize \u003d InitialiseMapCommand.MINIMUM_MAP_SIZE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        InitialiseMapCommand initialiseMapCommand \u003d new InitialiseMapCommand(validSize);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        CommandResult commandResult \u003d initialiseMapCommand.execute(model, history);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(String.format(InitialiseMapCommand.MESSAGE_SUCCESS, validSize), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(validSize, model.getMapSize());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void execute_initialiseMapWithSizeMoreThanMax_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        int invalidSize \u003d InitialiseMapCommand.MAXIMUM_MAP_SIZE + 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        InitialiseMapCommand initialiseMapCommand \u003d new InitialiseMapCommand(invalidSize);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        thrown.expectMessage(String.format(InitialiseMapCommand.MESSAGE_INVALID_MAP_SIZE,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                InitialiseMapCommand.MINIMUM_MAP_SIZE, InitialiseMapCommand.MAXIMUM_MAP_SIZE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        initialiseMapCommand.execute(model, history);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void execute_initialisemapWithSizeLessThanMin_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        int invalidSize \u003d InitialiseMapCommand.MINIMUM_MAP_SIZE - 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        InitialiseMapCommand initialiseMapCommand \u003d new InitialiseMapCommand(invalidSize);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        thrown.expectMessage(String.format(InitialiseMapCommand.MESSAGE_INVALID_MAP_SIZE,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                InitialiseMapCommand.MINIMUM_MAP_SIZE, InitialiseMapCommand.MAXIMUM_MAP_SIZE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        initialiseMapCommand.execute(model, history);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 51,
      "s-tr": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.state.BattleState;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.CruiserBattleship;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.DestroyerBattleship;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final Coordinates VALID_COORDINATES_A1 \u003d new Coordinates(\"a1\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final Coordinates VALID_COORDINATES_A2 \u003d new Coordinates(\"a2\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final Coordinates VALID_COORDINATES_A3 \u003d new Coordinates(\"a3\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final Orientation HORIZONTAL_ORIENTATION \u003d new Orientation(\"h\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final Orientation VERTICAL_ORIENTATION \u003d new Orientation(\"v\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Set\u003cTag\u003e testTagSet1 \u003d new HashSet\u003c\u003e(); // to contain testTag1, testTag2 only battleship 1"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Set\u003cTag\u003e testTagSet2 \u003d new HashSet\u003c\u003e(); // to contain testTag1 both battleship 1 and 2"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Set\u003cTag\u003e emptyTagSet \u003d new HashSet\u003c\u003e(); // to contain no tags all battleships"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Set\u003cName\u003e destroyerOnlySet \u003d new HashSet\u003c\u003e(); // to contain only battleship 1"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Set\u003cName\u003e cruiserOnlySet \u003d new HashSet\u003c\u003e(); // to contain only battleship 2"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Set\u003cName\u003e cruiserAndDestroyerSet \u003d new HashSet\u003c\u003e(); // to contain both battleship 1 and 2"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Tag testTag1 \u003d new Tag(\"testTag1\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Tag testTag2 \u003d new Tag(\"testTag2\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Battleship battleshipOne;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Battleship battleshipTwo;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": "        expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // set the tests in the context of deploying ships"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.setBattleState(BattleState.PLAYER_PUT_SHIP);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": "        expectedModel.setBattleState(BattleState.PLAYER_PUT_SHIP);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testTagSet1.add(testTag1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testTagSet1.add(testTag2);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testTagSet2.add(testTag1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "        battleshipOne \u003d new DestroyerBattleship(testTagSet1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": "        battleshipTwo \u003d new CruiserBattleship(testTagSet2);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "        destroyerOnlySet.add(Battleship.BattleshipType.DESTROYER.getName());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "        cruiserOnlySet.add(Battleship.BattleshipType.CRUISER.getName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": "        cruiserAndDestroyerSet.add(Battleship.BattleshipType.CRUISER.getName());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "        cruiserAndDestroyerSet.add(Battleship.BattleshipType.DESTROYER.getName());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.deployBattleship(battleshipOne, VALID_COORDINATES_A1, VERTICAL_ORIENTATION);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.deployBattleship(battleshipTwo, VALID_COORDINATES_A2, VERTICAL_ORIENTATION);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_listAll_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // The command is: list"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand(Optional.empty(), Optional.empty());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": "        StringBuilder expectedOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iwle"
        },
        "content": "        expectedOutput.append(buildOutput(battleshipOne, VALID_COORDINATES_A1, VERTICAL_ORIENTATION))"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(buildOutput(battleshipTwo, VALID_COORDINATES_A2, VERTICAL_ORIENTATION))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(\"\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iwle"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedOutput.toString(), false, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertCommandSuccess(listCommand, model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_listByName_success() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // The command is: list n/destroyers"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iwle"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand(Optional.of(destroyerOnlySet), Optional.empty());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iwle"
        },
        "content": "        StringBuilder expectedOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iwle"
        },
        "content": "        expectedOutput.append(buildOutput(battleshipOne, VALID_COORDINATES_A1, VERTICAL_ORIENTATION))"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(\"\\n\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iwle"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedOutput.toString(), false, false);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertCommandSuccess(listCommand, model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_listByMultipleTags_success() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // The command is: list t/testTag1 t/testTag2"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iwle"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand(Optional.empty(), Optional.of(testTagSet1));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iwle"
        },
        "content": "        StringBuilder expectedOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iwle"
        },
        "content": "        expectedOutput.append(buildOutput(battleshipOne, VALID_COORDINATES_A1, VERTICAL_ORIENTATION))"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(\"\\n\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iwle"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedOutput.toString(), false, false);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertCommandSuccess(listCommand, model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_listBySingleTag_success() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // The command is: list t/testTag1"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iwle"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand(Optional.empty(), Optional.of(testTagSet2));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iwle"
        },
        "content": "        List\u003cString\u003e expectedStringList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iwle"
        },
        "content": "        expectedStringList.add(buildOutput(battleshipOne, VALID_COORDINATES_A1, VERTICAL_ORIENTATION));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iwle"
        },
        "content": "        expectedStringList.add(buildOutput(battleshipTwo, VALID_COORDINATES_A2, VERTICAL_ORIENTATION));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(isCommandResultEqual(expectedStringList,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iwle"
        },
        "content": "                listCommand.execute(model, commandHistory).getFeedbackToUser()));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_listByMultipleNames_success() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // The command is: list n/destroyer n/cruiser"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iwle"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand(Optional.of(cruiserAndDestroyerSet), Optional.empty());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iwle"
        },
        "content": "        List\u003cString\u003e expectedStringList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iwle"
        },
        "content": "        expectedStringList.add(buildOutput(battleshipOne, VALID_COORDINATES_A1, VERTICAL_ORIENTATION));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iwle"
        },
        "content": "        expectedStringList.add(buildOutput(battleshipTwo, VALID_COORDINATES_A2, VERTICAL_ORIENTATION));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Collections.sort(expectedStringList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(isCommandResultEqual(expectedStringList,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iwle"
        },
        "content": "                listCommand.execute(model, commandHistory).getFeedbackToUser()));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_listBySingleNameAndMultipleTags_success() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // The command is: list n/destroyer t/testTag1 t/testTag2"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iwle"
        },
        "content": "        setUp();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iwle"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand(Optional.of(destroyerOnlySet), Optional.of(testTagSet1));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iwle"
        },
        "content": "        StringBuilder expectedOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iwle"
        },
        "content": "        expectedOutput.append(buildOutput(battleshipOne, VALID_COORDINATES_A1, VERTICAL_ORIENTATION))"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(\"\\n\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iwle"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedOutput.toString(), false, false);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertCommandSuccess(listCommand, model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_listByMultipleNamesAndSingleTag_success() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // The command is: list n/destroyer n/cruiser t/tagSet1"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iwle"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand(Optional.of(cruiserAndDestroyerSet), Optional.of(testTagSet2));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iwle"
        },
        "content": "        List\u003cString\u003e expectedStringList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iwle"
        },
        "content": "        expectedStringList.add(buildOutput(battleshipTwo, VALID_COORDINATES_A2, VERTICAL_ORIENTATION));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iwle"
        },
        "content": "        expectedStringList.add(buildOutput(battleshipOne, VALID_COORDINATES_A1, VERTICAL_ORIENTATION));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Collections.sort(expectedStringList);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(isCommandResultEqual(expectedStringList,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iwle"
        },
        "content": "                listCommand.execute(model, commandHistory).getFeedbackToUser()));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * Compares a command result string as a sorted list with an expected list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private boolean isCommandResultEqual(List\u003cString\u003e expectedList, String commandResultString) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iwle"
        },
        "content": "        List\u003cString\u003e resultStringList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iwle"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (String entry : commandResultString.split(\"\\n\")) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iwle"
        },
        "content": "            resultStringList.add(entry);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Collections.sort(resultStringList);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Collections.sort(expectedList);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return expectedList.equals(resultStringList);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iwle"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iwle"
        },
        "content": "     * For building the output in list."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iwle"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private String buildOutput(Battleship battleship, Coordinates coordinates, Orientation orientation) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iwle"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iwle"
        },
        "content": "        stringBuilder.append(battleship)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(\" (\")"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(battleship.getLife())"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(\"/\")"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(battleship.getLength())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(\")\")"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(\" at \")"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(coordinates)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(\" \")"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(orientation)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(\" \");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iwle"
        },
        "content": "        battleship.getTags().forEach(stringBuilder::append);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iwle"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 200,
      "s-tr": 1,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListTagsCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.state.BattleState;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.DestroyerBattleship;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class ListTagsCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Set\u003cTag\u003e testTags1 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Set\u003cTag\u003e testTags2 \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Tag testTag1 \u003d new Tag(\"testTag1\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Tag testTag2 \u003d new Tag(\"testTag2\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Tag testTag3 \u003d new Tag(\"testTag3\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Battleship battleshipOne;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Battleship battleshipTwo;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "        expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // set the tests in the context of deploying ships"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.setBattleState(BattleState.PLAYER_PUT_SHIP);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "        expectedModel.setBattleState(BattleState.PLAYER_PUT_SHIP);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testTags1.add(testTag1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testTags1.add(testTag2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testTags2.add(testTag3);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "        battleshipOne \u003d new DestroyerBattleship(testTags1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": "        battleshipTwo \u003d new DestroyerBattleship(testTags2);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.deployBattleship(battleshipOne, new Coordinates(\"a1\"), new Orientation(\"v\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.deployBattleship(battleshipTwo, new Coordinates(\"a2\"), new Orientation(\"v\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_testTags_showsSame() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Set\u003cTag\u003e modelTags \u003d model.getHumanPlayer().getFleet().getAllTags();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": "        boolean allTagsContained \u003d true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (Tag testTag : testTags1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": "            if (!modelTags.contains(testTag)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": "                allTagsContained \u003d false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (Tag testTag : testTags2) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "            if (!modelTags.contains(testTag)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": "                allTagsContained \u003d false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(allTagsContained, true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_testTags_fail() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Set\u003cTag\u003e tags \u003d model.getHumanPlayer().getFleet().getAllTags();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(tags.contains(new Tag(\"nonExistentTag\")));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void execute_invalidState_throwAssertionError() throws CommandException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        thrown.expect(AssertionError.class);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        ListTagsCommand cmd \u003d new ListTagsCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model.setBattleState(BattleState.PRE_BATTLE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        cmd.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_testCommandResult_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iwle"
        },
        "content": "        ListTagsCommand cmd \u003d new ListTagsCommand();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iwle"
        },
        "content": "        StringBuilder expectedOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iwle"
        },
        "content": "        expectedOutput.append(ListTagsCommand.MESSAGE_SUCCESS)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(model.getHumanPlayer().getFleet().getAllTags().size())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(ListTagsCommand.TAGS_FOUND);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (Tag tag : model.getHumanPlayer().getFleet().getAllTags()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iwle"
        },
        "content": "            expectedOutput.append(tag.getTagName());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iwle"
        },
        "content": "            if (++counter \u003c model.getHumanPlayer().getFleet().getAllTags().size()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iwle"
        },
        "content": "                expectedOutput.append(\", \");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iwle"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedOutput.toString(), false, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertCommandSuccess(cmd, model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_testEmptyCommandResult_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iwle"
        },
        "content": "        ListTagsCommand listTagsCommand \u003d new ListTagsCommand();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iwle"
        },
        "content": "        InitialiseMapCommand initialiseMapCommand \u003d new InitialiseMapCommand(10);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iwle"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iwle"
        },
        "content": "            initialiseMapCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iwle"
        },
        "content": "            initialiseMapCommand.execute(expectedModel, commandHistory);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iwle"
        },
        "content": "            assert false; // error should not occur"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iwle"
        },
        "content": "        StringBuilder expectedOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iwle"
        },
        "content": "        expectedOutput.append(ListTagsCommand.MESSAGE_SUCCESS)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(ListTagsCommand.TAGS_NOT_FOUND);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iwle"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedOutput.toString(), false, false);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertCommandSuccess(listTagsCommand, model, commandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void trivial_commandEqualityTest_success() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iwle"
        },
        "content": "        ListTagsCommand listTagsCommand1 \u003d new ListTagsCommand();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iwle"
        },
        "content": "        ListTagsCommand listTagsCommand2 \u003d new ListTagsCommand();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iwle"
        },
        "content": "        listTagsCommand1.execute(model, commandHistory);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iwle"
        },
        "content": "        listTagsCommand2.execute(model, commandHistory);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(listTagsCommand1, listTagsCommand2);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 143,
      "s-tr": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/PutShipCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_HORIZONTAL_ORIENTATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VERTICAL_ORIENTATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.COORDINATES_A1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.COORDINATES_A10;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.COORDINATES_A2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.COORDINATES_B1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.COORDINATES_J1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.COORDINATES_LAST_CELL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.state.BattleState;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.BoundaryValueChecker;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.AircraftCarrierBattleship;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.DestroyerBattleship;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Status;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.testutil.SizeTenMapGrid;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * Contains integration tests (interaction with the Model)."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class PutShipCommandTest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Set\u003cTag\u003e emptySet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model.setBattleState(BattleState.PLAYER_PUT_SHIP);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        SizeTenMapGrid.initialisePlayerSizeTen(model.getHumanPlayer());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_battleshipAlreadyPresent_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_HORIZONTAL_ORIENTATION);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.getHumanMapGrid().putShip(battleship, COORDINATES_A1, orientation);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "        PutShipCommand putShipCommand \u003d new PutShipCommand(COORDINATES_A1, battleship, orientation);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertCommandFailure(putShipCommand, model, commandHistory,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": "                BoundaryValueChecker.MESSAGE_BATTLESHIP_PRESENT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_putBattleshipVertical_failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_VERTICAL_ORIENTATION);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.getHumanMapGrid().putShip(battleship, COORDINATES_B1, orientation);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": "        PutShipCommand putShipCommand \u003d new PutShipCommand(COORDINATES_A1, battleship, orientation);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertCommandFailure(putShipCommand, model, commandHistory,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": "                BoundaryValueChecker.MESSAGE_BATTLESHIP_PRESENT_BODY_VERTICAL);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_putBattleshipHorizontal_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_HORIZONTAL_ORIENTATION);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.getHumanMapGrid().putShip(battleship, COORDINATES_A2, orientation);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": "        PutShipCommand putShipCommand \u003d new PutShipCommand(COORDINATES_A1, battleship, orientation);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e putShipCommand.execute(model, commandHistory));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertCommandFailure(putShipCommand, model, commandHistory,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": "                BoundaryValueChecker.MESSAGE_BATTLESHIP_PRESENT_BODY_HORIZONTAL);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_battleshipTooHorizontal_failure() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_HORIZONTAL_ORIENTATION);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iwle"
        },
        "content": "        PutShipCommand putShipCommand \u003d new PutShipCommand(COORDINATES_A10, battleship, orientation);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertCommandFailure(putShipCommand, model, commandHistory,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iwle"
        },
        "content": "                Messages.MESSAGE_BODY_LENGTH_TOO_LONG);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_battleshipTooVertical_failure() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_VERTICAL_ORIENTATION);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iwle"
        },
        "content": "        PutShipCommand putShipCommand \u003d new PutShipCommand(COORDINATES_J1, battleship, orientation);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertCommandFailure(putShipCommand, model, commandHistory,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iwle"
        },
        "content": "                Messages.MESSAGE_BODY_LENGTH_TOO_LONG);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_testPutHorizontal_success() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new AircraftCarrierBattleship(emptySet);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_HORIZONTAL_ORIENTATION);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iwle"
        },
        "content": "        PutShipCommand putShipCommand \u003d new PutShipCommand(COORDINATES_A1, battleship, orientation);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iwle"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iwle"
        },
        "content": "            putShipCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iwle"
        },
        "content": "            // Test length of battleship"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (int i \u003d 0; i \u003c battleship.getLength(); i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iwle"
        },
        "content": "                Coordinates cellCoords \u003d new Coordinates("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iwle"
        },
        "content": "                        COORDINATES_A1.getRowIndex().getZeroBased(),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iwle"
        },
        "content": "                        COORDINATES_A1.getColIndex().getZeroBased() + i);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iwle"
        },
        "content": "                Status status \u003d model.getHumanMapGrid().getCellStatus(cellCoords);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iwle"
        },
        "content": "                assertTrue(status \u003d\u003d Status.SHIP);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throw new AssertionError(\"Test should not fail.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_testPutVertical_success() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new AircraftCarrierBattleship(emptySet);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_VERTICAL_ORIENTATION);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iwle"
        },
        "content": "        PutShipCommand putShipCommand \u003d new PutShipCommand(COORDINATES_A1, battleship, orientation);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iwle"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iwle"
        },
        "content": "            putShipCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iwle"
        },
        "content": "            // Test length of battleship"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (int i \u003d 0; i \u003c battleship.getLength(); i++) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iwle"
        },
        "content": "                Coordinates cellCoords \u003d new Coordinates("
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iwle"
        },
        "content": "                        COORDINATES_A1.getRowIndex().getZeroBased() + i,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iwle"
        },
        "content": "                        COORDINATES_A1.getColIndex().getZeroBased());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iwle"
        },
        "content": "                Status status \u003d model.getHumanMapGrid().getCellStatus(cellCoords);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iwle"
        },
        "content": "                assertTrue(status \u003d\u003d Status.SHIP);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iwle"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iwle"
        },
        "content": "            throw new AssertionError(\"Test should not fail.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_notEnoughBattleships_failure() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new AircraftCarrierBattleship(emptySet);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_VERTICAL_ORIENTATION);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.getHumanMapGrid().putShip(battleship, COORDINATES_A2, orientation);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.deployBattleship(battleship, COORDINATES_A2, orientation);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        PutShipCommand putShipCommand \u003d new PutShipCommand(COORDINATES_A1, battleship, orientation);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertCommandFailure(putShipCommand, model, commandHistory,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \"Not enough battleships.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iwle"
        },
        "content": "        final PutShipCommand standardCommand \u003d new PutShipCommand(COORDINATES_A1,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iwle"
        },
        "content": "                new Battleship(), new Orientation(VALID_HORIZONTAL_ORIENTATION));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iwle"
        },
        "content": "        PutShipCommand commandWithSameValues \u003d new PutShipCommand("
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iwle"
        },
        "content": "                new Coordinates(\"a1\"), new Battleship(), new Orientation(VALID_HORIZONTAL_ORIENTATION));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertFalse(standardCommand.equals(new BeginCommand()));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // different coordinates -\u003e returns false"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(standardCommand.equals(new PutShipCommand("
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iwle"
        },
        "content": "                COORDINATES_LAST_CELL, new Battleship(), new Orientation(VALID_HORIZONTAL_ORIENTATION))));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void execute_invalidState_throwAssertionError() throws CommandException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        thrown.expect(AssertionError.class);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        PutShipCommand cmd \u003d new PutShipCommand("
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            COORDINATES_LAST_CELL, new Battleship(), new Orientation(VALID_HORIZONTAL_ORIENTATION));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        model.setBattleState(BattleState.PLAYER_ATTACK);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        cmd.execute(model, new CommandHistory());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 180,
      "s-tr": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SaveCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bos10"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bos10"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bos10"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bos10"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.storage.JsonSerializableStatistics;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.storage.JsonStatisticsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bos10"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bos10"
        },
        "content": " * The StatisticsTest will test the methods of the statistics class."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bos10"
        },
        "content": " * Contains integration tests (interaction with Model, Player, Storage and Battleship commands)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bos10"
        },
        "content": " * @author bos10"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bos10"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bos10"
        },
        "content": "public class SaveCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableStatistics\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private static final Path STATS_FILE \u003d TEST_DATA_FOLDER.resolve(\"statsTest.json\"); // all 0"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private static final Path STATS_FILE_2 \u003d TEST_DATA_FOLDER.resolve(\"statsTest2.json\"); // all 1, 1"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private static final Path STATS_FILE_3 \u003d TEST_DATA_FOLDER.resolve(\"statsTest3.json\"); //hit 1 , miss 2"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private CommandHistory history;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private LogicManager logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bos10"
        },
        "content": "    // Setup JSON files"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void setUp_json() throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bos10"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableStatistics(\"0\", \"0\", \"0\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bos10"
        },
        "content": "                \"0\", \"0\"), STATS_FILE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bos10"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableStatistics(\"1\", \"1\", \"0\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bos10"
        },
        "content": "                \"0\", \"0\"), STATS_FILE_2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bos10"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableStatistics(\"1\", \"2\", \"0\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bos10"
        },
        "content": "                \"0\", \"0\"), STATS_FILE_3);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void setUp_same() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bos10"
        },
        "content": "        JsonStatisticsStorage statisticsStorage \u003d new JsonStatisticsStorage(STATS_FILE); // all 0"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bos10"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bos10"
        },
        "content": "        StorageManager storage \u003d new StorageManager(userPrefsStorage, statisticsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bos10"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bos10"
        },
        "content": "        model.getPlayerStats().setStorage(storage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bos10"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void setUp_better() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "bos10"
        },
        "content": "        JsonStatisticsStorage statisticsStorage \u003d new JsonStatisticsStorage(STATS_FILE_3); // hit 1, miss 2"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "bos10"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "bos10"
        },
        "content": "        StorageManager storage \u003d new StorageManager(userPrefsStorage, statisticsStorage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "bos10"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "bos10"
        },
        "content": "        model.getPlayerStats().setStorage(storage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "bos10"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void setUp_worst() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "bos10"
        },
        "content": "        JsonStatisticsStorage statisticsStorage \u003d new JsonStatisticsStorage(STATS_FILE_2); // hit 1, miss 1"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "bos10"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "bos10"
        },
        "content": "        StorageManager storage \u003d new StorageManager(userPrefsStorage, statisticsStorage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "bos10"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "bos10"
        },
        "content": "        model.getPlayerStats().setStorage(storage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "bos10"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void getAccuracy_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(0, (int) new SaveCommand().getAccuracy(0, 0));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(1, (int) new SaveCommand().getAccuracy(1, 0));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "bos10"
        },
        "content": "    // Better this round, 1,2"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_better_success() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "bos10"
        },
        "content": "        setUp_better();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "bos10"
        },
        "content": "        SaveCommand saveCommand \u003d new SaveCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "bos10"
        },
        "content": "        model.getPlayerStats().addHit();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "bos10"
        },
        "content": "        CommandResult commandResult \u003d saveCommand.execute(model, history);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(String.format(SaveCommand.MESSAGE_SUCCESS_BETTER"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "bos10"
        },
        "content": "                + \u0027\\n\u0027"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "bos10"
        },
        "content": "                + \"Current Game : %.1f%%\", model.getPlayerStats().getAccuracy() * 100)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "bos10"
        },
        "content": "                + \u0027\\n\u0027"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "bos10"
        },
        "content": "                + \"Previous Game : 33.3%\", commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "bos10"
        },
        "content": "    // Worse this round, stats : 1, 1"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_worst_success() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "bos10"
        },
        "content": "        setUp_worst();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "bos10"
        },
        "content": "        SaveCommand saveCommand \u003d new SaveCommand();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "bos10"
        },
        "content": "        model.getPlayerStats().addHit(); // 1 hit 2 miss"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "bos10"
        },
        "content": "        model.getPlayerStats().addMiss();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "bos10"
        },
        "content": "        model.getPlayerStats().addMiss();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "bos10"
        },
        "content": "        CommandResult commandResult \u003d saveCommand.execute(model, history);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(SaveCommand.MESSAGE_SUCCESS_WORST"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "bos10"
        },
        "content": "                + \u0027\\n\u0027"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "bos10"
        },
        "content": "                + String.format(\"Current Game : %.1f%%\", model.getPlayerStats().getAccuracy() * 100)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "bos10"
        },
        "content": "                + \u0027\\n\u0027"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "bos10"
        },
        "content": "                + \"Previous Game : 50.0%\", commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_same_success() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "bos10"
        },
        "content": "        setUp_same();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "bos10"
        },
        "content": "        SaveCommand saveCommand \u003d new SaveCommand();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "bos10"
        },
        "content": "        CommandResult commandResult \u003d saveCommand.execute(model, history);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(SaveCommand.MESSAGE_SUCCESS_SAME"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "bos10"
        },
        "content": "                + \u0027\\n\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "bos10"
        },
        "content": "                + \"Current Game : 0.0\", commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "bos10"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "bos10": 139
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/StatsCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": "//import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bos10"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bos10"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.storage.JsonStatisticsStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bos10"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "bos10"
        },
        "content": " * Testing for StatsCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bos10"
        },
        "content": " * @author bos10"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "bos10"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "bos10"
        },
        "content": "public class StatsCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableStatistics\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private static final Path STATS_FILE \u003d TEST_DATA_FOLDER.resolve(\"statsTest_statsCommand.json\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private CommandHistory history;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private LogicManager logic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void setUp() throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "bos10"
        },
        "content": "        JsonStatisticsStorage statisticsStorage \u003d new JsonStatisticsStorage(STATS_FILE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "bos10"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "bos10"
        },
        "content": "        StorageManager storage \u003d new StorageManager(userPrefsStorage, statisticsStorage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "bos10"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "bos10"
        },
        "content": "        model.getPlayerStats().setStorage(storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "bos10"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bos10"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void execute_success() throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //StatsCommand statsCommand \u003d new StatsCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //thrown.expect(ExceptionInInitializerError.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //CommandResult commandResult \u003d statsCommand.execute(model, history);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //assertEquals(statsCommand.MESSAGE_SUCCESS, \"CURRENT STATISTICS:\\n%1$s\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 53,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/StatsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "bos10"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "bos10"
        },
        "content": "//import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "bos10"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "bos10"
        },
        "content": "//import seedu.address.model.statistics.PlayerStatistics;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "bos10"
        },
        "content": "//import seedu.address.storage.JsonSerializableStatistics;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "bos10"
        },
        "content": "public class StatsStorageTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "bos10"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "bos10"
        },
        "content": "    public void statsStorage_toModelType_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //JsonSerializableStatistics jsonStats \u003d new JsonSerializableStatistics(\"0\", \"0\", \"0\", \"0\", \"0\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //PlayerStatistics playerStats \u003d new PlayerStatistics();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //PlayerStatistics playerStatsB \u003d jsonStats.toModelType();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //assertEquals(playerStats, playerStatsB);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "bos10"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "bos10"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AttackCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static seedu.address.logic.parser.AttackCommandParser.MESSAGE_INVALID_SQUARE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.commands.AttackCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * Test scope:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class AttackCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String VALID_COORDINATES \u003d \"a1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String VALID_WEIRD_COORDINATES \u003d \"z1312\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String INVALID_COLUMN \u003d \"$1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String INVALID_ROW \u003d \"bb\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final String INVALID_ROW_COLUMN \u003d \"7c\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private AttackCommandParser parser \u003d new AttackCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void parse_validArgs_returnsAttackCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            VALID_COORDINATES, new AttackCommand(new Coordinates(VALID_COORDINATES)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void parse_weirdValidArgs_returnsAttackCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            VALID_WEIRD_COORDINATES, new AttackCommand(new Coordinates(VALID_WEIRD_COORDINATES)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void parse_invalidColumn_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            INVALID_COLUMN, String.format(MESSAGE_INVALID_SQUARE, INVALID_COLUMN));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void parse_invalidRow_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            INVALID_ROW, String.format(MESSAGE_INVALID_SQUARE, INVALID_ROW));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void parse_invalidRowColumn_throwsParseException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            INVALID_ROW_COLUMN, String.format(MESSAGE_INVALID_SQUARE, INVALID_ROW_COLUMN));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void parse_emptyString_throwsParseException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, AttackCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/BattleshipParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.commands.AttackCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.commands.BeginCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.logic.commands.InitialiseMapCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.logic.commands.ListTagsCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.logic.commands.PutShipCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.logic.commands.SaveCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class BattleshipParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private final BattleshipParser parser \u003d new BattleshipParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void parseCommand_init() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertTrue(parser.parseCommand(InitialiseMapCommand.COMMAND_WORD + \" \" + InitialiseMapCommand.MINIMUM_MAP_SIZE)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                instanceof InitialiseMapCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void parseCommand_put() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(parser.parseCommand("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            PutShipCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            + \" n/destroyer\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            + \" r/vertical\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            + \" c/a1\") instanceof PutShipCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void parseCommand_listTags() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertTrue(parser.parseCommand(ListTagsCommand.COMMAND_WORD) instanceof ListTagsCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void parseCommand_begin() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(parser.parseCommand(BeginCommand.COMMAND_WORD) instanceof BeginCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void parseCommand_attack() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(parser.parseCommand(AttackCommand.COMMAND_WORD + \" a1\") instanceof AttackCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void parseCommand_stats() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(parser.parseCommand(StatsCommand.COMMAND_WORD) instanceof StatsCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(parser.parseCommand(StatsCommand.COMMAND_WORD + \" 3\") instanceof StatsCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void parseCommand_save() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertTrue(parser.parseCommand(SaveCommand.COMMAND_WORD) instanceof SaveCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 21,
      "s-tr": 25,
      "bos10": 1,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/InitialiseMapCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.logic.commands.InitialiseMapCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class InitialiseMapCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private InitialiseMapCommandParser parser \u003d new InitialiseMapCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void parse_validArgs_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertParseSuccess(parser, \"6\", new InitialiseMapCommand(6));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void parse_missingArgs_failure() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, InitialiseMapCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void parse_argsNotPositiveInt_failure() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, InitialiseMapCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertParseFailure(parser, \"-1\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, InitialiseMapCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ListCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class ListCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private ListCommandParser parser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Set\u003cName\u003e nameSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Optional\u003cSet\u003cTag\u003e\u003e optionalTagSet \u003d Optional.of(tagSet);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Optional\u003cSet\u003cName\u003e\u003e optionalNameSet \u003d Optional.of(nameSet);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseSuccess(parser, \"list\", new ListCommand(Optional.empty(), Optional.empty()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "        tagSet.add(new Tag(\"amazing\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "        nameSet.add(Battleship.BattleshipType.DESTROYER.getName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseSuccess(parser, \"listTags t/amazing\", new ListCommand(Optional.empty(), optionalTagSet));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseSuccess(parser, \"listTags t/amazing n/destroyer\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "                new ListCommand(optionalNameSet, optionalTagSet));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 32,
      "s-tr": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.AircraftCarrierBattleship;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.CruiserBattleship;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.DestroyerBattleship;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String INVALID_COORD_1 \u003d \"  \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String INVALID_COORD_2 \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String INVALID_COORD_3 \u003d \"*9\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String INVALID_COORD_4 \u003d \"a0\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String VALID_COORD_1 \u003d \"a1\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String VALID_COORD_2 \u003d \"b3\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private static final Set\u003cTag\u003e emptySet \u003d Collections.emptySet();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        ParserUtil.parseIndex(Long.toString((long) Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void parseCoordinates_invalidSpaces_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iwle"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iwle"
        },
        "content": "        ParserUtil.parseCoordinates(INVALID_COORD_1);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void parseCoordinates_emptyString_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iwle"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iwle"
        },
        "content": "        ParserUtil.parseCoordinates(INVALID_COORD_2);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void parseCoordinates_symbolString_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iwle"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iwle"
        },
        "content": "        ParserUtil.parseCoordinates(INVALID_COORD_3);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void parseCoordinates_outOfBoundsToo_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iwle"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iwle"
        },
        "content": "        ParserUtil.parseCoordinates(INVALID_COORD_4);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void parseCoordinates_validCoord_returnsNewCoordinates() throws Exception {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Coordinates expectedCoordinates \u003d new Coordinates(VALID_COORD_1);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(expectedCoordinates, ParserUtil.parseCoordinates(VALID_COORD_1));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void parseCoordinates_validCoord_returnsNewCoordinatesToo() throws Exception {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Coordinates expectedCoordinates \u003d new Coordinates(VALID_COORD_2);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(expectedCoordinates, ParserUtil.parseCoordinates(VALID_COORD_2));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void parseBattleship_validBattleship() throws Exception {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship expectedBattleshipOne \u003d new AircraftCarrierBattleship(emptySet);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship expectedBattleshipTwo \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship expectedBattleshipThree \u003d new CruiserBattleship(emptySet);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(expectedBattleshipOne, ParserUtil.parseBattleship(new Name(\"aircraft carrier\"), emptySet));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(expectedBattleshipTwo, ParserUtil.parseBattleship(new Name(\"destroyer\"), emptySet));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(expectedBattleshipThree, ParserUtil.parseBattleship(new Name(\"cruiser\"), emptySet));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 62,
      "s-tr": 2,
      "-": 128
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/PutShipCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COORDINATE_FIRST_ROW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_COORDINATE_DESC_OUT_OF_BOUNDS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_COORDINATE_DESC_SYMBOLS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_DESTROYER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ORIENTATION_HORIZONTAL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COORDINATES_A1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COORDINATES_J1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_HORIZONTAL_ORIENTATION;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.commands.PutShipCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.DestroyerBattleship;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class PutShipCommandParserTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, PutShipCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private PutShipCommandParser parser \u003d new PutShipCommandParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Set\u003cTag\u003e emptySet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // missing field coordinates"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // missing field name"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseFailure(parser, COORDINATE_FIRST_ROW, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // no fields specified"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + VALID_COORDINATES_J1,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \"Invalid command format! \\n\" + PutShipCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // invalid coordinates and missing name"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseFailure(parser, INVALID_COORDINATE_DESC_SYMBOLS,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \"Invalid command format! \\n\" + PutShipCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseFailure(parser, INVALID_COORDINATE_DESC_OUT_OF_BOUNDS,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \"Invalid command format! \\n\" + PutShipCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // invalid name followed by valid coordinates"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_COORDINATE_DESC_SYMBOLS,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \"Invalid command format! \\n\" + PutShipCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_COORDINATE_DESC_OUT_OF_BOUNDS,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \"Invalid command format! \\n\" + PutShipCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // valid name followed by invalid coordinates."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_AMY + INVALID_COORDINATE_DESC_SYMBOLS,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \"Invalid command format! \\n\" + PutShipCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_COORDINATE_DESC_OUT_OF_BOUNDS,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \"Invalid command format! \\n\" + PutShipCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_COORDINATE_DESC_SYMBOLS,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": "                \"Invalid command format! \\n\" + PutShipCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "        String userInput \u003d NAME_DESC_DESTROYER + COORDINATE_FIRST_ROW + ORIENTATION_HORIZONTAL;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Coordinates coordinates \u003d new Coordinates(VALID_COORDINATES_A1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_HORIZONTAL_ORIENTATION);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": "        PutShipCommand expectedCommand \u003d new PutShipCommand(coordinates, battleship, orientation);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/model/BoundaryValueCheckerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_HORIZONTAL_ORIENTATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VERTICAL_ORIENTATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.COORDINATES_A1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.COORDINATES_A10;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.COORDINATES_A2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.COORDINATES_B1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.COORDINATES_J1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.MAP_SIZE_TEN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.DestroyerBattleship;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.exceptions.BoundaryValueException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * Contains integration tests (interaction with the Model)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class BoundaryValueCheckerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_battleshipAlreadyPresent_failure() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int mapSize \u003d MAP_SIZE_TEN;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Cell[][] cellGrid \u003d new Cell[mapSize][mapSize];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (int i \u003d 0; i \u003c mapSize; i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (int j \u003d 0; j \u003c mapSize; j++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "                cellGrid[i][j] \u003d new Cell();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new DestroyerBattleship(new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.getHumanMapGrid().initialise(cellGrid);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_HORIZONTAL_ORIENTATION);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.getHumanMapGrid().putShip(battleship, COORDINATES_A1, orientation);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "        BoundaryValueChecker boundaryValueChecker \u003d new BoundaryValueChecker(model.getHumanMapGrid(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "                battleship, COORDINATES_A1, orientation);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Assert.assertThrows(BoundaryValueException.class, () -\u003e boundaryValueChecker.performChecks());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_putBattleshipVertical_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int mapSize \u003d MAP_SIZE_TEN;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Cell[][] cellGrid \u003d new Cell[mapSize][mapSize];"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (int i \u003d 0; i \u003c mapSize; i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (int j \u003d 0; j \u003c mapSize; j++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "                cellGrid[i][j] \u003d new Cell();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new Battleship();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.getHumanMapGrid().initialise(cellGrid);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_VERTICAL_ORIENTATION);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.getHumanMapGrid().putShip(battleship, COORDINATES_B1, orientation);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": "        BoundaryValueChecker boundaryValueChecker \u003d new BoundaryValueChecker(model.getHumanMapGrid(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "                battleship, COORDINATES_A1, orientation);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Assert.assertThrows(BoundaryValueException.class, () -\u003e boundaryValueChecker.performChecks());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_putBattleshipHorizontal_failure() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int mapSize \u003d MAP_SIZE_TEN;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Cell[][] cellGrid \u003d new Cell[mapSize][mapSize];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (int i \u003d 0; i \u003c mapSize; i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (int j \u003d 0; j \u003c mapSize; j++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "                cellGrid[i][j] \u003d new Cell();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new Battleship();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.getHumanMapGrid().initialise(cellGrid);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_HORIZONTAL_ORIENTATION);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.getHumanMapGrid().putShip(battleship, COORDINATES_A2, orientation);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": "        BoundaryValueChecker boundaryValueChecker \u003d new BoundaryValueChecker(model.getHumanMapGrid(),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": "                battleship, COORDINATES_A1, orientation);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Assert.assertThrows(BoundaryValueException.class, () -\u003e boundaryValueChecker.performChecks());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_battleshipTooHorizontal_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int mapSize \u003d MAP_SIZE_TEN;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Cell[][] cellGrid \u003d new Cell[mapSize][mapSize];"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (int i \u003d 0; i \u003c mapSize; i++) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (int j \u003d 0; j \u003c mapSize; j++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iwle"
        },
        "content": "                cellGrid[i][j] \u003d new Cell();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.getHumanMapGrid().initialise(cellGrid);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new Battleship();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_HORIZONTAL_ORIENTATION);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iwle"
        },
        "content": "        BoundaryValueChecker boundaryValueChecker \u003d new BoundaryValueChecker(model.getHumanMapGrid(),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iwle"
        },
        "content": "                battleship, COORDINATES_A10, orientation);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Assert.assertThrows(BoundaryValueException.class, () -\u003e boundaryValueChecker.performChecks());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void execute_battleshipTooVertical_failure() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int mapSize \u003d MAP_SIZE_TEN;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Cell[][] cellGrid \u003d new Cell[mapSize][mapSize];"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (int i \u003d 0; i \u003c mapSize; i++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (int j \u003d 0; j \u003c mapSize; j++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iwle"
        },
        "content": "                cellGrid[i][j] \u003d new Cell();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.getHumanMapGrid().initialise(cellGrid);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new Battleship();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(VALID_VERTICAL_ORIENTATION);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iwle"
        },
        "content": "        BoundaryValueChecker boundaryValueChecker \u003d new BoundaryValueChecker(model.getHumanMapGrid(),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iwle"
        },
        "content": "                battleship, COORDINATES_J1, orientation);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Assert.assertThrows(BoundaryValueException.class, () -\u003e boundaryValueChecker.performChecks());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 138,
      "s-tr": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/MapGridTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static seedu.address.testutil.SizeTenMapGrid.getSizeTenMapGrid;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Status;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class MapGridTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private final MapGrid mapGrid \u003d new MapGrid();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void putShipTest() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        MapGrid sizeTenMap \u003d getSizeTenMapGrid();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Battleship battleship \u003d new Battleship();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(\"vertical\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        sizeTenMap.putShip(battleship, new Coordinates(\"a1\"), orientation);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertEquals(sizeTenMap.get2dArrayMapGridCopy()[0][0].getBattleship().get(), battleship);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void attackCellTest() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        MapGrid sizeTenmap \u003d getSizeTenMapGrid();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Battleship battleship \u003d new Battleship();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation orientation \u003d new Orientation(\"vertical\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertFalse(sizeTenmap.attackCell(new Coordinates(\"a1\")));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "        sizeTenmap.putShip(battleship, new Coordinates(\"a1\"), orientation);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertTrue(sizeTenmap.attackCell(new Coordinates(\"a1\")));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        MapGrid firstMapGrid \u003d getSizeTenMapGrid();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        MapGrid sameMapGrid \u003d new MapGrid(firstMapGrid);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(firstMapGrid, sameMapGrid);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        sameMapGrid.putShip(new Battleship(), new Coordinates(0, 0), new Orientation(\"vertical\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertNotEquals(firstMapGrid, sameMapGrid);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void getPlayerMapView() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        MapGrid mapGrid \u003d getSizeTenMapGrid();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Coordinates a1 \u003d new Coordinates(\"a1\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        mapGrid.putShip(new Battleship(), a1, new Orientation(\"vertical\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Status[][] playerMapView \u003d mapGrid.getPlayerMapView();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(playerMapView[0][0], mapGrid.getCellStatus(a1));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void getEnemyMapView() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        MapGrid mapGrid \u003d getSizeTenMapGrid();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Coordinates a1 \u003d new Coordinates(\"a1\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        mapGrid.putShip(new Battleship(), a1, new Orientation(\"vertical\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // Status hidden"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Status[][] enemyMapView \u003d mapGrid.getEnemyMapView();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(enemyMapView[0][0], Status.HIDDEN);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // Cell attacked"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        mapGrid.attackCell(a1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        enemyMapView \u003d mapGrid.getEnemyMapView();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(enemyMapView[0][0], Status.SHIPHIT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 55,
      "iwle": 5,
      "s-tr": 3,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.state.BattleState;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertEquals(new MapGrid(), modelManager.getHumanMapGrid());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertEquals(new MapGrid(), modelManager.getEnemyMapGrid());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertEquals(BattleState.PRE_BATTLE, modelManager.getBattleState());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void setBattleState_nullState_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        modelManager.setBattleState(null);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void setBattleState_validState_setsBattleState() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        for (BattleState bs: BattleState.values()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            modelManager.setBattleState(bs);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            assertEquals(modelManager.getBattleState(), bs);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        MapGrid mapGrid \u003d new MapGrid();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        modelManager \u003d new ModelManager(mapGrid, userPrefs);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(mapGrid, userPrefs);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(mapGrid, differentUserPrefs)));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 3,
      "s-tr": 12,
      "-": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/model/battleship/BattleshipTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model.battleship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class BattleshipTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Set\u003cTag\u003e emptySet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testDefaultConstructors() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipOne \u003d new Battleship();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipTwo \u003d new Battleship(new Name(\"destroyer\"), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipThree \u003d new Battleship(new Name(\"destroyer\"), 2, 2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipFour \u003d new Battleship(new Name(\"destroyer\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "        HashSet\u003cTag\u003e emptySet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipOneShadow \u003d new Battleship(new Name(\"default\"), 2, 2, emptySet);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipTwoShadow \u003d new Battleship(new Name(\"destroyer\"), 2, 2, emptySet);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipThreeShadow \u003d new Battleship(new Name(\"destroyer\"), 2, 2, emptySet);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipFourShadow \u003d new Battleship(new Name(\"destroyer\"), 2, 2, emptySet);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(battleshipOne, battleshipOneShadow);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(battleshipTwo, battleshipTwoShadow);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(battleshipThree, battleshipThreeShadow);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(battleshipFour, battleshipFourShadow);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new Battleship();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(battleship.toString(), \"default\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testHash() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleship \u003d new Battleship();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(battleship.hashCode(), Objects.hash("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": "                battleship.getName(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "                battleship.getId(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "                battleship.getLength(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "                battleship.getLife(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "                battleship.getTags()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testIsSameBattleship() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // create variables"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipOne \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipTwo \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipThree \u003d battleshipOne;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // test equality"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(battleshipOne.isSameBattleship(battleshipTwo));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(battleshipOne.isSameBattleship(battleshipThree));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testDifferentNameDifferentBattleship() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // create variables"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipOne \u003d new DestroyerBattleship(emptySet);;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipTwo \u003d new CruiserBattleship(emptySet);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // test equality"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(battleshipOne.equals(battleshipTwo));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testSameNameDifferentBattleship() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // create variables"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipOne \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipTwo \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // test equality"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(battleshipOne.equals(battleshipTwo));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testSameNameSameBattleship() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // create variables"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipOne \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipTwo \u003d battleshipOne;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // test equality"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(battleshipOne.equals(battleshipTwo));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testBattleshipLength() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // create variables"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipOne \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(battleshipOne.getLength(), 3);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testBattleshipLife() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // create variables"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipOne \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(battleshipOne.getLife(), 3);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testBattleshipReduceLife() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // create variables"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipOne \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int initialLife \u003d battleshipOne.getLife();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iwle"
        },
        "content": "        battleshipOne.reduceLife();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(battleshipOne.getLife(), initialLife - 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testBattleshipDestroyed() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // create variables"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship battleshipOne \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iwle"
        },
        "content": "        int initialLife \u003d battleshipOne.getLife();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (int i \u003d 0; i \u003c initialLife; i++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iwle"
        },
        "content": "            battleshipOne.reduceLife();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(battleshipOne.isDestroyed(), true);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testAicraftCarrier() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship aircraftCarrier \u003d new AircraftCarrierBattleship(emptySet);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(aircraftCarrier.getLength(), 5);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testDestroyer() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship destroyerBattleship \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(destroyerBattleship.getLength(), 3);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testCruiser() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship cruiserBattleship \u003d new CruiserBattleship(emptySet);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(cruiserBattleship.getLength(), 2);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 157
    }
  },
  {
    "path": "src/test/java/seedu/address/model/battleship/CoordinatesTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model.battleship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class CoordinatesTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void isValidCoordinates() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Coordinates.isValidCoordinates(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(Coordinates.isValidCoordinates(\"\")); // empty string"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(Coordinates.isValidCoordinates(\" \")); // spaces only"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(Coordinates.isValidCoordinates(\"*9\")); // symbols"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(Coordinates.isValidCoordinates(\"9\")); // single digit"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(Coordinates.isValidCoordinates(\"z\")); // single alphabet"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(Coordinates.isValidCoordinates(\"a0\")); // invalid column"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(Coordinates.isValidCoordinates(\"00\")); // double digits"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(Coordinates.isValidCoordinates(\"a1\")); // starting coordinate"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(Coordinates.isValidCoordinates(\"e5\")); // in between coordinate"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(Coordinates.isValidCoordinates(\"j9\")); // extreme boundary"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testGetRow() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Coordinates coordinates \u003d new Coordinates(\"b5\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Index correctColIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(coordinates.getColIndex(), correctColIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testGetCol() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Coordinates coordinates \u003d new Coordinates(\"a1\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Index correctColIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(coordinates.getColIndex(), correctColIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/model/battleship/OrientationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model.battleship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class OrientationTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Orientation(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Orientation(invalidAddress));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void isValidOrientation() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Orientation.isValidOrientation(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(Orientation.isValidOrientation(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(Orientation.isValidOrientation(\" \")); // spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(Orientation.isValidOrientation(\"*9\")); // symbols"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(Orientation.isValidOrientation(\"vert\")); // incorrect abbreviation"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(Orientation.isValidOrientation(\"g\")); // incorrect symbol"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(Orientation.isValidOrientation(\"vertical\")); // starting coordinate"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(Orientation.isValidOrientation(\"horizontal\")); // in between coordinate"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(Orientation.isValidOrientation(\"v\")); // extreme boundary"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(Orientation.isValidOrientation(\"h\")); // extreme boundary"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void isHorizontalTest() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(new Orientation(\"h\").isHorizontal());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(new Orientation(\"horizontal\").isHorizontal());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void isVerticalTest() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(new Orientation(\"v\").isVertical());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(new Orientation(\"vertical\").isVertical());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(new Orientation(\"vertical\").toString(), \"vertical\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(new Orientation(\"horizontal\").toString(), \"horizontal\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(new Orientation(\"v\").toString(), \"vertical\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(new Orientation(\"h\").toString(), \"horizontal\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testEquality() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(new Orientation(\"v\"), new Orientation(\"vertical\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertNotEquals(new Orientation(\"v\"), new Orientation(\"horizontal\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/model/cell/CellTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.model.cell;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class CellTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void status() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell cell \u003d new Cell();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(cell.getStatus(), Status.EMPTY);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        cell.receiveAttack();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(cell.getStatus(), Status.EMPTYHIT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell battleShipCell \u003d new Cell();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        battleShipCell.putShip(new Battleship());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(battleShipCell.getStatus(), Status.SHIP);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        battleShipCell.receiveAttack();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(battleShipCell.getStatus(), Status.SHIPHIT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        battleShipCell.receiveAttack();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(battleShipCell.getStatus(), Status.DESTROYED);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void hasBattleship() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell cell \u003d new Cell();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertFalse(cell.hasBattleShip());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        cell.putShip(new Battleship());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertTrue(cell.hasBattleShip());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void copyConstructor() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell emptyCell \u003d new Cell();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell copyCell \u003d new Cell(emptyCell);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(emptyCell.getBattleship(), copyCell.getBattleship());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell battleShipCell \u003d new Cell();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        battleShipCell.putShip(new Battleship());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        copyCell \u003d new Cell(battleShipCell);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(battleShipCell.getBattleship(), copyCell.getBattleship());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // Exact same cell"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell firstCell \u003d new Cell(new Coordinates(0, 0));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(firstCell, firstCell);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // Compare with null"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertNotEquals(firstCell, null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // Same coordinates"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell secondCell \u003d new Cell(new Coordinates(0, 0));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(firstCell, secondCell);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // Ship one one cell. Both cell same coord"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        secondCell.putShip(new Battleship());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertNotEquals(firstCell, secondCell);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // Same coord. Same ship"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        firstCell.putShip(new Battleship());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(firstCell, secondCell);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        // Not equals, different coordinates"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell diffCoordCell \u003d new Cell(new Coordinates(0, 1));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertNotEquals(firstCell, diffCoordCell);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell cell \u003d new Cell(new Coordinates(\"a1\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(cell.toString(), \"a1\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 76,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/model/cell/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.model.cell;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "iwle": 1,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/player/EnemyTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.model.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import static org.hamcrest.CoreMatchers.is;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import static org.junit.Assert.assertThat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import static seedu.address.testutil.SizeTenMapGrid.initialisePlayerSizeTen;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import static seedu.address.testutil.SizeTenMapGrid.setUpAllShips;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.battle.BattleManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import seedu.address.model.cell.Status;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class EnemyTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private Enemy testEnemy;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private Player testPlayer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private BattleManager batman;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public void readyEnemyForTesting() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        testEnemy \u003d new Enemy();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        testPlayer \u003d new Player();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        initialisePlayerSizeTen(testEnemy);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        initialisePlayerSizeTen(testPlayer);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public static \u003cT\u003e boolean isSameListContents(List\u003cT\u003e list1, List\u003cT\u003e list2) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        return new HashSet\u003c\u003e(list1).equals(new HashSet\u003c\u003e(list2));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void test_getName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertEquals(\"EnemyPlayer\", testEnemy.getName());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void test_getFleetSize() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertEquals(8, testEnemy.getFleetSize());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void test_getFleetContents() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertEquals(testPlayer.getFleetContents(), testEnemy.getFleetContents());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void test_getMapGrid() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertEquals(testPlayer.getMapGrid(), testEnemy.getMapGrid());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test public void test_getTargetHistory() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertEquals(testPlayer.getTargetHistory(), testEnemy.getTargetHistory());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test public void test_getLastAttackStatus() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        testEnemy.receiveStatus(Status.SHIP);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertThat(testEnemy.getLastAttackStatus(), is(Status.SHIP));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test public void test_getAllPossibleTargets() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertTrue(testEnemy.getAllPossibleTargets() instanceof ArrayList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test public void test_getAllPossiblePopulateCoords() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertTrue(testEnemy.getAllPossiblePopulateCoords() instanceof ArrayList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test public void test_getAllParityTargets() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertTrue(testEnemy.getAllParityTargets() instanceof ArrayList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test public void test_getWatchlist() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertTrue(testEnemy.getWatchlist() instanceof Stack);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * this method calls two other private methods:  fillWithAllCoords() and populateEnemyMap();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * testing will be done in two phases, one for  fillWithAllCoords() and one for populateEnemyMap();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Setup:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *     Enemy should first have:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *          empty lists: allPossibleTargets, allPossiblePopulateCoords, allParityTargets"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *          empty deployed fleet"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Expected result:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *     Enemy should have:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *          filled allPossibleTargets, allPossiblePopulateCoords, allParityTargets"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *          allParityTargets should only contain coordinates that hasParity()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *          allPossibleTargets must be size 100,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *          allPossiblePopulateCoords must be \u003c 100,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *          allParityTargets must be 50"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *          allParityTargets should be proper subset of allPossibleTargets"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *          allPossiblePopulateCoords should be proper subset of allPossibleTargets"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *          filled deployed fleet with the correct number of battleships: 8 in total for  size 10 map"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test public void test_prepEnemy() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //tests for fillWithAllCoords()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //first check empty lists: allPossibleTargets, allPossiblePopulateCoords, allParityTargets"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertTrue(testEnemy.getAllPossibleTargets().isEmpty());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertTrue(testEnemy.getAllPossiblePopulateCoords().isEmpty());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertTrue(testEnemy.getAllParityTargets().isEmpty());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //check that there are no deployed ships yet - deployedFleet is empty"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertTrue(testEnemy.getFleet().getDeployedFleet().isEmpty());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        testEnemy.prepEnemy();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //check that allPossibleTargets, allPossiblePopulateCoords, allParityTargets are not empty"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertFalse(testEnemy.getAllPossibleTargets().isEmpty());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertFalse(testEnemy.getAllPossiblePopulateCoords().isEmpty());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertFalse(testEnemy.getAllParityTargets().isEmpty());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //check that allParityTargets should only contain coordinates that hasParity()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        for (Coordinates parityElement : testEnemy.getAllParityTargets()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            assertTrue(testEnemy.hasParity(parityElement.getRowIndex().getZeroBased(),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                    parityElement.getColIndex().getZeroBased()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //check sizes of allPossibleTargets, allPossiblePopulateCoords, allParityTargets"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertEquals(testEnemy.getAllPossibleTargets().size(), 100);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertTrue(testEnemy.getAllPossiblePopulateCoords().size() \u003c 100);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertEquals(testEnemy.getAllParityTargets().size(), 50);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //check that allParityTargets should be proper subset of allPossibleTargets"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertFalse(isSameListContents(testEnemy.getAllParityTargets(), testEnemy.getAllPossibleTargets()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertTrue(testEnemy.getAllPossibleTargets().containsAll(testEnemy.getAllParityTargets()));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //check that allPossiblePopulateCoords should be proper subset of allPossibleTargets"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertFalse(isSameListContents(testEnemy.getAllPossiblePopulateCoords(), testEnemy.getAllPossibleTargets()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertTrue(testEnemy.getAllPossibleTargets().containsAll(testEnemy.getAllPossiblePopulateCoords()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //check that the correct number of ships were deployed into deployedFleet"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertEquals(testEnemy.getFleet().getSize(), 8);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Expected result:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *    For every call of enemyShootAt:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *    targetHistory must + 1"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *    allTargets must - 1"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *    if watchlist empty -\u003e allParityTargets must - 1"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *    else watchlist must - 1"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *    coordinate shot at must be added to targetHistory"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *    coordinate must not be present in allTargets, allParityTargets and watchlist"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test public void test_enemyShootAt() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        int startingAllPossibleTargetsSize;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        int startingAllParityTargets;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        int startingWatchlistSize;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        int startingTargetHistorySize;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        setUpAllShips(testPlayer);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        batman \u003d new BattleManager(testPlayer, testEnemy);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        for (int i \u003d 0; i \u003c 30; i++) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            startingAllPossibleTargetsSize \u003d testEnemy.getAllPossibleTargets().size();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            startingAllParityTargets \u003d testEnemy.getAllParityTargets().size();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            startingWatchlistSize \u003d testEnemy.getWatchlist().size();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            startingTargetHistorySize \u003d testEnemy.getTargetHistory().size();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            Coordinates shotAt \u003d testEnemy.enemyShootAt();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            assertEquals(startingTargetHistorySize, (testEnemy.getTargetHistory().size() - 1));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            assertEquals((startingAllPossibleTargetsSize - 1), testEnemy.getAllPossibleTargets().size());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            assertTrue(testEnemy.getTargetHistory().contains(shotAt));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            assertFalse(testEnemy.getAllPossibleTargets().contains(shotAt));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            assertFalse(testEnemy.getAllParityTargets().contains(shotAt));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            assertFalse(testEnemy.getWatchlist().contains(shotAt));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            assertTrue(((startingAllParityTargets - 1) \u003d\u003d testEnemy.getAllParityTargets().size())"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "                    ^ ((startingWatchlistSize - 1) \u003d\u003d testEnemy.getWatchlist().size()));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Expected result:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *  testEnemy should have its lastAttackStatus attribute be updated to"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *  the status passed into the receiveStatus method"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test public void test_receiveStatus() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Status giveStatus \u003d Status.EMPTY;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        testEnemy.receiveStatus(giveStatus);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertThat(testEnemy.getLastAttackStatus(), is(giveStatus));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 28,
      "lucydotc": 187,
      "s-tr": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/player/FleetTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "package seedu.address.model.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.AircraftCarrierBattleship;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.CruiserBattleship;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.DestroyerBattleship;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "public class FleetTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    private final Fleet testFleet \u003d new Fleet();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private final Set\u003cTag\u003e emptySet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public void constructor_default() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Fleet f \u003d new Fleet();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(8, f.getSize());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public void constructor_customArg() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet f \u003d new Fleet(10, 10, 10);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(30, f.getSize());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            expected \u003d IllegalArgumentException.class"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iwle"
        },
        "content": "    )"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void constructor_invalidInput_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iwle"
        },
        "content": "        new Fleet(0, 0, 0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public void testGetSize() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(8, testFleet.getSize());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public void testGetFleetContents() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(new Fleet(5, 2, 1).getDeployedFleet(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iwle"
        },
        "content": "                testFleet.getDeployedFleet());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testGetDestroyerBattleship() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet destroyerOnlyFleet \u003d new Fleet(5, 0, 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(destroyerOnlyFleet.getDeployedFleet(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iwle"
        },
        "content": "                testFleet.getListOfBattleship(DestroyerBattleship.class));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testGetCruiserBattleship() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet cruiserOnlyFleet \u003d new Fleet(0, 2, 0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(cruiserOnlyFleet.getDeployedFleet(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iwle"
        },
        "content": "                testFleet.getListOfBattleship(CruiserBattleship.class));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testGetAircraftCarrierBattleship() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet aircraftCarrierOnlyFleet \u003d new Fleet(0, 0, 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(aircraftCarrierOnlyFleet.getDeployedFleet(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iwle"
        },
        "content": "                testFleet.getListOfBattleship(AircraftCarrierBattleship.class));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testConstructorFail() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iwle"
        },
        "content": "            new Fleet(0, 0, 0); });"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testDeployBattleships() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet testFleet \u003d new Fleet(1, 1, 1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Coordinates testCoordinates \u003d new Coordinates(\"a1\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation testOrientation \u003d new Orientation(\"vertical\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(new DestroyerBattleship(emptySet), testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(new CruiserBattleship(emptySet), testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(new AircraftCarrierBattleship(emptySet), testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumDestroyerLeft(), 0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumCruiserLeft(), 0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumAircraftCarrierLeft(), 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testIsEnoughBattleships() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet testFleet \u003d new Fleet(1, 1, 1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship testDestroyer \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship testCruiser \u003d new CruiserBattleship(emptySet);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship testAircraftCarrier \u003d new AircraftCarrierBattleship(emptySet);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(testFleet.isEnoughBattleship(testDestroyer, 1));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(testFleet.isEnoughBattleship(testCruiser, 1));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(testFleet.isEnoughBattleship(testAircraftCarrier, 1));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Coordinates testCoordinates \u003d new Coordinates(\"a1\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation testOrientation \u003d new Orientation(\"vertical\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(new DestroyerBattleship(emptySet), testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(new CruiserBattleship(emptySet), testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(new AircraftCarrierBattleship(emptySet), testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(testFleet.isEnoughBattleship(testDestroyer, 1));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(testFleet.isEnoughBattleship(testCruiser, 1));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(testFleet.isEnoughBattleship(testAircraftCarrier, 1));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship testInvalidBattleship \u003d new Battleship();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(testFleet.isEnoughBattleship(testInvalidBattleship, 1));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet testFleet \u003d new Fleet(1, 1, 1);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iwle"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iwle"
        },
        "content": "        builder.append(testFleet.getSize())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(\" Fleet size: \")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(testFleet.getSize())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(\" Fleet contents: \")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iwle"
        },
        "content": "                .append(testFleet.getDeployedFleet());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.toString(), builder.toString());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testGetAttributes() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet testFleet \u003d new Fleet(1, 1, 1);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumDestroyerLeft(), 1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumCruiserLeft(), 1);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumAircraftCarrierLeft(), 1);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testResetFleet() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet testFleet \u003d new Fleet(6);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumDestroyerLeft(), 1);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumCruiserLeft(), 1);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumAircraftCarrierLeft(), 1);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship testDestroyer \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Coordinates testCoordinates \u003d new Coordinates(\"a1\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation testOrientation \u003d new Orientation(\"vertical\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(testDestroyer, testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getDeployedFleet().isEmpty(), false);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.resetFleet(6);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getDeployedFleet().isEmpty(), true);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testIsAllDeployed() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet testFleet \u003d new Fleet(6);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumDestroyerLeft(), 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumCruiserLeft(), 1);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumAircraftCarrierLeft(), 1);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship testDestroyer \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship testCruiser \u003d new CruiserBattleship(emptySet);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship testAircraftCarrier \u003d new AircraftCarrierBattleship(emptySet);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Coordinates testCoordinates \u003d new Coordinates(\"a1\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation testOrientation \u003d new Orientation(\"vertical\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(testDestroyer, testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(testFleet.isAllDeployed());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(testCruiser, testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(testAircraftCarrier, testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(testFleet.isAllDeployed());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testAllFleetDestroyed() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet testFleet \u003d new Fleet(6);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship testDestroyer \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Coordinates testCoordinates \u003d new Coordinates(\"a1\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation testOrientation \u003d new Orientation(\"vertical\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(testDestroyer, testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertFalse(testFleet.isAllDestroyed());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iwle"
        },
        "content": "        for (Fleet.FleetEntry fleetEntry : testFleet.getDeployedFleet()) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iwle"
        },
        "content": "            for (int i \u003d 0; i \u003c fleetEntry.getBattleship().getLength(); i++) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iwle"
        },
        "content": "                fleetEntry.getBattleship().reduceLife();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iwle"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iwle"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(testFleet.isAllDestroyed());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testGetByTags() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet testFleet \u003d new Fleet(6);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumDestroyerLeft(), 1);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumCruiserLeft(), 1);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumAircraftCarrierLeft(), 1);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Tag tag1 \u003d new Tag(\"tag1\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Tag tag2 \u003d new Tag(\"tag2\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Set\u003cTag\u003e tag1Set \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iwle"
        },
        "content": "        tag1Set.add(tag1);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Set\u003cTag\u003e tag2Set \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iwle"
        },
        "content": "        tag2Set.add(tag2);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship testDestroyer \u003d new DestroyerBattleship(tag1Set);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship testCruiser \u003d new CruiserBattleship(tag1Set);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship testAircraftCarrier \u003d new AircraftCarrierBattleship(tag2Set);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Coordinates testCoordinates \u003d new Coordinates(\"a1\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation testOrientation \u003d new Orientation(\"vertical\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(testDestroyer, testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(testCruiser, testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(testAircraftCarrier, testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getByTags(tag1Set).size(), 2);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getByTags(tag2Set).size(), 1);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getByTags(emptySet).size(), 3);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void testGetByName() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Fleet testFleet \u003d new Fleet(6);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumDestroyerLeft(), 1);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumCruiserLeft(), 1);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getNumAircraftCarrierLeft(), 1);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship testDestroyer \u003d new DestroyerBattleship(emptySet);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship testCruiser \u003d new CruiserBattleship(emptySet);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Battleship testAircraftCarrier \u003d new AircraftCarrierBattleship(emptySet);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Coordinates testCoordinates \u003d new Coordinates(\"a1\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Orientation testOrientation \u003d new Orientation(\"vertical\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(testDestroyer, testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(testCruiser, testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iwle"
        },
        "content": "        testFleet.deployOneBattleship(testAircraftCarrier, testCoordinates, testOrientation);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getByName(new Name(\"destroyer\")).size(), 1);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getByName(new Name(\"cruiser\")).size(), 1);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(testFleet.getByName(new Name(\"aircraft carrier\")).size(), 1);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void fleetEntryEquals() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Fleet.FleetEntry entry1 \u003d new Fleet.FleetEntry("
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            new DestroyerBattleship(Collections.emptySet()),"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            TypicalIndexes.COORDINATES_A1,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            new Orientation(\"v\"));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Fleet.FleetEntry entry2 \u003d new Fleet.FleetEntry("
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            new DestroyerBattleship(Collections.emptySet()),"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            TypicalIndexes.COORDINATES_A1,"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            new Orientation(\"v\"));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Fleet.FleetEntry entry3 \u003d new Fleet.FleetEntry("
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            new DestroyerBattleship(Collections.emptySet()),"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            TypicalIndexes.COORDINATES_A1,"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            new Orientation(\"h\"));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // check null"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertFalse(entry1.equals(null));"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // check different type"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertFalse(entry1.equals(5));"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // check same object"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(entry1.equals(entry1));"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // check equal object"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(entry1.equals(entry2));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // check different object"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertFalse(entry1.equals(entry3));"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 234,
      "lucydotc": 32,
      "s-tr": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/model/player/PlayerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "package seedu.address.model.player;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "public class PlayerTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public final Player testPlayer \u003d new Player(\"Alice\", 5, 2, 1);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    //Lucy TO-FIX:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /*  @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public void constructor_default() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Player newPlayer1 \u003d new Player();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        Player newPlayer2 \u003d new Player(\"Player1\", 5);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertEquals(newPlayer1, newPlayer2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //invalid names"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertFalse(Player.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertFalse(Player.isValidName(\"Ab\")); // under min 3 chars"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertFalse(Player.isValidName(\"AbCdEfGhIjklmnoPqrst\")); // over max 16 chars"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertFalse(Player.isValidName(\"John Doe\")); // contains whitespace"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertFalse(Player.isValidName(\"John!@#$\")); // Contains invalid characters !#$%\u0026\u0027*+/\u003d?`{|}~^.-"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertFalse(Player.isValidName(\"Enemy\")); // Contains saved name \"Enemy\" for computer enemy player."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        //valid names"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertTrue(Player.isValidName(\"123AbCde123\")); //Allows upper and lower case alphanumerical chars"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertTrue(Player.isValidName(\"bob\")); //satisfies min 3 char required"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertTrue(Player.isValidName(\"AbCdEfGhIjklmnoP\")); //at max 16 char limit"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public void test_getName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertEquals(\"Alice\", testPlayer.getName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public void test_getFleetSize() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertEquals(8, testPlayer.getFleetSize());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public void test_getFleetContents() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Player newPlayer1 \u003d new Player(\"Bob\", 5, 2, 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertEquals(newPlayer1.getFleetContents(), testPlayer.getFleetContents());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public void test_getMapGrid() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Player newPlayer1 \u003d new Player(\"Bob\", 5, 2, 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertEquals(newPlayer1.getMapGrid(), testPlayer.getMapGrid());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void test_getTargetHistory() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iwle"
        },
        "content": "        Player newPlayer1 \u003d new Player(\"Bob\", 5, 2, 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        assertEquals(newPlayer1.getTargetHistory(), testPlayer.getTargetHistory());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void test_toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Player newPlayer1 \u003d new Player(\"Alice\", 5, 2, 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertEquals(newPlayer1.toString(), testPlayer.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 5,
      "lucydotc": 57,
      "s-tr": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "bos10"
        },
        "content": "        JsonStatisticsStorage statisticsStorage \u003d new JsonStatisticsStorage(getTempFilePath(\"stats\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "bos10"
        },
        "content": "        storageManager \u003d new StorageManager(userPrefsStorage, statisticsStorage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 2,
      "-": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EvilEnemy.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * EvilEnemy is like InterceptedEnemy, but throws an exception"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * when enemyShootAt is called"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class EvilEnemy extends InterceptedEnemy {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public Coordinates enemyShootAt() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        throw new RuntimeException();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/InterceptedEnemy.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "s-tr"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.battleship.AircraftCarrierBattleship;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.battleship.CruiserBattleship;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.battleship.DestroyerBattleship;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.cell.Status;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Enemy;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": " * Stub for the Enemy class, to aid in testing BeginCommand and AttackCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "public class InterceptedEnemy extends Enemy {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private boolean isPrepCalled;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private boolean isReceiveStatusCalled;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private boolean isEnemyShootAtCalled;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private int lastX \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private int lastY \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public InterceptedEnemy() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        isPrepCalled \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        isReceiveStatusCalled \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Dummy behaviour for prepEnemy() which places all ships vertically side by side."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void prepEnemy() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        isPrepCalled \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        int row \u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        int column \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // put aircraft carriers"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        while (getFleet().getNumAircraftCarrierLeft() \u003e 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            Battleship cv \u003d new AircraftCarrierBattleship(Collections.emptySet());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            Coordinates toPut \u003d new Coordinates(Index.fromZeroBased(row), Index.fromZeroBased(column));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            this.getFleet().deployOneBattleship(cv, toPut, new Orientation(\"v\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            this.getMapGrid().putShip(cv, toPut, new Orientation(\"v\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            column++;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // put destroyers"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        while (getFleet().getNumAircraftCarrierLeft() \u003e 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            Battleship dd \u003d new DestroyerBattleship(Collections.emptySet());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            Coordinates toPut \u003d new Coordinates(Index.fromZeroBased(row), Index.fromZeroBased(column));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            this.getFleet().deployOneBattleship(dd, toPut, new Orientation(\"v\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            this.getMapGrid().putShip(dd, toPut, new Orientation(\"v\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            column++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // put aircraft carriers"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        while (getFleet().getNumAircraftCarrierLeft() \u003e 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            Battleship cl \u003d new CruiserBattleship(Collections.emptySet());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            Coordinates toPut \u003d new Coordinates(Index.fromZeroBased(row), Index.fromZeroBased(column));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            this.getFleet().deployOneBattleship(cl, toPut, new Orientation(\"v\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            this.getMapGrid().putShip(cl, toPut, new Orientation(\"v\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            column++;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * enemyShootAt() with dummy behaviour"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public Coordinates enemyShootAt() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        isEnemyShootAtCalled \u003d true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Coordinates toShoot \u003d new Coordinates(Index.fromZeroBased(lastX), Index.fromZeroBased(lastY));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        lastY++;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        if (lastY \u003d\u003d this.getMapGrid().getMapSize()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            lastY \u003d 0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            lastX++;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return toShoot;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Interceptor for receiveStatus()."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void receiveStatus(Status s) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        isReceiveStatusCalled \u003d true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public boolean isPrepCalled() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return isPrepCalled;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public boolean isReceiveStatusCalled() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return isReceiveStatusCalled;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public boolean isEnemyShootAtCalled() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return isEnemyShootAtCalled;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "s-tr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "s-tr": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SerializableTestClass.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "bos10"
        },
        "content": "            + \"}\") + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SizeTenMapGrid.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.battleship.Battleship;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.battleship.DestroyerBattleship;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.battleship.Orientation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Cell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import seedu.address.model.player.Player;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * A utility class that returns an empty size 10 grid"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class SizeTenMapGrid {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private static final int SIZE_TEN \u003d 10;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private static Cell[][] getSizeTenCellGrid() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        Cell[][] cellGrid \u003d new Cell[SIZE_TEN][SIZE_TEN];"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        char row \u003d \u0027a\u0027;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        for (int i \u003d 0; i \u003c SIZE_TEN; i++) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            for (int j \u003d 0; j \u003c SIZE_TEN; j++) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "                cellGrid[i][j] \u003d new Cell(new Coordinates(i, j));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return cellGrid;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Returns a size ten map"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static MapGrid getSizeTenMapGrid() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Cell[][] cellGrid \u003d getSizeTenCellGrid();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        MapGrid newMap \u003d new MapGrid();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        newMap.initialise(cellGrid);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        return newMap;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Initialises a Player with a size 10 map grid."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static void initialisePlayerSizeTen(Player player) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Cell[][] cellGrid \u003d getSizeTenCellGrid();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        player.getMapGrid().initialise(cellGrid);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Set up the following scenario:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Player has one ship at a1 vertical with 1 HP"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @param p The player to set up"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @return the ship that is about to be destroyed"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static Battleship setUpAlmostDefeat(Player p) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        initialisePlayerSizeTen(p);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Battleship ship1 \u003d new DestroyerBattleship(Collections.emptySet());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            ship1.reduceLife();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } while (ship1.getLife() !\u003d 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Orientation vertical \u003d new Orientation(\"v\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        p.getFleet().deployOneBattleship(ship1, TypicalIndexes.COORDINATES_A1, vertical);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        p.getMapGrid().putShip(ship1, TypicalIndexes.COORDINATES_A1, vertical);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return ship1;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Set up the following scenario:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Player has one ship at a1 vertical with full HP"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @param p The player to set up"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @return The ship that was placed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static Battleship setUpSingleShip(Player p) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        initialisePlayerSizeTen(p);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Battleship ship \u003d new DestroyerBattleship(Collections.emptySet());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Orientation vertical \u003d new Orientation(\"v\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        p.getFleet().deployOneBattleship(ship, TypicalIndexes.COORDINATES_A1, vertical);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        p.getMapGrid().putShip(ship, TypicalIndexes.COORDINATES_A1, vertical);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return ship;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * Set up the following scenario:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *     Player has one Aircraft Carrier at:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *          a1 horizontal with full HP"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *     Player has two Destroyers at:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *          b2 horizontal with full HP"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *          d4 horizontal with full HP"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *     Player has five cruisers at:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *          c8 horizontal with full HP"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *          g3 horizontal with full HP"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *          i3 horizontal with full HP"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *          g6 horizontal with full HP"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     *          i6 horizontal with full HP"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     * @param p The player to set up"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    public static void setUpAllShips(Player p) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        String[] coordsToUse \u003d {\"a1\", \"b2\", \"d4\", \"c8\", \"g3\", \"i3\", \"g6\", \"i6\"};"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        for (int i \u003d 0; i \u003c 8; i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            Battleship ship \u003d new DestroyerBattleship(Collections.emptySet());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            Orientation horizontal \u003d new Orientation(\"h\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            p.getFleet().deployOneBattleship(ship, new Coordinates(coordsToUse[i]), horizontal);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "            p.getMapGrid().putShip(ship, new Coordinates(coordsToUse[i]), horizontal);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lucydotc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lucydotc"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * Set up the following scenario:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Player has one ship at a1 vertical with 1 HP"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     *     Player has one ship at j1 horizontal with full HP"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @param p The player to set up"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     * @return the ship that is about to be destroyed"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "s-tr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static Battleship setUpAlmostDestroy(Player p) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        initialisePlayerSizeTen(p);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Battleship ship1 \u003d new DestroyerBattleship(Collections.emptySet());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            ship1.reduceLife();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        } while (ship1.getLife() !\u003d 1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Orientation vertical \u003d new Orientation(\"v\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        p.getFleet().deployOneBattleship(ship1, TypicalIndexes.COORDINATES_A1, vertical);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        p.getMapGrid().putShip(ship1, TypicalIndexes.COORDINATES_A1, vertical);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Battleship ship2 \u003d new DestroyerBattleship(Collections.emptySet());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        Orientation horizontal \u003d new Orientation(\"h\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        p.getFleet().deployOneBattleship(ship2, TypicalIndexes.COORDINATES_J1, horizontal);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        p.getMapGrid().putShip(ship2, TypicalIndexes.COORDINATES_J1, horizontal);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        return ship1;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 25,
      "lucydotc": 27,
      "s-tr": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.cell.Coordinates;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final int MAP_SIZE_TEN \u003d 10;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final Coordinates COORDINATES_A1 \u003d new Coordinates(\"a1\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final Coordinates COORDINATES_A2 \u003d new Coordinates(\"a2\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final Coordinates COORDINATES_A10 \u003d new Coordinates(\"a10\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final Coordinates COORDINATES_B1 \u003d new Coordinates(\"b1\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final Coordinates COORDINATES_J1 \u003d new Coordinates(\"j1\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public static final Coordinates COORDINATES_LAST_CELL \u003d new Coordinates(\"j10\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public static final Coordinates INVALID_COORDINATE \u003d new Coordinates(99, 99);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 10,
      "s-tr": 2,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ArrayList\u003cString\u003e history \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(commandText -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandText.equals(COMMAND_THAT_SUCCEEDS)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                return new CommandResult(\"Command successful\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(\"Command failed\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }, history);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "bos10"
        },
        "content": "    //        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 2,
      "-": 157
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/EnemyMapTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iwle"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iwle"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iwle"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class EnemyMapTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iwle"
        },
        "content": "    private EnemyMap enemyMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iwle"
        },
        "content": "        enemyMap \u003d new EnemyMap(model.getEnemyMapObservable(), model.getEnemyMapGrid());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iwle"
        },
        "content": "    // TODO: write UI tests"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void stubTests() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.updateUi();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iwle"
        },
        "content": "        enemyMap.getMapView(model.getEnemyMapGrid());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": " * A GUI unit test class for MapGrid."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 1,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "bos10"
        },
        "content": "import seedu.address.storage.JsonStatisticsStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "bos10"
        },
        "content": "        JsonStatisticsStorage jsonStatisticsStorage \u003d new JsonStatisticsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "bos10"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "bos10"
        },
        "content": "                jsonUserPrefsStorage, jsonStatisticsStorage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new LogicManager(new ModelManager(), storageManager));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_allWindowsClosed() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuHelpButton();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * Opens the {@code HelpWindow} by clicking on the menu bar\u0027s help button."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuHelpButton() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Help\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"F1\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "bos10": 4,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MapTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iwle"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.cell.Status;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "public class MapTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private Map playerMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        playerMap \u003d new PlayerMap(model.getHumanMapObservable(), model.getHumanMapGrid());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "erjillsison"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    public void getColourTest() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(playerMap.getColor(Status.HIDDEN), Color.CADETBLUE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(playerMap.getColor(Status.SHIP), Color.BLACK);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(playerMap.getColor(Status.SHIPHIT), Color.ORANGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(playerMap.getColor(Status.EMPTY), Color.LIGHTBLUE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(playerMap.getColor(Status.DESTROYED), Color.RED);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "        assertEquals(playerMap.getColor(Status.EMPTYHIT), Color.DARKBLUE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iwle"
        },
        "content": "    // TODO: write UI tests"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iwle"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iwle"
        },
        "content": "    public void stubTests() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iwle"
        },
        "content": "        model.updateUi();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iwle"
        },
        "content": "        playerMap.getColumnLabelCell();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iwle"
        },
        "content": "        playerMap.getRowLabelCell();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iwle"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iwle"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 32,
      "iwle": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatisticViewTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iwle"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import static org.junit.Assume.assumeFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "s-tr"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iwle"
        },
        "content": "public class StatisticViewTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    private StatisticView statisticView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        guiRobot.interact(() -\u003e statisticView \u003d new StatisticView(new Stage(), new XYChart.Series\u003c\u003e()));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        FxToolkit.registerStage(statisticView::getRoot);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void isShowing_statsViewIsShowing_returnsTrue() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        guiRobot.interact(statisticView::show);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(statisticView.getRoot().isShowing());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void isShowing_statsViewIsHiding_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertFalse(statisticView.getRoot().isShowing());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iwle"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    public void focus_helpWindowNotFocused_focused() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // TODO: This test skip can be removed once this bug is fixed:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // https://github.com/javafxports/openjdk-jfx/issues/50"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        //"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // When there are two stages (stage1 and stage2) shown,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // stage1 is in focus and stage2.requestFocus() is called,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // we expect that stage1.isFocused() will return false while"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // stage2.isFocused() returns true. However, as reported in the bug report,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // both stage1.isFocused() and stage2.isFocused() returns true,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // which fails the test."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assumeFalse(\"Test skipped in headless mode: Window focus behavior is buggy.\", guiRobot.isHeadlessMode());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        guiRobot.interact(statisticView::show);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        // Focus on another stage to remove focus from the helpWindow"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            Stage temporaryStage \u003d new Stage();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            temporaryStage.show();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "s-tr"
        },
        "content": "            temporaryStage.requestFocus();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        });"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertFalse(statisticView.getRoot().isFocused());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "s-tr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        guiRobot.interact(() -\u003e statisticView.getRoot().requestFocus());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "s-tr"
        },
        "content": "        assertTrue(statisticView.getRoot().isFocused());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "s-tr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iwle"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iwle": 5,
      "s-tr": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "import seedu.address.model.MapGrid;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "erjillsison"
        },
        "content": "    private final MapGrid mapGrid \u003d new MapGrid();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "bos10"
        },
        "content": "    // EDIT FOR TESTING"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "bos10"
        },
        "content": "    // EDIT FOR TESTING"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "bos10"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // after address book is updated"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "bos10"
        },
        "content": "        //guiRobot.interact(() -\u003e mapGrid.addPerson(ALICE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertStatusBarContent();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "bos10"
        },
        "content": "    private void assertStatusBarContent() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "bos10"
        },
        "content": "        StatusBarFooter statusBarFooter1 \u003d new StatusBarFooter();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "bos10"
        },
        "content": "        StatusBarFooter statusBarFooter2 \u003d new StatusBarFooter();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "bos10"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "bos10"
        },
        "content": "        // create 2 status bar and compare the timing"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "bos10"
        },
        "content": "        assertEquals(statusBarFooter1.getElapsedTime(System.nanoTime()),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "bos10"
        },
        "content": "                   statusBarFooter2.getElapsedTime(System.nanoTime()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "erjillsison": 2,
      "bos10": 13,
      "-": 54
    }
  }
]
